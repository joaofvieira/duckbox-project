*** b/sound/core/sound.c	2010-02-15 09:28:06.000000000 +0100
--- a/sound/core/sound.c	2010-02-16 09:13:06.000000000 +0100
***************
*** 291,296 ****
--- 291,304 ----
  	return -1;
  }
  
+ int snd_get_minor(int type, int card, int dev)
+ {
+ 	return find_snd_minor(type, snd_cards[card], dev);
+ }
+  
+ EXPORT_SYMBOL(snd_get_minor);
+  
+ 
  /**
   * snd_unregister_device - unregister the device on the given card
   * @type: the device type, SNDRV_DEVICE_TYPE_XXX
*** b/include/sound/core.h	2007-10-09 22:31:38.000000000 +0200
--- a/include/sound/core.h	2010-02-16 09:22:59.000000000 +0100
***************
*** 451,455 ****
--- 451,456 ----
  const struct snd_pci_quirk *
  snd_pci_quirk_lookup(struct pci_dev *pci, const struct snd_pci_quirk *list);
  
+ int snd_get_minor(int type, int card, int dev);
  
  #endif /* __SOUND_CORE_H */
diff -rcN linux-sh4-2.6.23.17_stm23_0119-orig/sound//core/oss/pcm_oss.c linux-sh4/sound//core/oss/pcm_oss.c
*** linux-sh4-2.6.23.17_stm23_0119-orig/sound//core/oss/pcm_oss.c	2007-10-09 22:31:38.000000000 +0200
--- linux-sh4/sound//core/oss/pcm_oss.c	2009-07-18 20:38:57.000000000 +0200
***************
*** 203,209 ****
  	return changed;
  }
  
! static int snd_pcm_hw_param_mask(struct snd_pcm_substream *pcm,
  				 struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var,
  				 const struct snd_mask *val)
--- 203,209 ----
  	return changed;
  }
  
! int snd_pcm_hw_param_mask(struct snd_pcm_substream *pcm,
  				 struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var,
  				 const struct snd_mask *val)
***************
*** 219,225 ****
  	return 0;
  }
  
! static int _snd_pcm_hw_param_min(struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var, unsigned int val,
  				 int dir)
  {
--- 219,227 ----
  	return 0;
  }
  
! EXPORT_SYMBOL_GPL(snd_pcm_hw_param_mask);
! 
! int _snd_pcm_hw_param_min(struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var, unsigned int val,
  				 int dir)
  {
***************
*** 250,255 ****
--- 252,259 ----
  	return changed;
  }
  
+ EXPORT_SYMBOL_GPL(_snd_pcm_hw_param_min);
+ 
  /**
   * snd_pcm_hw_param_min
   * @pcm: PCM instance
***************
*** 397,403 ****
   * SNDRV_PCM_HW_PARAM_FORMAT, SNDRV_PCM_HW_PARAM_SUBFORMAT.
   * Return the value found.
    */
! static int snd_pcm_hw_param_near(struct snd_pcm_substream *pcm,
  				 struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var, unsigned int best,
  				 int *dir)
--- 401,407 ----
   * SNDRV_PCM_HW_PARAM_FORMAT, SNDRV_PCM_HW_PARAM_SUBFORMAT.
   * Return the value found.
    */
! int snd_pcm_hw_param_near(struct snd_pcm_substream *pcm,
  				 struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var, unsigned int best,
  				 int *dir)
***************
*** 466,471 ****
--- 470,477 ----
  	return v;
  }
  
+ EXPORT_SYMBOL_GPL(snd_pcm_hw_param_near);
+ 
  static int _snd_pcm_hw_param_set(struct snd_pcm_hw_params *params,
  				 snd_pcm_hw_param_t var, unsigned int val,
  				 int dir)
***************
*** 526,532 ****
   * values != VAL. Reduce configuration space accordingly.
   *  Return VAL or -EINVAL if the configuration space is empty
   */
! static int snd_pcm_hw_param_set(struct snd_pcm_substream *pcm,
  				struct snd_pcm_hw_params *params,
  				snd_pcm_hw_param_t var, unsigned int val,
  				int dir)
--- 532,538 ----
   * values != VAL. Reduce configuration space accordingly.
   *  Return VAL or -EINVAL if the configuration space is empty
   */
! int snd_pcm_hw_param_set(struct snd_pcm_substream *pcm,
  				struct snd_pcm_hw_params *params,
  				snd_pcm_hw_param_t var, unsigned int val,
  				int dir)
***************
*** 542,548 ****
  	return snd_pcm_hw_param_value(params, var, NULL);
  }
  
! static int _snd_pcm_hw_param_setinteger(struct snd_pcm_hw_params *params,
  					snd_pcm_hw_param_t var)
  {
  	int changed;
--- 548,556 ----
  	return snd_pcm_hw_param_value(params, var, NULL);
  }
  
! EXPORT_SYMBOL_GPL(snd_pcm_hw_param_set);
! 
! int _snd_pcm_hw_param_setinteger(struct snd_pcm_hw_params *params,
  					snd_pcm_hw_param_t var)
  {
  	int changed;
***************
*** 554,559 ****
--- 562,569 ----
  	return changed;
  }
  	
+ EXPORT_SYMBOL_GPL(_snd_pcm_hw_param_setinteger);
+ 
  /*
   * plugin
   */
*** b/sound/core/pcm_lib.c      2010-02-15 09:28:05.000000000 +0100
--- a/sound/core/pcm_lib.c      2010-02-19 21:43:43.000000000 +0100
***************
*** 2128,2130 ****
--- 2128,2133 ----
  }

  EXPORT_SYMBOL(snd_pcm_lib_readv);
+ EXPORT_SYMBOL(snd_pcm_tick_prepare);
+ EXPORT_SYMBOL(snd_pcm_update_hw_ptr);
+ EXPORT_SYMBOL(snd_pcm_start);
*** b/sound/core/pcm_native.c   2007-10-09 22:31:38.000000000 +0200
--- a/sound/core/pcm_native.c   2010-02-19 21:46:53.000000000 +0100
***************
*** 1932,1937 ****
--- 1932,1940 ----
        return 0;
  }

+ EXPORT_SYMBOL_GPL(snd_pcm_hw_constraints_init);
+
+
  int snd_pcm_hw_constraints_complete(struct snd_pcm_substream *substream)
  {
        struct snd_pcm_runtime *runtime = substream->runtime;
***************
*** 2008,2013 ****
--- 2011,2018 ----
        return 0;
  }

+ EXPORT_SYMBOL_GPL(snd_pcm_hw_constraints_complete);
+
  static void pcm_release_private(struct snd_pcm_substream *substream)
  {
        snd_pcm_unlink(substream);
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//common.c a/sound/stm//common.c
*** b/sound/stm//common.c	2010-02-15 09:28:07.000000000 +0100
--- a/sound/stm//common.c	2010-02-28 13:31:13.000000000 +0100
***************
*** 180,186 ****
  		return -EINVAL;
  	}
  
! 	snd_stm_printd(0, "Base address is 0x%p.\n", base_address);
  
  	return 0;
  }
--- 180,186 ----
  		return -EINVAL;
  	}
  
! 	snd_stm_printd(0, "Base address is 0x%p.\n", *base_address);
  
  	return 0;
  }
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//pcm_player.c a/sound/stm//pcm_player.c
*** b/sound/stm//pcm_player.c	2010-02-15 09:28:07.000000000 +0100
--- a/sound/stm//pcm_player.c	2010-02-28 13:31:27.000000000 +0100
***************
*** 621,630 ****
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable player interrupts */
  
  	enable_irq(pcm_player->irq);
  	set__AUD_PCMOUT_IT_EN_SET__NSAMPLE__SET(pcm_player);
  	set__AUD_PCMOUT_IT_EN_SET__UNF__SET(pcm_player);
  
  	/* Launch the player */
--- 621,632 ----
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable player interrupts (and clear possible stalled ones) */
  
  	enable_irq(pcm_player->irq);
+ 	set__AUD_PCMOUT_ITS_CLR__NSAMPLE__CLEAR(pcm_player);
  	set__AUD_PCMOUT_IT_EN_SET__NSAMPLE__SET(pcm_player);
+ 	set__AUD_PCMOUT_ITS_CLR__UNF__CLEAR(pcm_player);
  	set__AUD_PCMOUT_IT_EN_SET__UNF__SET(pcm_player);
  
  	/* Launch the player */
***************
*** 991,996 ****
--- 993,1003 ----
  		snd_stm_printd(0, "Player capable of playing %u-channels PCM."
  				"\n", pcm_player->channels_constraint.list[i]);
  
+ 	/* STx7100 has a problem with 16/16 bits FIFO organization,
+ 	 * so we disable the 16 bits samples capability... */
+ 	if (pcm_player->ver <= ver__AUD_PCMOUT__90_1_3)
+ 		snd_stm_pcm_player_hw.formats &= ~SNDRV_PCM_FMTBIT_S16_LE;
+ 
  	/* Create ALSA lowlevel device */
  
  	result = snd_device_new(card, SNDRV_DEV_LOWLEVEL, pcm_player,
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//pcm_reader.c a/sound/stm//pcm_reader.c
*** b/sound/stm//pcm_reader.c	2010-02-15 09:28:07.000000000 +0100
--- a/sound/stm//pcm_reader.c	2010-02-28 13:31:44.000000000 +0100
***************
*** 80,85 ****
--- 80,86 ----
  	int fdma_max_transfer_size;
  	struct stm_dma_params *fdma_params_list;
  	struct stm_dma_req *fdma_request;
+ 	int running;
  
  	snd_stm_magic_field;
  };
***************
*** 135,140 ****
--- 136,144 ----
  	snd_stm_assert(pcm_reader, return);
  	snd_stm_magic_assert(pcm_reader, return);
  
+ 	if (!pcm_reader->running)
+ 		return;
+ 
  	snd_stm_printd(2, "Period elapsed ('%s')\n",
  			pcm_reader->device->bus_id);
  
***************
*** 152,157 ****
--- 156,164 ----
  	snd_stm_assert(pcm_reader, return);
  	snd_stm_magic_assert(pcm_reader, return);
  
+ 	if (!pcm_reader->running)
+ 		return;
+ 
  	snd_stm_printe("Error during FDMA transfer in reader '%s'!\n",
  			pcm_reader->device->bus_id);
  
***************
*** 163,174 ****
  				SNDRV_PCM_INFO_MMAP_VALID |
  				SNDRV_PCM_INFO_INTERLEAVED |
  				SNDRV_PCM_INFO_BLOCK_TRANSFER),
- #if 0
- 	.formats	= (SNDRV_PCM_FMTBIT_S32_LE |
- 				SNDRV_PCM_FMTBIT_S16_LE),
- #else
  	.formats	= (SNDRV_PCM_FMTBIT_S32_LE),
- #endif
  
  	/* Keep in mind that we are working in slave mode, so sampling
  	 * rate is determined by external components... */
--- 170,176 ----
***************
*** 380,389 ****
  		set__AUD_PCMIN_FMT__DMA_REQ_TRIG_LMT(pcm_reader, transfer_size);
  		set__AUD_PCMIN_FMT__BACK_STALLING__DISABLED(pcm_reader);
  
! 		/* This is a workaround for a problem with PCM Reader
! 		 * FIFO underrunning (!!!), caused by FDMA issuing
! 		 * more than one read per request line assertion... */
! 		if (transfer_size > 2)
  			fdma_req_config.count = transfer_size / 2;
  		else
  			fdma_req_config.count = transfer_size;
--- 382,392 ----
  		set__AUD_PCMIN_FMT__DMA_REQ_TRIG_LMT(pcm_reader, transfer_size);
  		set__AUD_PCMIN_FMT__BACK_STALLING__DISABLED(pcm_reader);
  
! 		/* This is a workaround for a problem in early releases
! 		 * of multi-channel PCM Readers with FIFO underrunning (!!!),
! 		 * caused by spurious request line generation... */
! 		if (pcm_reader->ver < ver__AUD_PCMIN__65_3_4 &&
! 				transfer_size > 2)
  			fdma_req_config.count = transfer_size / 2;
  		else
  			fdma_req_config.count = transfer_size;
***************
*** 548,568 ****
  	/* Configure data memory format */
  
  	switch (runtime->format) {
- 	case SNDRV_PCM_FORMAT_S16_LE:
- 		set__AUD_PCMIN_CTRL__MEM_FMT__16_BITS_16_BITS(pcm_reader);
- 
- 		/* Workaround for a problem with L/R channels swap in case of
- 		 * 16/16 memory model: PCM puts left channel data in
- 		 * word's upper two bytes, but due to little endianess
- 		 * character of our memory it will be interpreted as right
- 		 * channel data...  The workaround is to invert L/R signal,
- 		 * however it is cheating, because in such case channel
- 		 * phases are shifted by one sample...
- 		 * (ask me for more details if above is not clear ;-)
- 		 * TODO this somehow better... */
- 		set__AUD_PCMIN_FMT__LR_POL(pcm_reader, !lr_pol);
- 		break;
- 
  	case SNDRV_PCM_FORMAT_S32_LE:
  		/* Actually "16 bits/0 bits" means "24/20/18/16 bits on the
  		 * left than zeros"... ;-) */
--- 551,556 ----
***************
*** 619,627 ****
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable required reader interrupts */
  
  	enable_irq(pcm_reader->irq);
  	set__AUD_PCMIN_IT_EN_SET__OVF__SET(pcm_reader);
  
  	/* Launch the reader */
--- 607,616 ----
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable required reader interrupt (and clear possible stalled) */
  
  	enable_irq(pcm_reader->irq);
+ 	set__AUD_PCMIN_ITS_CLR__OVF__CLEAR(pcm_reader);
  	set__AUD_PCMIN_IT_EN_SET__OVF__SET(pcm_reader);
  
  	/* Launch the reader */
***************
*** 636,641 ****
--- 625,632 ----
  		snd_stm_conv_unmute(pcm_reader->conv_group);
  	}
  
+ 	pcm_reader->running = 1;
+ 
  	return 0;
  }
  
***************
*** 650,655 ****
--- 641,648 ----
  	snd_stm_assert(pcm_reader, return -EINVAL);
  	snd_stm_magic_assert(pcm_reader, return -EINVAL);
  
+ 	pcm_reader->running = 0;
+ 
  	/* Mute & shutdown DAC */
  
  	if (pcm_reader->conv_group) {
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//reg_audcfg_fsyn.h a/sound/stm//reg_audcfg_fsyn.h
*** b/sound/stm//reg_audcfg_fsyn.h	2010-02-15 09:28:08.000000000 +0100
--- a/sound/stm//reg_audcfg_fsyn.h	2010-02-28 13:32:10.000000000 +0100
***************
*** 276,282 ****
  
  #define shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
  	ver__AUDCFG_FSYN__65_2_1_2 ? 23 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
! 	? 24 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 22 : 24)))
  #define mask__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
  	ver__AUDCFG_FSYN__65_2_1_2 ? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
  	? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 0x3 : 0x1)))
--- 276,282 ----
  
  #define shift__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
  	ver__AUDCFG_FSYN__65_2_1_2 ? 23 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
! 	? 24 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 23 : 24)))
  #define mask__AUDCFG_FSYN_CFG__REF_CLK_IN(ip) (ip->ver < \
  	ver__AUDCFG_FSYN__65_2_1_2 ? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_1 \
  	? 0x1 : (ip->ver < ver__AUDCFG_FSYN__65_3_3 ? 0x3 : 0x1)))
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//reg_aud_pcmin.h a/sound/stm//reg_aud_pcmin.h
*** b/sound/stm//reg_aud_pcmin.h	2010-02-15 09:28:06.000000000 +0100
--- a/sound/stm//reg_aud_pcmin.h	2010-02-28 13:32:38.000000000 +0100
***************
*** 20,25 ****
--- 20,28 ----
  /* 7200 2.0 */
  #define ver__AUD_PCMIN__65_3_3 5
  
+ /* 7200 3.0 */
+ #define ver__AUD_PCMIN__65_3_4 6
+ 
  
  
  /*
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//spdif_player.c a/sound/stm//spdif_player.c
*** b/sound/stm//spdif_player.c	2010-02-15 09:28:07.000000000 +0100
--- a/sound/stm//spdif_player.c	2010-02-28 13:32:53.000000000 +0100
***************
*** 638,647 ****
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable player interrupts */
  
  	enable_irq(spdif_player->irq);
  	set__AUD_SPDIF_IT_EN_SET__NSAMPLE__SET(spdif_player);
  	set__AUD_SPDIF_IT_EN_SET__UNF__SET(spdif_player);
  
  	/* Launch the player */
--- 638,649 ----
  			DMA_CHANNEL_STATUS_RUNNING)
  		udelay(5);
  
! 	/* Enable player interrupts (and clear possible stalled ones) */
  
  	enable_irq(spdif_player->irq);
+ 	set__AUD_SPDIF_ITS_CLR__NSAMPLE__CLEAR(spdif_player);
  	set__AUD_SPDIF_IT_EN_SET__NSAMPLE__SET(spdif_player);
+ 	set__AUD_SPDIF_ITS_CLR__UNF__CLEAR(spdif_player);
  	set__AUD_SPDIF_IT_EN_SET__UNF__SET(spdif_player);
  
  	/* Launch the player */
diff -x '*.cmd' -x '*.o' -rcN b/sound/stm//stx7111.c a/sound/stm//stx7111.c
*** b/sound/stm//stx7111.c	2010-02-15 09:28:06.000000000 +0100
--- a/sound/stm//stx7111.c	2010-02-28 13:33:16.000000000 +0100
***************
*** 516,526 ****
  		goto error_soc_type;
  	}
  
- 	/* Cut 2.0 presumably will bring something new into the
- 	 * matter, so above configuration must be checked!
- 	 * - transfer_sizes (FIFO sizes has changed) */
- 	WARN_ON(cpu_data->cut_major > 1);
- 
  	/* Ugly but quick hack to have SPDIF player & I2S to SPDIF
  	 * converters enabled without loading STMFB...
  	 * TODO: do this in some sane way! */
--- 516,521 ----
  		goto error_soc_type;
  	}
  
  	/* Ugly but quick hack to have SPDIF player & I2S to SPDIF
  	 * converters enabled without loading STMFB...
  	 * TODO: do this in some sane way! */
