*** linux/drivers/net/stmmac.c	2009-02-10 00:22:56.000000000 +0100
--- UFS922_Orig/stmmac.c	2009-02-11 09:21:08.000000000 +0100
***************
*** 705,723 ****
  	return;
  }
  
  /**
   * get_mac_addr
   * @ioaddr: device I/O address
   * @addr: mac address
   * Description: the function gets the hardware MAC address
   */
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr)
  {
  	unsigned int hi_addr, lo_addr;
  
  	/* Read the MAC address from the hardware */
! 	hi_addr = (unsigned int)readl(ioaddr + MAC_ADDR_HIGH);
! 	lo_addr = (unsigned int)readl(ioaddr + MAC_ADDR_LOW);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
--- 705,890 ----
  	return;
  }
  
+ /*added by doliyu*/
+ #define CFG_FLASH_BASE		0xA0000000
+ #define	CFG_ENV_IS_IN_FLASH	1 
+ #define CFG_ENV_OFFSET          0x20000
+ #define CFG_ENV_ADDR            (CFG_FLASH_BASE + CFG_ENV_OFFSET)
+ #define CFG_ENV_SIZE            0x10000
+ #define CFG_ENV_SECT_SIZE       0x20000
+ 
+ #define CFG_ENV_IN_EEPROM
+ 
+ #ifdef CFG_ENV_IN_EEPROM
+ extern char saved_command_line[];
+ #endif
+ #ifndef CFG_ENV_IN_EEPROM
+ unsigned long env_addr = CFG_ENV_ADDR ;
+ #else
+ unsigned long env_addr = saved_command_line ;
+ #endif
+ unsigned char env_get_char_memory (int index)
+ {
+ 		return ( *((unsigned char *)(env_addr + index)) );
+ }
+ 
+ static int
+ envmatch (unsigned char *s1, int i2)
+ {
+ 
+ 	while (*s1 == env_get_char_memory(i2++))
+ 		if (*s1++ == '=')
+ 			return(i2);
+ 	if (*s1 == '\0' && env_get_char_memory(i2-1) == '=')
+ 		return(i2);
+ 	return(-1);
+ }
+ 
+ unsigned char *env_get_addr (int index)
+ {
+ 	return ( ((unsigned char *)(env_addr + index)) );
+ }
+ 
+ char *getenv (unsigned char *name)
+ {
+ 	int i, nxt;
+ 
+ 
+ 	for (i=0; env_get_char_memory(i) != '\0'; i=nxt+1) {
+ 		int val;
+ 
+ 		for (nxt=i; env_get_char_memory(nxt) != '\0'; ++nxt) {
+ 			if (nxt >= CFG_ENV_SIZE) {
+ 				return (NULL);
+ 			}
+ 		}
+ 		if ((val=envmatch(name, i)) < 0)
+ 			continue;
+ 		return (env_get_addr(val));
+ 	}
+ 
+ 	return (NULL);
+ }
+ int getenv_r (unsigned char *name, unsigned char *buf, unsigned len)
+ {
+ 	int i, nxt;
+ 
+ 	for (i=0; env_get_char_memory(i) != '\0'; i=nxt+1) {
+ 		int val, n;
+ 
+ 		for (nxt=i; env_get_char_memory(nxt) != '\0'; ++nxt) {
+ 			if (nxt >= CFG_ENV_SIZE) {
+ 				return (-1);
+ 			}
+ 		}
+ 		if ((val=envmatch(name, i)) < 0)
+ 			continue;
+ 		/* found; copy out */
+ 		n = 0;
+ 		while ((len > n++) && (*buf++ = env_get_char_memory(val++)) != '\0')
+ 			;
+ 		if (len == n)
+ 			*buf = '\0';
+ 		return (n);
+ 	}
+ 	return (-1);
+ }
+ 
+ 
+ #include <linux/ctype.h>
+ 
+ static unsigned long simple_strtoul2(const char *cp,char **endp,unsigned int base)
+ {
+ 	unsigned long result = 0,value;
+ 
+ 	if (*cp == '0') {
+ 		cp++;
+ 		if ((*cp == 'x') && isxdigit(cp[1])) {
+ 			base = 16;
+ 			cp++;
+ 		}
+ 		if (!base) {
+ 			base = 8;
+ 		}
+ 	}
+ 	if (!base) {
+ 		base = 10;
+ 	}
+ 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
+ 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
+ 		result = result*base + value;
+ 		cp++;
+ 	}
+ 	if (endp)
+ 		*endp = (char *)cp;
+ 	return result;
+ }
+ 
+ 
+ 
+ void get_env_address_from_flash()
+ {
+ 
+  //   printk("mac hi address = %x, lowaddress = %x\n", mac_addr_hi16, mac_addr_lo32);
+     
+ }
+ 
  /**
   * get_mac_addr
   * @ioaddr: device I/O address
   * @addr: mac address
   * Description: the function gets the hardware MAC address
   */
+  #ifdef CFG_ENV_IN_EEPROM
+ char g_env_mac[]="00:50:FD:00:00:00";
+ #endif
+ 
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr)
  {
  	unsigned int hi_addr, lo_addr;
  
+     int env_size,reg,env_present=0, tmp_count;
+     char *s = NULL, *e,  es[] = "00:00:00:00:00:00";
+     unsigned char s_env_mac[64], v_env_mac[6];
+ 
+ #ifndef CFG_ENV_IN_EEPROM    
+ 	env_size = getenv_r ("ethaddr", s_env_mac, sizeof (s_env_mac));
+ 	if ((env_size > 0) && (env_size < sizeof (es))) {	/* exit if env is bad */
+ 		printk ("\n*** ERROR: ethaddr is not set properly!!\n");
+ 		return;
+ 	}
+ 
+ 	
+ #else
+ 	env_size = 17;
+ 	memcpy(s_env_mac, g_env_mac, 17);
+ #endif
+ 	if (env_size > 0) {
+ 			env_present = 1;
+ 			s = s_env_mac;
+ 		}
+ 
+ 	//by doliyu ...patch for mac address write error!
+ 	for(tmp_count =0 ; tmp_count < 17; tmp_count++)
+ 	{
+ 		if(s_env_mac[tmp_count] == ' ')
+ 			s_env_mac[tmp_count]='0';
+ 		printk("s_env_mac[%d] = %c\n", tmp_count, s_env_mac[tmp_count]);
+ 	}
+ 	
+ 	for (reg = 0; reg < 6; ++reg) { /* turn string into mac value */
+ 		v_env_mac[reg] = s ? simple_strtoul2 (s, &e, 16) : 0;
+ 		if (s)
+ 			s = (*e) ? e + 1 : e;
+ 	}
+ 
+     printk("get ether addr = %x, %x, %x, %x, %x, %x \n", v_env_mac[0],v_env_mac[1],v_env_mac[2],v_env_mac[3],v_env_mac[4],v_env_mac[5]);
+     hi_addr = (int)(v_env_mac[5]) <<8 | (int)(v_env_mac[4]);
+     lo_addr = (int)(v_env_mac[3]) << 24 | (int)(v_env_mac[2]) << 16 | (int)(v_env_mac[1]) <<8 | v_env_mac[0];
+ 
  	/* Read the MAC address from the hardware */
! //	hi_addr = (unsigned int)readl(ioaddr + MAC_ADDR_HIGH);
! //	lo_addr = (unsigned int)readl(ioaddr + MAC_ADDR_LOW);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
***************
*** 727,732 ****
--- 894,908 ----
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
  
+ 
+ //	addr[0] = s_env_mac[0];
+ //	addr[1] = s_env_mac[1];
+ //	addr[2] = s_env_mac[2];
+ //	addr[3] = s_env_mac[3];
+ //	addr[4] = s_env_mac[4];
+ //	addr[5] = s_env_mac[5];
+ 
+ 
  	return;
  }
  
***************
*** 2813,2818 ****
--- 2989,2999 ----
  		} else if (!strncmp(opt, "ttc:", 4)) {
  			ttc = simple_strtoul(opt + 4, NULL, 0);
  		}
+ #ifdef CFG_ENV_IN_EEPROM
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
+ #endif
  	}
  	return (0);
  }
