*** linux-sh4-2.6.23.17_stm23_0119_orig/arch/sh/boards/st/mb442/setup.c	Wed Feb 24 02:22:12 2010
--- linux-sh4/arch/sh/boards/st/mb442/setup.c	Thu Feb 25 01:06:21 2010
***************
*** 19,36 ****
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
  #include <asm/irl.h>
  
! static int ascs[2] __initdata = { 2, 3 };
  
  void __init mb442_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7100 Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 19,59 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
  #include <asm/irl.h>
  
! static int ascs[2] __initdata = { 2 };
! 
! const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
! const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
! 
! static struct bpa2_partition_desc bpa2_parts_table[] = {
! 	{
! 		.name  = "LMI_VID",
! 		.start = 0x10800000,
! 		.size  = 0x03800000,
! 		.flags = 0,
! 		.aka   = LMI_VID_partalias
! 	},
! 	{
! 		.name  = "LMI_SYS",
! 		.start = 0,
! 		.size  = 0x01600000,
! 		.flags = 0,
! 		.aka   = LMI_SYS_partalias
! 	}
! };
! 
  
  void __init mb442_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7100 Reference board initialisation\n");
  
  	stx7100_early_device_init();
!  	stb7100_configure_asc(ascs, 1, 0);
!  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
***************
*** 40,46 ****
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
--- 63,69 ----
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
***************
*** 113,124 ****
--- 136,150 ----
  
  static int mb442_phy_reset(void* bus)
  {
+    if (phy_reset_pin != NULL)
+    {
  	stpio_set_pin(phy_reset_pin, 1);
  	udelay(1);
  	stpio_set_pin(phy_reset_pin, 0);
  	udelay(1);
  	stpio_set_pin(phy_reset_pin, 1);
  
+    }
  	return 1;
  }
  
***************
*** 167,173 ****
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
! 	stx7100_configure_pwm(&pwm_private_info);
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
  	stx7100_configure_lirc(&lirc_scd);
--- 193,199 ----
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
! 	//stx7100_configure_pwm(&pwm_private_info);
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
  	stx7100_configure_lirc(&lirc_scd);
***************
*** 175,191 ****
  
  	vpp_pio = stpio_request_set_pin(2, 7, "flash_VPP", STPIO_OUT, 0);
  
! 	phy_reset_pin = stpio_request_set_pin(2, 4, "ste100p_reset",
  					      STPIO_OUT, 1);
- 	stx7100_configure_ethernet(0, 0, 0);
  
! 	/* Reset the SMSC 91C111 Ethernet chip */
! 	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
! 					     STPIO_OUT, 0);
! 	udelay(1);
! 	stpio_set_pin(smc91x_reset, 1);
! 	udelay(1);
! 	stpio_set_pin(smc91x_reset, 0);
  
  	return platform_add_devices(mb442_devices,
  				    ARRAY_SIZE(mb442_devices));
--- 201,210 ----
  
  	vpp_pio = stpio_request_set_pin(2, 7, "flash_VPP", STPIO_OUT, 0);
  
! 	phy_reset_pin = stpio_request_set_pin(3, 6, "ste100p_reset",
  					      STPIO_OUT, 1);
  
! 	stx7100_configure_ethernet(0, 0, 0);
  
  	return platform_add_devices(mb442_devices,
  				    ARRAY_SIZE(mb442_devices));
*** linux-sh4-2.6.23.17_stm23_0119_orig/arch/sh/kernel/cpu/sh4/setup-stb7100.c	Wed Feb 24 02:22:13 2010
--- linux-sh4/arch/sh/kernel/cpu/sh4/setup-stb7100.c	Thu Feb 25 01:06:20 2010
***************
*** 292,299 ****
  static char i2c_st[] = "i2c_st";
  static char spi_st[] = "spi_st_ssc";
  static struct platform_device stssc_devices[] = {
! 	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 2),
! 	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 2),
  	STSSC_DEVICE(0x18042000, 117, 4, 0, 1, 0xff),
  };
  
--- 292,299 ----
  static char i2c_st[] = "i2c_st";
  static char spi_st[] = "spi_st_ssc";
  static struct platform_device stssc_devices[] = {
! 	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 0xff),
! 	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 0xff),
  	STSSC_DEVICE(0x18042000, 117, 4, 0, 1, 0xff),
  };
  
***************
*** 600,623 ****
  		.dir  = STPIO_IN,
                  .pinof= 0x00 | LIRC_IR_RX | LIRC_PIO_ON
  	},
- 	[1] = {
- 		.bank = 3,
- 		.pin  = 4,
- 		.dir  = STPIO_IN,
-                 .pinof= 0x00 | LIRC_UHF_RX | LIRC_PIO_ON
- 	},
- 	[2] = {
- 		.bank = 3,
- 		.pin  = 5,
- 		.dir  = STPIO_ALT_OUT,
-                 .pinof= 0x00 | LIRC_IR_TX /* | LIRC_PIO_ON not available */
- 	},
- 	[3] = {
- 		.bank = 3,
- 		.pin  = 6,
- 		.dir  = STPIO_ALT_OUT,
-                 .pinof= 0x00 | LIRC_IR_TX /* | LIRC_PIO_ON not available */
- 	}
  };
  
  static struct plat_lirc_data lirc_private_info = {
--- 600,605 ----
*** linux-sh4-2.6.23.17_stm23_0119_orig/drivers/net/stmmac/stmmac_main.c	Wed Feb 24 02:22:13 2010
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	Thu Feb 25 01:34:13 2010
***************
*** 388,400 ****
  	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
  	addr[1] = (lo_addr >> 8) & 0xff;
  	addr[2] = (lo_addr >> 16) & 0xff;
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! 
  	return;
  }
  
--- 388,408 ----
  	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
+ #if 1
+ 	addr[0] = 0;
+ 	addr[1] = 0;
+ 	addr[2] = 0;
+ 	addr[3] = 0;
+ 	addr[4] = 0;
+ 	addr[5] = 0;
+ #else
  	addr[0] = lo_addr & 0xff;
  	addr[1] = (lo_addr >> 8) & 0xff;
  	addr[2] = (lo_addr >> 16) & 0xff;
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! #endif
  	return;
  }
  
***************
*** 1868,1875 ****
  			priv->mac_type->hw.addr_low);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");
  	}
  
  	if ((ret = register_netdev(dev))) {
--- 1876,1883 ----
  			priv->mac_type->hw.addr_low);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		/*printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");*/
  	}
  
  	if ((ret = register_netdev(dev))) {
*** linux-sh4-2.6.23.17_stm23_0119_orig/drivers/usb/storage/usb.c	Sun Mar 14 03:16:37 2010
--- linux-sh4/drivers/usb/storage/usb.c	Sun Mar 14 02:35:09 2010
***************
*** 107,113 ****
  MODULE_DESCRIPTION("USB Mass Storage driver for Linux");
  MODULE_LICENSE("GPL");
  
! static unsigned int delay_use = 5;
  module_param(delay_use, uint, S_IRUGO | S_IWUSR);
  MODULE_PARM_DESC(delay_use, "seconds to delay before using a new device");
  
--- 107,113 ----
  MODULE_DESCRIPTION("USB Mass Storage driver for Linux");
  MODULE_LICENSE("GPL");
  
! static unsigned int delay_use = 0;
  module_param(delay_use, uint, S_IRUGO | S_IWUSR);
  MODULE_PARM_DESC(delay_use, "seconds to delay before using a new device");
  
*** linux-sh4-2.6.23.17_stm23_0119_orig/drivers/net/stmmac/stmmac_mdio.c	Thu Apr  1 19:18:51 2010
--- linux-sh4-2.6.23.17_stm23_0119/drivers/net/stmmac/stmmac_mdio.c	Tue Mar 23 23:32:05 2010
***************
*** 174,180 ****
  	for (addr = 0; addr < 32; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
! 			if (priv->phy_addr == -1) {
  				priv->phy_addr = addr;
  				phydev->irq = priv->phy_irq;
  				irqlist[addr] = priv->phy_irq;
--- 174,180 ----
  	for (addr = 0; addr < 32; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
! 			/*if (priv->phy_addr == -1)*/ {
  				priv->phy_addr = addr;
  				phydev->irq = priv->phy_irq;
  				irqlist[addr] = priv->phy_irq;
