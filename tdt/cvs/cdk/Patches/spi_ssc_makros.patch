sh_stm: Use new SSC macros in SPI driver

Change STM SPI driver to use new SSC macros which do
32 bit accesses to registers rather than 16.
This is required for later chips and allows fixes from 2.3
to be more easily back-ported to 2.2

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
Signed-off-by: Carl Shaw <carl.shaw@st.com>

Index: linux/drivers/spi/spi_stm_ssc.c
===================================================================
--- linux.orig/drivers/spi/spi_stm_ssc.c	2008-07-22 09:44:08.000000000 +0100
+++ linux/drivers/spi/spi_stm_ssc.c	2008-07-22 09:44:26.000000000 +0100
@@ -138,10 +138,10 @@
 	if (sscbrg == (0x1 << 16)) /* 16-bit counter wraps */
 		sscbrg = 0x0;
 	dgb_print("setting baudrate: hz = %d, sscbrg = %d\n", hz, sscbrg);
-	ssc_store16(st_ssc, SSC_BRG, sscbrg);
+	ssc_store32(st_ssc, SSC_BRG, sscbrg);
 
 	 /* Set SSC_CTL and enable SSC */
-	 reg = ssc_load16(st_ssc, SSC_CTL);
+	 reg = ssc_load32(st_ssc, SSC_CTL);
 	 reg |= SSC_CTL_MS;
 
 	 if (spi->mode & SPI_CPOL)
@@ -171,10 +171,10 @@
 	 reg |= SSC_CTL_EN;
 
 	 dgb_print("ssc_ctl = 0x%04x\n", reg);
-	 ssc_store16(st_ssc, SSC_CTL, reg);
+	 ssc_store32(st_ssc, SSC_CTL, reg);
 
 	 /* Clear the status register */
-	 ssc_load16(st_ssc, SSC_RBUF);
+	 ssc_load32(st_ssc, SSC_RBUF);
 
 	 return 0;
 }
@@ -257,7 +257,7 @@
 
 			st_ssc->tx_bytes_pending--;
 		}
-		ssc_store16(st_ssc, SSC_TBUF, tmp.word);
+		ssc_store32(st_ssc, SSC_TBUF, tmp.word);
 	}
 }
 
@@ -280,9 +280,9 @@
 	ndelay(word_period_ns);
 
 	/* Check 'last' word is actually there! */
-	rx_fifo_status = ssc_load16(st_ssc, SSC_RX_FSTAT);
+	rx_fifo_status = ssc_load32(st_ssc, SSC_RX_FSTAT);
 	if (rx_fifo_status == 1) {
-		tmp.word = ssc_load16(st_ssc, SSC_RBUF);
+		tmp.word = ssc_load32(st_ssc, SSC_RBUF);
 		if (st_ssc->rx_ptr) {
 			if (st_ssc->bits_per_word > 8) {
 				*st_ssc->rx_ptr++ = tmp.bytes[1];
@@ -322,7 +322,7 @@
 	spi_stmssc_fill_tx_fifo(st_ssc);
 
 	/* enable TX_FIFO_EMPTY interrupts */
-	ssc_store16(st_ssc, SSC_IEN, SSC_IEN_TIEN);
+	ssc_store32(st_ssc, SSC_IEN, SSC_IEN_TIEN);
 
 	/* wait for all bytes to be transmitted*/
 	wait_for_completion(&st_ssc->done);
@@ -332,7 +332,7 @@
 		spi_stmssc_rx_mopup(st_ssc);
 
 	/* disable ints */
-	ssc_store16(st_ssc, SSC_IEN, 0x0);
+	ssc_store32(st_ssc, SSC_IEN, 0x0);
 
 	return t->len - st_ssc->tx_bytes_pending;
 }
@@ -349,7 +349,7 @@
 	} tmp = {.word = 0,};
 
 
-	ssc_status = ssc_load16(st_ssc, SSC_STA);
+	ssc_status = ssc_load32(st_ssc, SSC_STA);
 
 	/* FIFO_TX_EMPTY */
 	if (ssc_status & SSC_STA_TIR) {
@@ -357,10 +357,10 @@
 		   else SSC_RX_FSTAT (0-7)
 		*/
 		rx_fifo_status = (ssc_status & SSC_STA_RIR) ? 8 :
-			ssc_load16(st_ssc, SSC_RX_FSTAT);
+			ssc_load32(st_ssc, SSC_RX_FSTAT);
 		/* Read all available words from RX_FIFO */
 		while (rx_fifo_status) {
-			tmp.word = ssc_load16(st_ssc, SSC_RBUF);
+			tmp.word = ssc_load32(st_ssc, SSC_RBUF);
 
 			if (st_ssc->rx_ptr) {
 				if (st_ssc->bits_per_word > 8) {
@@ -373,7 +373,7 @@
 				}
 			}
 
-			rx_fifo_status = ssc_load16(st_ssc, SSC_RX_FSTAT);
+			rx_fifo_status = ssc_load32(st_ssc, SSC_RX_FSTAT);
 		}
 
 		/* See if there is more data to send */
@@ -381,7 +381,7 @@
 			spi_stmssc_fill_tx_fifo(st_ssc);
 		else {
 			/* No more data to send */
-			ssc_store16(st_ssc, SSC_IEN, 0x0);
+			ssc_store32(st_ssc, SSC_IEN, 0x0);
 			complete(&st_ssc->done);
 		}
 	}
@@ -417,15 +417,15 @@
 	st_ssc->fcomms = ssc_get_clock();
 
 	/* Disable I2C and Reset SSC */
-	ssc_store16(st_ssc, SSC_I2C, 0x0);
-	reg = ssc_load16(st_ssc, SSC_CTL);
+	ssc_store32(st_ssc, SSC_I2C, 0x0);
+	reg = ssc_load32(st_ssc, SSC_CTL);
 	reg |= SSC_CTL_SR;
-	ssc_store16(st_ssc, SSC_CTL, reg);
+	ssc_store32(st_ssc, SSC_CTL, reg);
 
 	udelay(1);
-	reg = ssc_load16(st_ssc, SSC_CTL);
+	reg = ssc_load32(st_ssc, SSC_CTL);
 	reg &= ~SSC_CTL_SR;
-	ssc_store16(st_ssc, SSC_CTL, reg);
+	ssc_store32(st_ssc, SSC_CTL, reg);
 
 	/* Start bitbang worker */
 	if (spi_bitbang_start(&st_ssc->bitbang)) {
