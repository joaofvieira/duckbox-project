diff -ur --exclude=.svn --exclude=.git --exclude=tuxtxt neutrino-hd2.org/data/icons/Makefile.am neutrino-hd2/data/icons/Makefile.am
--- neutrino-hd2.org/data/icons/Makefile.am	2012-07-09 17:19:06.404767207 +0200
+++ neutrino-hd2/data/icons/Makefile.am	2012-07-09 21:12:24.600624910 +0200
@@ -44,6 +44,7 @@
 	nds_green.png nds_yellow.png \
 	powervu_green.png powervu_yellow.png \
 	seca_green.png seca_yellow.png \
+	bc_green.png bc_yellow.png \
 	via_green.png via_yellow.png
 
 
diff -ur --exclude=.svn --exclude=.git --exclude=tuxtxt neutrino-hd2.org/src/gui/infoviewer.cpp neutrino-hd2/src/gui/infoviewer.cpp
--- neutrino-hd2.org/src/gui/infoviewer.cpp	2012-07-09 17:19:01.692771182 +0200
+++ neutrino-hd2/src/gui/infoviewer.cpp	2012-07-09 18:02:29.336266354 +0200
@@ -1293,6 +1293,7 @@
 			break;
 			
 		case 1088:
+		case 1080:
 			icon_name = NEUTRINO_ICON_RESOLUTION_1080;
 			break;
 			
@@ -1355,6 +1356,7 @@
 		case 1440:
 		case 1280:
 		case 1088:
+		case 1080:
 		case 720:
 			icon_name_res = NEUTRINO_ICON_RESOLUTION_HD;
 			//test
@@ -2253,118 +2255,127 @@
 #define ICON_Y_2 (16 + 2 + ICON_H)
 #define MAX_EW 146
 
-void CInfoViewer::paint_ca_icons(int caid, char * icon)
+void CInfoViewer::paint_ca_icons(int caid, char * icon, int i)
 {
-	int py = BoxEndY - InfoHeightY_Info;
-	char buf[20];
-	int endx = BoxEndX -3;
-	int px = 0;
-	
-	/*get icon size */
-	int icon_w = 32;
-	int icon_h = 16;
-		
-	frameBuffer->getIconSize("nds", &icon_w, &icon_h);
+    char buf[20];
+    int endx = BoxEndX - 3;
+    int py = BoxEndY - InfoHeightY_Info;
+    int px = 0;
+    static int icon_space_offset = 1;
+
+    /*get icon size */
+    int icon_w = 32;
+    int icon_h = 16;
+
+    frameBuffer->getIconSize("nds_green", &icon_w, &icon_h);
+
+    px = endx - i*(icon_w + icon_space_offset);
+    switch ( caid & 0xFF00 )
+    {
+    case 0x0E00:
+        sprintf(buf, "%s_%s", "powervu", icon);
+        break;
+    case 0x4A00:
+        sprintf(buf, "%s_%s", "d", icon);
+        break;
+    case 0x2600:
+        sprintf(buf, "%s_%s", "biss", icon);
+        break;
+    case 0x1700:
+        sprintf(buf, "%s_%s", "bc", icon);
+        break;
+    case 0x600:
+    case 0x602:
+        sprintf(buf, "%s_%s", "ird", icon);
+        break;
+    case 0x100:
+        sprintf(buf, "%s_%s", "seca", icon);
+        break;
+    case 0x500:
+        sprintf(buf, "%s_%s", "via", icon);
+        break;
+    case 0x1800:
+    case 0x1801:
+        sprintf(buf, "%s_%s", "nagra", icon);
+        break;
+    case 0xB00:
+        sprintf(buf, "%s_%s", "conax", icon);
+        break;
+    case 0xD00:
+        sprintf(buf, "%s_%s", "cw", icon);
+        break;
+    case 0x900:
+        sprintf(buf, "%s_%s", "nds", icon);
+        break;
+    default:
+        break;
+    }
+    if (px)
+    {
+        frameBuffer->paintIcon(buf, px, py );
 
-	switch ( caid & 0xFF00 ) 
-	{
-		case 0x0E00: 
-			px = endx - 11*icon_w; 
-			sprintf(buf, "%s_%s", "powervu", icon);
-			break;
-		case 0x4A00: 
-			px = endx - 10*icon_w; 
-			sprintf(buf, "%s_%s", "d", icon);
-			break;
-		case 0x2600: 
-			px = endx - 9*icon_w; 
-			sprintf(buf, "%s_%s", "biss", icon);
-			break;
-		case 0x0600: 
-		case 0x0602:
-			px = endx - 8*icon_w; 
-			sprintf(buf, "%s_%s", "ird", icon);
-			break;
-		case 0x1700: 
-			px = endx - 7*icon_w; 
-			sprintf(buf, "%s_%s", "nagra", icon);
-			break;
-		case 0x0100: 
-			px = endx - 6*icon_w; 
-			sprintf(buf, "%s_%s", "seca", icon);
-			break;
-		case 0x0500: 
-			px = endx - 5*icon_w; 
-			sprintf(buf, "%s_%s", "via", icon);
-			break;
-		case 0x1800: 
-		case 0x1801: 
-			px = endx - 4*icon_w; 
-			sprintf(buf, "%s_%s", "nagra", icon);
-			break;
-		case 0x0B00: 
-			px = endx - 3*icon_w ; 
-			sprintf(buf, "%s_%s", "conax", icon);
-			break;
-		case 0x0D00: 
-			px = endx - 2*icon_w; 
-			sprintf(buf, "%s_%s", "cw", icon);
-			break;
-			
-		case 0x0900: 
-			px = endx - icon_w; 
-			sprintf(buf, "%s_%s", "nds", icon);
-			break;
-		default: 
-			break;
-        }//case
-
-	if(px) 
-	{
-		frameBuffer->paintIcon(buf, px, py ); 
-	}
+    }
 }
 
+static char * green = (char *) "green";
+static char * yellow = (char *) "yellow";
 extern int pmt_caids[11];
 
-void CInfoViewer::showIcon_CA_Status(int notfirst)
+void CInfoViewer::showIcon_CA_Status (int notfirst)
 {
-	int i;
-	int caids[] = { 0x0600, 0x1700, 0x0100, 0x0500, 0x1800, 0x0B00, 0x0D00, 0x0900, 0x2600, 0x4a00, 0x0E00 };
-	
-	static char * green = (char *) "green";
-	static char * yellow = (char *) "yellow";
-	//static int icon_space_offset = 0;
-		
-	if(!notfirst) 
-	{
-		// full crypt
-		if(g_settings.show_ca)
-		{
-			for(i=0; i < (int)(sizeof(caids)/sizeof(int)); i++) 
-			{
-				paint_ca_icons(caids[i], (char *) (pmt_caids[i] ? yellow : green)); // full cryptanzeige
-			}
-		}
-		else
-		{
-			bool fta = true;
-			
-			for(i=0; i < (int)(sizeof(caids)/sizeof(int)); i++) 
-			{
-				if (pmt_caids[i]) 
-				{
-					fta = false;
-					break;
-				}
-			}
-			
-			frameBuffer->paintIcon( fta ? "ca2_gray" : "ca2", BoxEndX - (2*ICON_LARGE_WIDTH + 2*ICON_SMALL_WIDTH + 4*2) - 85, BoxEndY - ICON_Y_1);
-			return;
-		}
-	}
+    FILE *f;
+    char input[256];
+    char *buf;
+    int i = 0;
+    int acaid = 0;
+    int caids[] = { 0x0600, 0x1700, 0x0100, 0x0500, 0x1800, 0x0B00, 0x0D00, 0x0900, 0x2600, 0x4a00, 0x0E00 };
+    if (!notfirst)
+    {
+        CZapitChannel * cc = CNeutrinoApp::getInstance()->channelList->getChannel(CNeutrinoApp::getInstance()->channelList->getActiveChannelNumber());
+     		if (g_settings.show_ca)
+        {
+        f = fopen("/tmp/ecm.info", "rt");
+        if (f != NULL)
+        {
+            buf = (char*) malloc(50);
+            if (buf)
+            {
+                if (fgets(buf, 50, f) != NULL)
+                {
+                    while (buf[i] != '0')
+                        i++;
+                    sscanf(&buf[i], "%X", &acaid);
+                }
+                free(buf);
+            }
+            fclose(f);
+        }
+
+        int j = 1;
+        for (i=0; i < (int)(sizeof(caids)/sizeof(int)); i++)
+        {
+            if ((caids[i] & 0xFF00) == (acaid & 0xFF00))
+            {
+                paint_ca_icons(caids[i], green, j);
+                j++;
+            }
+            else if (pmt_caids[i])
+            {
+                paint_ca_icons(caids[i], yellow, j);
+                j++;
+            }
+        }
+        CVFD::getInstance()->ShowIcon(VFD_ICON_LOCK,cc->scrambled);
+        }
+        else
+        {
+        CVFD::getInstance()->ShowIcon(VFD_ICON_LOCK,cc->scrambled);
+        frameBuffer->paintIcon( cc->scrambled ? "ca2" : "ca2_gray", BoxEndX - (2*ICON_LARGE_WIDTH + 2*ICON_SMALL_WIDTH + 4*2) - 85, BoxEndY - ICON_Y_1);
+        }
+    }
 }
 
+
 void CInfoViewer::showEpgInfo()   //message on event change
 {
 	int mode = CNeutrinoApp::getInstance()->getMode();
diff -ur --exclude=.svn --exclude=.git --exclude=tuxtxt neutrino-hd2.org/src/gui/infoviewer.h neutrino-hd2/src/gui/infoviewer.h
--- neutrino-hd2.org/src/gui/infoviewer.h	2012-07-09 17:19:01.688766972 +0200
+++ neutrino-hd2/src/gui/infoviewer.h	2012-07-09 17:33:54.252767174 +0200
@@ -109,7 +109,7 @@
 	
 #ifndef SKIP_CA_STATUS
 	void showIcon_CA_Status(int);
-	void paint_ca_icons(int, char*);
+  void paint_ca_icons(int, char*, int);
 #endif
 	void showIcon_VTXT()      const;
 	void showRecordIcon(const bool show);