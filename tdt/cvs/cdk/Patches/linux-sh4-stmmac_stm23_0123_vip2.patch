diff -rcN linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/common.h linux-sh4/drivers/net/stmmac/common.h
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/common.h	Thu May  6 04:13:19 2010
--- linux-sh4/drivers/net/stmmac/common.h	Thu May  6 04:01:46 2010
***************
*** 221,232 ****
--- 221,241 ----
  	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
+ #if 1
+ 	addr[0] = 0;
+ 	addr[1] = 0;
+ 	addr[2] = 0;
+ 	addr[3] = 0;
+ 	addr[4] = 0;
+ 	addr[5] = 0;
+ #else
  	addr[0] = lo_addr & 0xff;
  	addr[1] = (lo_addr >> 8) & 0xff;
  	addr[2] = (lo_addr >> 16) & 0xff;
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
+ #endif
  
  	return;
  }
diff -rcN linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/stmmac_main.c linux-sh4/drivers/net/stmmac/stmmac_main.c
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/stmmac_main.c	Thu May  6 04:13:19 2010
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	Thu May  6 04:02:27 2010
***************
*** 1887,1894 ****
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");
  	}
  
  	ret = register_netdev(dev);
--- 1887,1894 ----
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		/*printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");*/
  	}
  
  	ret = register_netdev(dev);
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/stmmac_mdio.c	Thu Apr  1 19:18:51 2010
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	Tue Mar 23 23:32:05 2010
***************
*** 174,180 ****
  	for (addr = 0; addr < 32; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
! 			if (priv->phy_addr == -1) {
  				priv->phy_addr = addr;
  				phydev->irq = priv->phy_irq;
  				irqlist[addr] = priv->phy_irq;
--- 174,180 ----
  	for (addr = 0; addr < 32; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
! 			if ((priv->phy_addr == -1) || (phydev->phy_id == 0x0181b880) || (phydev->phy_id == 0x0181b8a0)) {
  				priv->phy_addr = addr;
  				phydev->irq = priv->phy_irq;
  				irqlist[addr] = priv->phy_irq;
  	
