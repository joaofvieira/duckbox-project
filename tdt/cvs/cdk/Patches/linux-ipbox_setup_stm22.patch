diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/mach.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/mach.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/mach.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/mach.c	2008-04-02 16:06:30.000000000 +0200
@@ -0,0 +1,69 @@
+/*
+ * arch/sh/boards/st/stb7100ref/mach.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Machine vector for the STMicroelectronics STb7100 Reference board.
+ */
+
+#include <linux/init.h>
+
+#include <linux/pci.h>
+#include <linux/irq.h>
+
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/machvec.h>
+#include <asm/led.h>
+#include <asm/machvec_init.h>
+
+static void __iomem *stb7100ref_ioport_map(unsigned long port, unsigned int size)
+{
+#ifdef CONFIG_BLK_DEV_ST40IDE
+        /*
+         * The IDE driver appears to use memory addresses with IO port
+         * calls. This needs fixing.
+         */
+	return (void __iomem *)port;
+#endif
+
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init stb7100ref_init_irq(void)
+{
+	/* enable individual interrupt mode for externals */
+	ctrl_outw(ctrl_inw(INTC_ICR) | INTC_ICR_IRLM, INTC_ICR);
+
+        /* Set the ILC to route external interrupts to the the INTC */
+        /* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
+        ilc_route_external(ILC_EXT_IRQ0, 4, 0);
+        ilc_route_external(ILC_EXT_IRQ1, 5, 0);
+        ilc_route_external(ILC_EXT_IRQ2, 6, 0);
+#ifdef CONFIG_STMMAC_ETH
+        ilc_route_external(70, 7, 0);
+#else
+        ilc_route_external(ILC_EXT_IRQ3, 7, 0);
+#endif
+
+        make_ipr_irq(IRL0_IRQ, IRL0_IPR_ADDR, IRL0_IPR_POS, IRL0_PRIORITY);
+        make_ipr_irq(IRL1_IRQ, IRL1_IPR_ADDR, IRL1_IPR_POS, IRL1_PRIORITY);
+        make_ipr_irq(IRL2_IRQ, IRL2_IPR_ADDR, IRL2_IPR_POS, IRL2_PRIORITY);
+        make_ipr_irq(IRL3_IRQ, IRL3_IPR_ADDR, IRL3_IPR_POS, IRL3_PRIORITY);
+}
+
+struct sh_machine_vector mv_stb7100ref __initmv = {
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= stb7100ref_init_irq,
+	.mv_ioport_map		= stb7100ref_ioport_map,
+};
+ALIAS_MV(stb7100ref)
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/Makefile linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/Makefile
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/Makefile	2009-05-31 10:37:18.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STb7100 Reference board
+#
+
+obj-y := setup.o mach.o
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/setup.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/setup.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox55/setup.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox55/setup.c	2011-07-05 17:45:45.107253888 +0200
@@ -0,0 +1,554 @@
+/*
+ * arch/sh/boards/st/stb7100ref/setup.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STb7100 Reference board support.
+ */
+
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/stpio.h>
+#include <linux/st_soc.h>
+#include <linux/delay.h>
+#include <linux/bpa2.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/physmap.h>
+#include <asm/io.h>
+#include "../../st/stx710x-common-setup.h"
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "v4l2-video-buffers", "gfx-memory", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea",  NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+        {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+        },
+        {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01600000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+        }
+};
+
+/*
+ * Initialize the board
+ */
+void __init platform_setup(void)
+{
+	unsigned long sysconf;
+	unsigned long chip_revision, chip_7109;
+	static struct stpio_pin *usbpower, *ethreset;
+
+	printk("Abipbox 55 initialisation\n");
+
+	sysconf = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((sysconf >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (sysconf >> 28) +1;
+
+	if (chip_7109)
+		printk("STb7109 version %ld.x\n", chip_revision);
+	else
+		printk("STb7100 version %ld.x\n", chip_revision);
+
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(7));
+
+	/* SCIF_PIO_OUT_EN=0 */
+	/* Route UART2 and PWM to PIO4 instead of SCIF */
+	sysconf &= ~(1<<0);
+
+	/* Set SSC2_MUX_SEL = 0 */
+	/* Treat SSC2 as I2C instead of SSC */
+	sysconf &= ~(1<<3);
+
+	ctrl_outl(sysconf, SYSCONF_SYS_CFG(7));
+
+	/* The ST40RTC sources its clock from clock */
+	/* generator B */
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(8));
+	ctrl_outl(sysconf | 0x2, SYSCONF_SYS_CFG(8));
+
+	/*
+	 * There have been two changes to the USB power enable signal:
+	 *
+	 * - 7100 upto and including cut 3.0 and 7109 1.0 generated an
+	 *   active high enables signal. From 7100 cut 3.1 and 7109 cut 2.0
+	 *   the signal changed to active low.
+	 *
+	 * - The 710x ref board (mb442) has always used power distribution
+	 *   chips which have active high enables signals (on rev A and B
+	 *   this was a TI TPS2052, rev C used the ST equivalent a ST2052).
+	 *   However rev A and B had a pull up on the enables signal, while
+	 *   rev C changed this to a pull down.
+	 *
+	 * The net effect of all this is that the easiest way to drive
+	 * this signal is ignore the USB hardware and drive it as a PIO
+	 * pin.
+	 *
+	 * (Note the USB over current input on the 710x changed from active
+	 * high to low at the same cuts, but board revs A and B had a resistor
+	 * option to select an inverted output from the TPS2052, so no
+	 * software work around is required.)
+	 */
+	usbpower=stpio_request_pin(5,7, "USBPWR", STPIO_OUT);
+	stpio_set_pin(usbpower, 1);
+
+	/* Currently all STB1 chips have problems with the sleep instruction,
+	 * so disable it here.
+	 */
+	disable_hlt();
+
+#ifdef CONFIG_STMMAC_ETH
+	stb7109eth_hw_setup();
+#endif
+
+#ifdef CONFIG_STM_PWM
+	stpio_request_pin(4, 7, "PWM", STPIO_ALT_OUT);
+#endif
+
+        bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+const char *get_system_type(void)
+{
+	return "STb7100 Reference board";
+}
+
+static struct resource ssc_resource[] = {
+	[0] = {
+		.start = 0xB8040000,
+		.end = 0xB8040000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = 0xB8041000,
+		.end = 0xB8041000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start = 0xB8042000,
+		.end = 0xB8042000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[3] = {
+		.start = 119,
+		.end = 119,
+		.flags = IORESOURCE_IRQ,
+	},
+	[4] = {
+		.start = 118,
+		.end = 118,
+		.flags = IORESOURCE_IRQ,
+	},
+	[5] = {
+		.start = 117,
+		.end = 117,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct plat_ssc_pio_t ssc_pio[] = {
+	{2, 0, 2, 1, 0xff, 0xff},
+	{3, 0, 3, 1, 0xff, 0xff},
+	{4, 0, 4, 1, 0xff, 0xff},
+};
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		(SSC_I2C_CAPABILITY << (0*2)) |
+		(SSC_I2C_CAPABILITY << (1*2)) |
+		(SSC_I2C_CAPABILITY << (2*2)),
+	.pio         = ssc_pio
+};
+struct platform_device ssc_device = {
+	.name = "ssc",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(ssc_resource),
+	.resource = ssc_resource,
+	.dev = {
+		.platform_data = &ssc_private_info
+	}
+};
+
+static struct lirc_pio lirc_pios[] = {
+	[0] = {
+		.bank = 3,
+		.pin  = 3,
+		.dir  = STPIO_IN
+	}/*,
+	[1] = {
+		.bank = 3,
+		.pin  = 4,
+		.dir  = STPIO_IN
+	},
+	[2] = {
+		.bank = 3,
+		.pin  = 5,
+		.dir  = STPIO_ALT_OUT
+	},
+	[3] = {
+		.bank = 3,
+		.pin  = 6,
+		.dir  = STPIO_ALT_OUT
+	}  */
+};
+
+static struct plat_lirc_data lirc_private_info = {
+	/* For the 7100, the clock settings will be calculated by the driver
+	 * from the system clock
+	 */
+	.irbclock	= 0, /* use current_cpu data */
+	.irbclkdiv      = 0, /* automatically calculate */
+	.irbperiodmult  = 0,
+	.irbperioddiv   = 0,
+	.irbontimemult  = 0,
+	.irbontimediv   = 0,
+	.irbrxmaxperiod = 0x5000,
+	.irbversion     = 2,
+	.sysclkdiv	= 1,
+	.rxpolarity	= 1,
+	.pio_pin_arr  = lirc_pios,
+	.num_pio_pins = ARRAY_SIZE(lirc_pios)
+};
+
+static struct resource st40_ohci_resources[] = {
+	/*this lot for the ohci block*/
+	[0] = {
+		.start = 0xb9100000 + 0xffc00,
+		.end  =  0xb9100000 +0xffcff,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 168,
+			.end   = 168,
+			.flags = IORESOURCE_IRQ,
+	}
+};
+static struct resource st40_ehci_resources[] = {
+	/*now this for the ehci*/
+	[0] =  {
+			.start = 0xb9100000 + 0xffe00,
+			.end = 0xb9100000 + 0xffeff,
+			.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 169,
+			.end   = 169,
+			.flags = IORESOURCE_IRQ,
+	},
+};
+
+/* Watchdog timer parameters */
+static struct resource wdt_resource[] = {
+	/* Watchdog timer only needs a register address */
+	[0] = {
+		.start = 0xFFC00008,
+		.end = 0xFFC00010,
+		.flags = IORESOURCE_MEM,
+	}
+};
+
+struct platform_device wdt_device = {
+	.name = "wdt",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(wdt_resource),
+	.resource = wdt_resource,
+};
+
+static struct resource lirc_resource[]= {
+	/* This is the main LIRC register block, as defined by the spec */
+       [0] = {
+		.start = 0x18018000,
+		.end   = 0x18018000 + 0xa0,
+	        .flags = IORESOURCE_MEM
+	},
+	/* The LIRC block has one interrupt */
+	[1] = {
+	        .start = 125,
+		.end   = 125,
+	        .flags = IORESOURCE_IRQ
+	},
+};
+
+static u64 st40_dma_mask = 0xfffffff;
+
+static struct platform_device  st40_ohci_devices = {
+	.name = "ST40-ohci",
+	.id=1,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ohci_resources),
+	.resource = st40_ohci_resources,
+};
+
+static struct platform_device  st40_ehci_devices = {
+	.name = "ST40-ehci",
+	.id=2,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ehci_resources),
+	.resource = st40_ehci_resources,
+};
+
+static void phy_reset(void* bus)
+{
+	static struct stpio_pin *phyreset;
+
+	if (phyreset == NULL) {
+		phyreset = stpio_request_pin(2, 4, "ste100p_reset", STPIO_OUT);
+	}
+
+	stpio_set_pin(phyreset, 1);
+	udelay(1);
+	stpio_set_pin(phyreset, 0);
+	udelay(1000);
+	stpio_set_pin(phyreset, 1);
+}
+
+static struct plat_stmmacenet_data eth7109_private_data = {
+	.bus_id = 0,
+	.phy_addr = 3,
+	.phy_mask = 0,
+	.phy_name = "ste100p",
+	.pbl = 1,
+//	.fix_mac_speed = fix_mac_speed,
+//	.phy_reset = phy_reset,
+};
+
+static struct platform_device stb7109eth_device = {
+	.name           = "stmmaceth",
+	.id             = 0,
+	.num_resources  = 3,
+	.resource       = (struct resource[]) {
+		{
+	                .start = 0x18110000,
+		        .end   = 0x1811ffff,
+	        	.flags  = IORESOURCE_MEM,
+		},
+		{
+			.name   = "macirq",
+	        	.start  = 133,
+	        	.end    = 133,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+		{
+			.name   = "phyirq",
+	        	.start  = IRL3_IRQ,
+	        	.end    = IRL3_IRQ,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &eth7109_private_data,
+	}
+};
+
+static struct platform_device lirc_device = {
+	.name           = "lirc",
+	.id             = -1,
+	.num_resources  = ARRAY_SIZE(lirc_resource),
+	.resource       = lirc_resource,
+	.dev = {
+	           .platform_data = &lirc_private_info
+	}
+};
+
+static struct resource sata_resource[]= {
+	[0] = {
+		.start = 0x18000000 + 0x01209000,
+		.end   = 0x18000000 + 0x01209000 + 0xfff,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 0xaa,
+		.flags = IORESOURCE_IRQ
+	},
+};
+
+static struct plat_sata_data sata_private_info = {
+	.phy_init	= 0,
+};
+
+static struct platform_device sata_device = {
+	.name		= "stm-sata",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(sata_resource),
+	.resource	= sata_resource,
+	.dev = {
+		.platform_data = &sata_private_info,
+	}
+};
+
+static struct resource rtc_resource[]= {
+	[0] = {
+		.start = 0xffc80000,
+		.end   = 0xffc80000 + 0x40,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 20,/* Alarm IRQ   */
+		.flags = IORESOURCE_IRQ
+	},
+	[2] = {
+		.start = 21,/* Periodic IRQ*/
+		.flags = IORESOURCE_IRQ
+	},
+};
+static struct platform_device rtc_device = {
+	.name		= "rtc",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(rtc_resource),
+	.resource	= rtc_resource,
+};
+
+static struct resource stm_pwm_resource[]= {
+	[0] = {
+		.start	= 0x18010000,
+		.end	= 0x18010000 + 0x67,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= 126,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT1,
+};
+
+static struct platform_device stm_pwm_device = {
+	.name		= "stm-pwm",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(stm_pwm_resource),
+	.resource	= stm_pwm_resource,
+	.dev = {
+		.platform_data = &pwm_private_info,
+	}
+};
+
+#ifdef CONFIG_MTD_PHYSMAP
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+	 .name = "Boot firmware",
+	 .size = 0x00040000,
+	 .offset = 0x00000000,
+	 },
+	{
+	 .name = "Kernel",
+	 .size = 0x00100000,
+	 .offset = 0x00040000,
+
+	 },
+	{
+	 .name = "Root FS",
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x00140000,
+	 }
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+#define physmap_flash_data_addr &physmap_flash_data
+#else
+#define physmap_flash_data_addr NULL
+#endif
+
+static struct resource physmap_flash_resource = {
+	.start		= 0x00000000,
+	.end		= 0x00800000 - 1,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.dev		= {
+		.platform_data	= physmap_flash_data_addr,
+	},
+	.num_resources	= 1,
+	.resource	= &physmap_flash_resource,
+};
+
+
+static struct platform_device *stb7100ref_devices[] __initdata = {
+	&stb7109eth_device,
+	&st40_ohci_devices,
+	&st40_ehci_devices,
+	&lirc_device,
+	&sata_device,
+	&wdt_device,
+	&ssc_device,
+	&rtc_device,
+	&stm_pwm_device,
+	&physmap_flash,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv,
+	&alsa_710x_device_pcmin,
+};
+
+static int __init device_init(void)
+{
+	int ret =0;
+	unsigned long devid;
+	unsigned long chip_revision, chip_7109;
+
+	devid = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (devid >> 28) + 1;
+
+	if ((! chip_7109) && (chip_revision == 1)) {
+		/* 7100 cut 1.x */
+		sata_private_info.phy_init = 0x0013704A;
+	} else {
+		/* 7100 cut 2.x and cut 3.x and 7109 */
+		sata_private_info.phy_init = 0x388fc;
+	}
+
+	if ((! chip_7109) || (chip_7109 && (chip_revision == 1))) {
+		sata_private_info.only_32bit = 1;
+		sata_private_info.pc_glue_logic_init = 0x1ff;
+	} else {
+		sata_private_info.only_32bit = 0;
+		sata_private_info.pc_glue_logic_init = 0x100ff;
+	}
+
+	/* Configure the ethernet MAC PBL depending on the cut of the chip */
+	if (chip_7109){
+		eth7109_private_data.pbl = 1;
+	}
+
+	fdma_setup(chip_7109, chip_revision);
+//	printk("***************************\n");
+//	printk("chip %d revision %d\n", chip_7109, chip_revision);
+//	printk("***************************\n");
+	alsa_setup(chip_7109, chip_revision);
+
+	ret = platform_add_devices(stb7100ref_devices, ARRAY_SIZE(stb7100ref_devices));
+	return ret;
+}
+
+subsys_initcall(device_init);
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/mach.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/mach.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/mach.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/mach.c	2008-04-02 16:06:30.000000000 +0200
@@ -0,0 +1,69 @@
+/*
+ * arch/sh/boards/st/stb7100ref/mach.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Machine vector for the STMicroelectronics STb7100 Reference board.
+ */
+
+#include <linux/init.h>
+
+#include <linux/pci.h>
+#include <linux/irq.h>
+
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/machvec.h>
+#include <asm/led.h>
+#include <asm/machvec_init.h>
+
+static void __iomem *stb7100ref_ioport_map(unsigned long port, unsigned int size)
+{
+#ifdef CONFIG_BLK_DEV_ST40IDE
+        /*
+         * The IDE driver appears to use memory addresses with IO port
+         * calls. This needs fixing.
+         */
+	return (void __iomem *)port;
+#endif
+
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init stb7100ref_init_irq(void)
+{
+	/* enable individual interrupt mode for externals */
+	ctrl_outw(ctrl_inw(INTC_ICR) | INTC_ICR_IRLM, INTC_ICR);
+
+        /* Set the ILC to route external interrupts to the the INTC */
+        /* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
+        ilc_route_external(ILC_EXT_IRQ0, 4, 0);
+        ilc_route_external(ILC_EXT_IRQ1, 5, 0);
+        ilc_route_external(ILC_EXT_IRQ2, 6, 0);
+#ifdef CONFIG_STMMAC_ETH
+        ilc_route_external(70, 7, 0);
+#else
+        ilc_route_external(ILC_EXT_IRQ3, 7, 0);
+#endif
+
+        make_ipr_irq(IRL0_IRQ, IRL0_IPR_ADDR, IRL0_IPR_POS, IRL0_PRIORITY);
+        make_ipr_irq(IRL1_IRQ, IRL1_IPR_ADDR, IRL1_IPR_POS, IRL1_PRIORITY);
+        make_ipr_irq(IRL2_IRQ, IRL2_IPR_ADDR, IRL2_IPR_POS, IRL2_PRIORITY);
+        make_ipr_irq(IRL3_IRQ, IRL3_IPR_ADDR, IRL3_IPR_POS, IRL3_PRIORITY);
+}
+
+struct sh_machine_vector mv_stb7100ref __initmv = {
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= stb7100ref_init_irq,
+	.mv_ioport_map		= stb7100ref_ioport_map,
+};
+ALIAS_MV(stb7100ref)
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/Makefile linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/Makefile
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/Makefile	2009-05-31 10:37:18.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STb7100 Reference board
+#
+
+obj-y := setup.o mach.o
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/setup.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/setup.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox99/setup.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox99/setup.c	2011-07-05 17:46:01.827253983 +0200
@@ -0,0 +1,554 @@
+/*
+ * arch/sh/boards/st/stb7100ref/setup.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STb7100 Reference board support.
+ */
+
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/stpio.h>
+#include <linux/st_soc.h>
+#include <linux/delay.h>
+#include <linux/bpa2.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/physmap.h>
+#include <asm/io.h>
+#include "../../st/stx710x-common-setup.h"
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "v4l2-video-buffers", "gfx-memory", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea",  NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+        {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+        },
+        {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01600000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+        }
+};
+
+/*
+ * Initialize the board
+ */
+void __init platform_setup(void)
+{
+	unsigned long sysconf;
+	unsigned long chip_revision, chip_7109;
+	static struct stpio_pin *usbpower, *ethreset;
+
+	printk("Abipbox 99 initialisation\n");
+
+	sysconf = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((sysconf >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (sysconf >> 28) +1;
+
+	if (chip_7109)
+		printk("STb7109 version %ld.x\n", chip_revision);
+	else
+		printk("STb7100 version %ld.x\n", chip_revision);
+
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(7));
+
+	/* SCIF_PIO_OUT_EN=0 */
+	/* Route UART2 and PWM to PIO4 instead of SCIF */
+	sysconf &= ~(1<<0);
+
+	/* Set SSC2_MUX_SEL = 0 */
+	/* Treat SSC2 as I2C instead of SSC */
+	sysconf &= ~(1<<3);
+
+	ctrl_outl(sysconf, SYSCONF_SYS_CFG(7));
+
+	/* The ST40RTC sources its clock from clock */
+	/* generator B */
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(8));
+	ctrl_outl(sysconf | 0x2, SYSCONF_SYS_CFG(8));
+
+	/*
+	 * There have been two changes to the USB power enable signal:
+	 *
+	 * - 7100 upto and including cut 3.0 and 7109 1.0 generated an
+	 *   active high enables signal. From 7100 cut 3.1 and 7109 cut 2.0
+	 *   the signal changed to active low.
+	 *
+	 * - The 710x ref board (mb442) has always used power distribution
+	 *   chips which have active high enables signals (on rev A and B
+	 *   this was a TI TPS2052, rev C used the ST equivalent a ST2052).
+	 *   However rev A and B had a pull up on the enables signal, while
+	 *   rev C changed this to a pull down.
+	 *
+	 * The net effect of all this is that the easiest way to drive
+	 * this signal is ignore the USB hardware and drive it as a PIO
+	 * pin.
+	 *
+	 * (Note the USB over current input on the 710x changed from active
+	 * high to low at the same cuts, but board revs A and B had a resistor
+	 * option to select an inverted output from the TPS2052, so no
+	 * software work around is required.)
+	 */
+	usbpower=stpio_request_pin(5,7, "USBPWR", STPIO_OUT);
+	stpio_set_pin(usbpower, 1);
+
+	/* Currently all STB1 chips have problems with the sleep instruction,
+	 * so disable it here.
+	 */
+	disable_hlt();
+
+#ifdef CONFIG_STMMAC_ETH
+	stb7109eth_hw_setup();
+#endif
+
+#ifdef CONFIG_STM_PWM
+	stpio_request_pin(4, 7, "PWM", STPIO_ALT_OUT);
+#endif
+
+        bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+const char *get_system_type(void)
+{
+	return "STb7100 Reference board";
+}
+
+static struct resource ssc_resource[] = {
+	[0] = {
+		.start = 0xB8040000,
+		.end = 0xB8040000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = 0xB8041000,
+		.end = 0xB8041000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start = 0xB8042000,
+		.end = 0xB8042000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[3] = {
+		.start = 119,
+		.end = 119,
+		.flags = IORESOURCE_IRQ,
+	},
+	[4] = {
+		.start = 118,
+		.end = 118,
+		.flags = IORESOURCE_IRQ,
+	},
+	[5] = {
+		.start = 117,
+		.end = 117,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct plat_ssc_pio_t ssc_pio[] = {
+	{2, 0, 2, 1, 0xff, 0xff},
+	{3, 0, 3, 1, 0xff, 0xff},
+	{4, 0, 4, 1, 0xff, 0xff},
+};
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		(SSC_I2C_CAPABILITY << (0*2)) |
+		(SSC_I2C_CAPABILITY << (1*2)) |
+		(SSC_I2C_CAPABILITY << (2*2)),
+	.pio         = ssc_pio
+};
+struct platform_device ssc_device = {
+	.name = "ssc",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(ssc_resource),
+	.resource = ssc_resource,
+	.dev = {
+		.platform_data = &ssc_private_info
+	}
+};
+
+static struct lirc_pio lirc_pios[] = {
+	[0] = {
+		.bank = 3,
+		.pin  = 3,
+		.dir  = STPIO_IN
+	}/*,
+	[1] = {
+		.bank = 3,
+		.pin  = 4,
+		.dir  = STPIO_IN
+	},
+	[2] = {
+		.bank = 3,
+		.pin  = 5,
+		.dir  = STPIO_ALT_OUT
+	},
+	[3] = {
+		.bank = 3,
+		.pin  = 6,
+		.dir  = STPIO_ALT_OUT
+	}  */
+};
+
+static struct plat_lirc_data lirc_private_info = {
+	/* For the 7100, the clock settings will be calculated by the driver
+	 * from the system clock
+	 */
+	.irbclock	= 0, /* use current_cpu data */
+	.irbclkdiv      = 0, /* automatically calculate */
+	.irbperiodmult  = 0,
+	.irbperioddiv   = 0,
+	.irbontimemult  = 0,
+	.irbontimediv   = 0,
+	.irbrxmaxperiod = 0x5000,
+	.irbversion     = 2,
+	.sysclkdiv	= 1,
+	.rxpolarity	= 1,
+	.pio_pin_arr  = lirc_pios,
+	.num_pio_pins = ARRAY_SIZE(lirc_pios)
+};
+
+static struct resource st40_ohci_resources[] = {
+	/*this lot for the ohci block*/
+	[0] = {
+		.start = 0xb9100000 + 0xffc00,
+		.end  =  0xb9100000 +0xffcff,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 168,
+			.end   = 168,
+			.flags = IORESOURCE_IRQ,
+	}
+};
+static struct resource st40_ehci_resources[] = {
+	/*now this for the ehci*/
+	[0] =  {
+			.start = 0xb9100000 + 0xffe00,
+			.end = 0xb9100000 + 0xffeff,
+			.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 169,
+			.end   = 169,
+			.flags = IORESOURCE_IRQ,
+	},
+};
+
+/* Watchdog timer parameters */
+static struct resource wdt_resource[] = {
+	/* Watchdog timer only needs a register address */
+	[0] = {
+		.start = 0xFFC00008,
+		.end = 0xFFC00010,
+		.flags = IORESOURCE_MEM,
+	}
+};
+
+struct platform_device wdt_device = {
+	.name = "wdt",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(wdt_resource),
+	.resource = wdt_resource,
+};
+
+static struct resource lirc_resource[]= {
+	/* This is the main LIRC register block, as defined by the spec */
+       [0] = {
+		.start = 0x18018000,
+		.end   = 0x18018000 + 0xa0,
+	        .flags = IORESOURCE_MEM
+	},
+	/* The LIRC block has one interrupt */
+	[1] = {
+	        .start = 125,
+		.end   = 125,
+	        .flags = IORESOURCE_IRQ
+	},
+};
+
+static u64 st40_dma_mask = 0xfffffff;
+
+static struct platform_device  st40_ohci_devices = {
+	.name = "ST40-ohci",
+	.id=1,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ohci_resources),
+	.resource = st40_ohci_resources,
+};
+
+static struct platform_device  st40_ehci_devices = {
+	.name = "ST40-ehci",
+	.id=2,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ehci_resources),
+	.resource = st40_ehci_resources,
+};
+
+static void phy_reset(void* bus)
+{
+	static struct stpio_pin *phyreset;
+
+	if (phyreset == NULL) {
+		phyreset = stpio_request_pin(2, 4, "ste100p_reset", STPIO_OUT);
+	}
+
+	stpio_set_pin(phyreset, 1);
+	udelay(1);
+	stpio_set_pin(phyreset, 0);
+	udelay(1000);
+	stpio_set_pin(phyreset, 1);
+}
+
+static struct plat_stmmacenet_data eth7109_private_data = {
+	.bus_id = 0,
+	.phy_addr = 3,
+	.phy_mask = 0,
+	.phy_name = "ste100p",
+	.pbl = 1,
+//	.fix_mac_speed = fix_mac_speed,
+//	.phy_reset = phy_reset,
+};
+
+static struct platform_device stb7109eth_device = {
+	.name           = "stmmaceth",
+	.id             = 0,
+	.num_resources  = 3,
+	.resource       = (struct resource[]) {
+		{
+	                .start = 0x18110000,
+		        .end   = 0x1811ffff,
+	        	.flags  = IORESOURCE_MEM,
+		},
+		{
+			.name   = "macirq",
+	        	.start  = 133,
+	        	.end    = 133,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+		{
+			.name   = "phyirq",
+	        	.start  = IRL3_IRQ,
+	        	.end    = IRL3_IRQ,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &eth7109_private_data,
+	}
+};
+
+static struct platform_device lirc_device = {
+	.name           = "lirc",
+	.id             = -1,
+	.num_resources  = ARRAY_SIZE(lirc_resource),
+	.resource       = lirc_resource,
+	.dev = {
+	           .platform_data = &lirc_private_info
+	}
+};
+
+static struct resource sata_resource[]= {
+	[0] = {
+		.start = 0x18000000 + 0x01209000,
+		.end   = 0x18000000 + 0x01209000 + 0xfff,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 0xaa,
+		.flags = IORESOURCE_IRQ
+	},
+};
+
+static struct plat_sata_data sata_private_info = {
+	.phy_init	= 0,
+};
+
+static struct platform_device sata_device = {
+	.name		= "stm-sata",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(sata_resource),
+	.resource	= sata_resource,
+	.dev = {
+		.platform_data = &sata_private_info,
+	}
+};
+
+static struct resource rtc_resource[]= {
+	[0] = {
+		.start = 0xffc80000,
+		.end   = 0xffc80000 + 0x40,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 20,/* Alarm IRQ   */
+		.flags = IORESOURCE_IRQ
+	},
+	[2] = {
+		.start = 21,/* Periodic IRQ*/
+		.flags = IORESOURCE_IRQ
+	},
+};
+static struct platform_device rtc_device = {
+	.name		= "rtc",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(rtc_resource),
+	.resource	= rtc_resource,
+};
+
+static struct resource stm_pwm_resource[]= {
+	[0] = {
+		.start	= 0x18010000,
+		.end	= 0x18010000 + 0x67,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= 126,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT1,
+};
+
+static struct platform_device stm_pwm_device = {
+	.name		= "stm-pwm",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(stm_pwm_resource),
+	.resource	= stm_pwm_resource,
+	.dev = {
+		.platform_data = &pwm_private_info,
+	}
+};
+
+#ifdef CONFIG_MTD_PHYSMAP
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+	 .name = "Boot firmware",
+	 .size = 0x00040000,
+	 .offset = 0x00000000,
+	 },
+	{
+	 .name = "Kernel",
+	 .size = 0x00100000,
+	 .offset = 0x00040000,
+
+	 },
+	{
+	 .name = "Root FS",
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x00140000,
+	 }
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+#define physmap_flash_data_addr &physmap_flash_data
+#else
+#define physmap_flash_data_addr NULL
+#endif
+
+static struct resource physmap_flash_resource = {
+	.start		= 0x00000000,
+	.end		= 0x00800000 - 1,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.dev		= {
+		.platform_data	= physmap_flash_data_addr,
+	},
+	.num_resources	= 1,
+	.resource	= &physmap_flash_resource,
+};
+
+
+static struct platform_device *stb7100ref_devices[] __initdata = {
+	&stb7109eth_device,
+	&st40_ohci_devices,
+	&st40_ehci_devices,
+	&lirc_device,
+	&sata_device,
+	&wdt_device,
+	&ssc_device,
+	&rtc_device,
+	&stm_pwm_device,
+	&physmap_flash,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv,
+	&alsa_710x_device_pcmin,
+};
+
+static int __init device_init(void)
+{
+	int ret =0;
+	unsigned long devid;
+	unsigned long chip_revision, chip_7109;
+
+	devid = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (devid >> 28) + 1;
+
+	if ((! chip_7109) && (chip_revision == 1)) {
+		/* 7100 cut 1.x */
+		sata_private_info.phy_init = 0x0013704A;
+	} else {
+		/* 7100 cut 2.x and cut 3.x and 7109 */
+		sata_private_info.phy_init = 0x388fc;
+	}
+
+	if ((! chip_7109) || (chip_7109 && (chip_revision == 1))) {
+		sata_private_info.only_32bit = 1;
+		sata_private_info.pc_glue_logic_init = 0x1ff;
+	} else {
+		sata_private_info.only_32bit = 0;
+		sata_private_info.pc_glue_logic_init = 0x100ff;
+	}
+
+	/* Configure the ethernet MAC PBL depending on the cut of the chip */
+	if (chip_7109){
+		eth7109_private_data.pbl = 1;
+	}
+
+	fdma_setup(chip_7109, chip_revision);
+//	printk("***************************\n");
+//	printk("chip %d revision %d\n", chip_7109, chip_revision);
+//	printk("***************************\n");
+	alsa_setup(chip_7109, chip_revision);
+
+	ret = platform_add_devices(stb7100ref_devices, ARRAY_SIZE(stb7100ref_devices));
+	return ret;
+}
+
+subsys_initcall(device_init);
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/mach.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/mach.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/mach.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/mach.c	2008-04-02 16:06:30.000000000 +0200
@@ -0,0 +1,69 @@
+/*
+ * arch/sh/boards/st/stb7100ref/mach.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Machine vector for the STMicroelectronics STb7100 Reference board.
+ */
+
+#include <linux/init.h>
+
+#include <linux/pci.h>
+#include <linux/irq.h>
+
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/machvec.h>
+#include <asm/led.h>
+#include <asm/machvec_init.h>
+
+static void __iomem *stb7100ref_ioport_map(unsigned long port, unsigned int size)
+{
+#ifdef CONFIG_BLK_DEV_ST40IDE
+        /*
+         * The IDE driver appears to use memory addresses with IO port
+         * calls. This needs fixing.
+         */
+	return (void __iomem *)port;
+#endif
+
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init stb7100ref_init_irq(void)
+{
+	/* enable individual interrupt mode for externals */
+	ctrl_outw(ctrl_inw(INTC_ICR) | INTC_ICR_IRLM, INTC_ICR);
+
+        /* Set the ILC to route external interrupts to the the INTC */
+        /* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
+        ilc_route_external(ILC_EXT_IRQ0, 4, 0);
+        ilc_route_external(ILC_EXT_IRQ1, 5, 0);
+        ilc_route_external(ILC_EXT_IRQ2, 6, 0);
+#ifdef CONFIG_STMMAC_ETH
+        ilc_route_external(70, 7, 0);
+#else
+        ilc_route_external(ILC_EXT_IRQ3, 7, 0);
+#endif
+
+        make_ipr_irq(IRL0_IRQ, IRL0_IPR_ADDR, IRL0_IPR_POS, IRL0_PRIORITY);
+        make_ipr_irq(IRL1_IRQ, IRL1_IPR_ADDR, IRL1_IPR_POS, IRL1_PRIORITY);
+        make_ipr_irq(IRL2_IRQ, IRL2_IPR_ADDR, IRL2_IPR_POS, IRL2_PRIORITY);
+        make_ipr_irq(IRL3_IRQ, IRL3_IPR_ADDR, IRL3_IPR_POS, IRL3_PRIORITY);
+}
+
+struct sh_machine_vector mv_stb7100ref __initmv = {
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= stb7100ref_init_irq,
+	.mv_ioport_map		= stb7100ref_ioport_map,
+};
+ALIAS_MV(stb7100ref)
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/Makefile linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/Makefile
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/Makefile	2009-05-31 10:37:18.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STb7100 Reference board
+#
+
+obj-y := setup.o mach.o
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/setup.c linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/setup.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/boards/abcom/ipbox9900/setup.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/arch/sh/boards/abcom/ipbox9900/setup.c	2011-07-05 17:44:42.026755803 +0200
@@ -0,0 +1,554 @@
+/*
+ * arch/sh/boards/st/stb7100ref/setup.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STb7100 Reference board support.
+ */
+
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/stpio.h>
+#include <linux/st_soc.h>
+#include <linux/delay.h>
+#include <linux/bpa2.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/physmap.h>
+#include <asm/io.h>
+#include "../../st/stx710x-common-setup.h"
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "v4l2-video-buffers", "gfx-memory", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea",  NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+        {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+        },
+        {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01600000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+        }
+};
+
+/*
+ * Initialize the board
+ */
+void __init platform_setup(void)
+{
+	unsigned long sysconf;
+	unsigned long chip_revision, chip_7109;
+	static struct stpio_pin *usbpower, *ethreset;
+
+	printk("Abipbox 9900 initialisation\n");
+
+	sysconf = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((sysconf >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (sysconf >> 28) +1;
+
+	if (chip_7109)
+		printk("STb7109 version %ld.x\n", chip_revision);
+	else
+		printk("STb7100 version %ld.x\n", chip_revision);
+
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(7));
+
+	/* SCIF_PIO_OUT_EN=0 */
+	/* Route UART2 and PWM to PIO4 instead of SCIF */
+	sysconf &= ~(1<<0);
+
+	/* Set SSC2_MUX_SEL = 0 */
+	/* Treat SSC2 as I2C instead of SSC */
+	sysconf &= ~(1<<3);
+
+	ctrl_outl(sysconf, SYSCONF_SYS_CFG(7));
+
+	/* The ST40RTC sources its clock from clock */
+	/* generator B */
+	sysconf = ctrl_inl(SYSCONF_SYS_CFG(8));
+	ctrl_outl(sysconf | 0x2, SYSCONF_SYS_CFG(8));
+
+	/*
+	 * There have been two changes to the USB power enable signal:
+	 *
+	 * - 7100 upto and including cut 3.0 and 7109 1.0 generated an
+	 *   active high enables signal. From 7100 cut 3.1 and 7109 cut 2.0
+	 *   the signal changed to active low.
+	 *
+	 * - The 710x ref board (mb442) has always used power distribution
+	 *   chips which have active high enables signals (on rev A and B
+	 *   this was a TI TPS2052, rev C used the ST equivalent a ST2052).
+	 *   However rev A and B had a pull up on the enables signal, while
+	 *   rev C changed this to a pull down.
+	 *
+	 * The net effect of all this is that the easiest way to drive
+	 * this signal is ignore the USB hardware and drive it as a PIO
+	 * pin.
+	 *
+	 * (Note the USB over current input on the 710x changed from active
+	 * high to low at the same cuts, but board revs A and B had a resistor
+	 * option to select an inverted output from the TPS2052, so no
+	 * software work around is required.)
+	 */
+	usbpower=stpio_request_pin(5,7, "USBPWR", STPIO_OUT);
+	stpio_set_pin(usbpower, 1);
+
+	/* Currently all STB1 chips have problems with the sleep instruction,
+	 * so disable it here.
+	 */
+	disable_hlt();
+
+#ifdef CONFIG_STMMAC_ETH
+	stb7109eth_hw_setup();
+#endif
+
+#ifdef CONFIG_STM_PWM
+	stpio_request_pin(4, 7, "PWM", STPIO_ALT_OUT);
+#endif
+
+        bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+const char *get_system_type(void)
+{
+	return "STb7100 Reference board";
+}
+
+static struct resource ssc_resource[] = {
+	[0] = {
+		.start = 0xB8040000,
+		.end = 0xB8040000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = 0xB8041000,
+		.end = 0xB8041000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start = 0xB8042000,
+		.end = 0xB8042000 + 0x108,
+		.flags = IORESOURCE_MEM,
+	},
+	[3] = {
+		.start = 119,
+		.end = 119,
+		.flags = IORESOURCE_IRQ,
+	},
+	[4] = {
+		.start = 118,
+		.end = 118,
+		.flags = IORESOURCE_IRQ,
+	},
+	[5] = {
+		.start = 117,
+		.end = 117,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct plat_ssc_pio_t ssc_pio[] = {
+	{2, 0, 2, 1, 0xff, 0xff},
+	{3, 0, 3, 1, 0xff, 0xff},
+	{4, 0, 4, 1, 0xff, 0xff},
+};
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		(SSC_I2C_CAPABILITY << (0*2)) |
+		(SSC_I2C_CAPABILITY << (1*2)) |
+		(SSC_I2C_CAPABILITY << (2*2)),
+	.pio         = ssc_pio
+};
+struct platform_device ssc_device = {
+	.name = "ssc",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(ssc_resource),
+	.resource = ssc_resource,
+	.dev = {
+		.platform_data = &ssc_private_info
+	}
+};
+
+static struct lirc_pio lirc_pios[] = {
+	[0] = {
+		.bank = 3,
+		.pin  = 3,
+		.dir  = STPIO_IN
+	}/*,
+	[1] = {
+		.bank = 3,
+		.pin  = 4,
+		.dir  = STPIO_IN
+	},
+	[2] = {
+		.bank = 3,
+		.pin  = 5,
+		.dir  = STPIO_ALT_OUT
+	},
+	[3] = {
+		.bank = 3,
+		.pin  = 6,
+		.dir  = STPIO_ALT_OUT
+	}  */
+};
+
+static struct plat_lirc_data lirc_private_info = {
+	/* For the 7100, the clock settings will be calculated by the driver
+	 * from the system clock
+	 */
+	.irbclock	= 0, /* use current_cpu data */
+	.irbclkdiv      = 0, /* automatically calculate */
+	.irbperiodmult  = 0,
+	.irbperioddiv   = 0,
+	.irbontimemult  = 0,
+	.irbontimediv   = 0,
+	.irbrxmaxperiod = 0x5000,
+	.irbversion     = 2,
+	.sysclkdiv	= 1,
+	.rxpolarity	= 1,
+	.pio_pin_arr  = lirc_pios,
+	.num_pio_pins = ARRAY_SIZE(lirc_pios)
+};
+
+static struct resource st40_ohci_resources[] = {
+	/*this lot for the ohci block*/
+	[0] = {
+		.start = 0xb9100000 + 0xffc00,
+		.end  =  0xb9100000 +0xffcff,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 168,
+			.end   = 168,
+			.flags = IORESOURCE_IRQ,
+	}
+};
+static struct resource st40_ehci_resources[] = {
+	/*now this for the ehci*/
+	[0] =  {
+			.start = 0xb9100000 + 0xffe00,
+			.end = 0xb9100000 + 0xffeff,
+			.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+			.start = 169,
+			.end   = 169,
+			.flags = IORESOURCE_IRQ,
+	},
+};
+
+/* Watchdog timer parameters */
+static struct resource wdt_resource[] = {
+	/* Watchdog timer only needs a register address */
+	[0] = {
+		.start = 0xFFC00008,
+		.end = 0xFFC00010,
+		.flags = IORESOURCE_MEM,
+	}
+};
+
+struct platform_device wdt_device = {
+	.name = "wdt",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(wdt_resource),
+	.resource = wdt_resource,
+};
+
+static struct resource lirc_resource[]= {
+	/* This is the main LIRC register block, as defined by the spec */
+       [0] = {
+		.start = 0x18018000,
+		.end   = 0x18018000 + 0xa0,
+	        .flags = IORESOURCE_MEM
+	},
+	/* The LIRC block has one interrupt */
+	[1] = {
+	        .start = 125,
+		.end   = 125,
+	        .flags = IORESOURCE_IRQ
+	},
+};
+
+static u64 st40_dma_mask = 0xfffffff;
+
+static struct platform_device  st40_ohci_devices = {
+	.name = "ST40-ohci",
+	.id=1,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ohci_resources),
+	.resource = st40_ohci_resources,
+};
+
+static struct platform_device  st40_ehci_devices = {
+	.name = "ST40-ehci",
+	.id=2,
+	.dev = {
+		.dma_mask = &st40_dma_mask,
+		.coherent_dma_mask = 0xffffffful,
+//		.platform_data = &usb_wrapper,
+	},
+	.num_resources = ARRAY_SIZE(st40_ehci_resources),
+	.resource = st40_ehci_resources,
+};
+
+static void phy_reset(void* bus)
+{
+	static struct stpio_pin *phyreset;
+
+	if (phyreset == NULL) {
+		phyreset = stpio_request_pin(2, 4, "ste100p_reset", STPIO_OUT);
+	}
+
+	stpio_set_pin(phyreset, 1);
+	udelay(1);
+	stpio_set_pin(phyreset, 0);
+	udelay(1000);
+	stpio_set_pin(phyreset, 1);
+}
+
+static struct plat_stmmacenet_data eth7109_private_data = {
+	.bus_id = 0,
+	.phy_addr = 3,
+	.phy_mask = 0,
+	.phy_name = "ste100p",
+	.pbl = 1,
+//	.fix_mac_speed = fix_mac_speed,
+//	.phy_reset = phy_reset,
+};
+
+static struct platform_device stb7109eth_device = {
+	.name           = "stmmaceth",
+	.id             = 0,
+	.num_resources  = 3,
+	.resource       = (struct resource[]) {
+		{
+	                .start = 0x18110000,
+		        .end   = 0x1811ffff,
+	        	.flags  = IORESOURCE_MEM,
+		},
+		{
+			.name   = "macirq",
+	        	.start  = 133,
+	        	.end    = 133,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+		{
+			.name   = "phyirq",
+	        	.start  = IRL3_IRQ,
+	        	.end    = IRL3_IRQ,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &eth7109_private_data,
+	}
+};
+
+static struct platform_device lirc_device = {
+	.name           = "lirc",
+	.id             = -1,
+	.num_resources  = ARRAY_SIZE(lirc_resource),
+	.resource       = lirc_resource,
+	.dev = {
+	           .platform_data = &lirc_private_info
+	}
+};
+
+static struct resource sata_resource[]= {
+	[0] = {
+		.start = 0x18000000 + 0x01209000,
+		.end   = 0x18000000 + 0x01209000 + 0xfff,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 0xaa,
+		.flags = IORESOURCE_IRQ
+	},
+};
+
+static struct plat_sata_data sata_private_info = {
+	.phy_init	= 0,
+};
+
+static struct platform_device sata_device = {
+	.name		= "stm-sata",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(sata_resource),
+	.resource	= sata_resource,
+	.dev = {
+		.platform_data = &sata_private_info,
+	}
+};
+
+static struct resource rtc_resource[]= {
+	[0] = {
+		.start = 0xffc80000,
+		.end   = 0xffc80000 + 0x40,
+		.flags = IORESOURCE_MEM
+	},
+	[1] = {
+		.start = 20,/* Alarm IRQ   */
+		.flags = IORESOURCE_IRQ
+	},
+	[2] = {
+		.start = 21,/* Periodic IRQ*/
+		.flags = IORESOURCE_IRQ
+	},
+};
+static struct platform_device rtc_device = {
+	.name		= "rtc",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(rtc_resource),
+	.resource	= rtc_resource,
+};
+
+static struct resource stm_pwm_resource[]= {
+	[0] = {
+		.start	= 0x18010000,
+		.end	= 0x18010000 + 0x67,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= 126,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT1,
+};
+
+static struct platform_device stm_pwm_device = {
+	.name		= "stm-pwm",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(stm_pwm_resource),
+	.resource	= stm_pwm_resource,
+	.dev = {
+		.platform_data = &pwm_private_info,
+	}
+};
+
+#ifdef CONFIG_MTD_PHYSMAP
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+	 .name = "Boot firmware",
+	 .size = 0x00040000,
+	 .offset = 0x00000000,
+	 },
+	{
+	 .name = "Kernel",
+	 .size = 0x00100000,
+	 .offset = 0x00040000,
+
+	 },
+	{
+	 .name = "Root FS",
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x00140000,
+	 }
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+#define physmap_flash_data_addr &physmap_flash_data
+#else
+#define physmap_flash_data_addr NULL
+#endif
+
+static struct resource physmap_flash_resource = {
+	.start		= 0x00000000,
+	.end		= 0x00800000 - 1,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.dev		= {
+		.platform_data	= physmap_flash_data_addr,
+	},
+	.num_resources	= 1,
+	.resource	= &physmap_flash_resource,
+};
+
+
+static struct platform_device *stb7100ref_devices[] __initdata = {
+	&stb7109eth_device,
+	&st40_ohci_devices,
+	&st40_ehci_devices,
+	&lirc_device,
+	&sata_device,
+	&wdt_device,
+	&ssc_device,
+	&rtc_device,
+	&stm_pwm_device,
+	&physmap_flash,
+	&fdma_710x_device,
+	&alsa_710x_device_pcm0,
+	&alsa_710x_device_pcm1,
+ 	&alsa_710x_device_spdif,
+	&alsa_710x_device_cnv,
+	&alsa_710x_device_pcmin,
+};
+
+static int __init device_init(void)
+{
+	int ret =0;
+	unsigned long devid;
+	unsigned long chip_revision, chip_7109;
+
+	devid = ctrl_inl(SYSCONF_DEVICEID);
+	chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
+	chip_revision = (devid >> 28) + 1;
+
+	if ((! chip_7109) && (chip_revision == 1)) {
+		/* 7100 cut 1.x */
+		sata_private_info.phy_init = 0x0013704A;
+	} else {
+		/* 7100 cut 2.x and cut 3.x and 7109 */
+		sata_private_info.phy_init = 0x388fc;
+	}
+
+	if ((! chip_7109) || (chip_7109 && (chip_revision == 1))) {
+		sata_private_info.only_32bit = 1;
+		sata_private_info.pc_glue_logic_init = 0x1ff;
+	} else {
+		sata_private_info.only_32bit = 0;
+		sata_private_info.pc_glue_logic_init = 0x100ff;
+	}
+
+	/* Configure the ethernet MAC PBL depending on the cut of the chip */
+	if (chip_7109){
+		eth7109_private_data.pbl = 1;
+	}
+
+	fdma_setup(chip_7109, chip_revision);
+//	printk("***************************\n");
+//	printk("chip %d revision %d\n", chip_7109, chip_revision);
+//	printk("***************************\n");
+	alsa_setup(chip_7109, chip_revision);
+
+	ret = platform_add_devices(stb7100ref_devices, ARRAY_SIZE(stb7100ref_devices));
+	return ret;
+}
+
+subsys_initcall(device_init);
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/Kconfig linux-2.6.17.14_stm22_0041/arch/sh/Kconfig
--- linux-2.6.17.14_stm22_0041.org/arch/sh/Kconfig	2011-07-05 17:05:25.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/arch/sh/Kconfig	2011-07-05 17:41:03.378791613 +0200
@@ -211,6 +211,36 @@
 	  More information at:
 	  <http://www.linuxsh.st.com/boards/stb7100ref/>
 
+config SH_IPBOX9900
+	bool "STB7100 IPBOX9900 board"
+	select CPU_SUBTYPE_STB7100
+	help
+	  Select STB7100 ipbox9900 if configuring for an
+	  STB7100  ipbox 9900 Board (product code: STB7100-REF).
+	  This is sometimes referred to as the CoCo board.
+	  More information at:
+	  <http://www.linuxsh.st.com/boards/stb7100ref/>
+
+config SH_IPBOX99
+	bool "STB7100 IPBOX99 board"
+	select CPU_SUBTYPE_STB7100
+	help
+	  Select STB7100 ipbox99 if configuring for an
+	  STB7100  ipbox 99 Board (product code: STB7100-REF).
+	  This is sometimes referred to as the CoCo board.
+	  More information at:
+	  <http://www.linuxsh.st.com/boards/stb7100ref/>
+
+config SH_IPBOX55
+	bool "STB7100 IPBOX55 board"
+	select CPU_SUBTYPE_STB7100
+	help
+	  Select STB7100 ipbox55 if configuring for an
+	  STB7100  ipbox 55 Board (product code: STB7100-REF).
+	  This is sometimes referred to as the CoCo board.
+	  More information at:
+	  <http://www.linuxsh.st.com/boards/stb7100ref/>
+
 config SH_STB7109E_REF
 	bool "STB7109E Reference board"
 	select CPU_SUBTYPE_STB7100
diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/Makefile linux-2.6.17.14_stm22_0041/arch/sh/Makefile
--- linux-2.6.17.14_stm22_0041.org/arch/sh/Makefile	2011-07-05 17:05:25.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/arch/sh/Makefile	2011-07-05 17:43:22.602754565 +0200
@@ -125,6 +125,9 @@
 machdir-$(CONFIG_SH_SH4202_MICRODEV)		:= superh/microdev
 machdir-$(CONFIG_SH_LANDISK)			:= landisk
 machdir-$(CONFIG_SH_TITAN)			:= titan
+machdir-$(CONFIG_SH_IPBOX9900)			:= abcom/ipbox9900
+machdir-$(CONFIG_SH_IPBOX99)			:= abcom/ipbox99
+machdir-$(CONFIG_SH_IPBOX55)			:= abcom/ipbox55
 machdir-$(CONFIG_SH_UNKNOWN)			:= unknown
 
 incdir-y			:= $(notdir $(firstword $(machdir-y)))
