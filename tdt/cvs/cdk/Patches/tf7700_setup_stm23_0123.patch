diff -Nur linux-sh4-2.6.23.17_stm23_0123/arch/sh/boards/st/mb448/mach.c linux-sh4-2.6.23.17_stm23_0123_/arch/sh/boards/st/mb448/mach.c
--- linux-sh4-2.6.23.17_stm23_0123/arch/sh/boards/st/mb448/mach.c	2010-02-20 14:34:41.000000000 +0100
+++ linux-sh4-2.6.23.17_stm23_0123_/arch/sh/boards/st/mb448/mach.c	2010-02-20 12:57:16.000000000 +0100
@@ -41,16 +41,20 @@
 
 	/* Set the ILC to route external interrupts to the the INTC */
 	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
-	ilc_route_external(ILC_EXT_MDINT, 4, 1);	/* STe100 PHY */
 	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* VoIP */
 	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* ATA */
-	ilc_route_external(ILC_EXT_IRQ3, 7, 0);		/* SMC Ethernet */
+
+        /* Route e/net PHY interrupt to SH4 - only for STb7109 */
+        /* Note that we invert the signal - the ste101p is connected
+           to the mb411 as active low. The sh4 INTC expects active high */
+        ilc_route_external(ILC_EXT_MDINT, 7, 1);
+
 }
 
 void __init mb448_setup(char**);
 
 static struct sh_machine_vector mv_mb448 __initmv = {
-	.mv_name		= "mb448",
+	.mv_name		= "TF77000HDPVR",
 	.mv_setup		= mb448_setup,
 	.mv_nr_irqs		= NR_IRQS,
 	.mv_init_irq		= mb448_init_irq,
diff -Nur linux-sh4-2.6.23.17_stm23_0123/arch/sh/boards/st/mb448/setup.c linux-sh4-2.6.23.17_stm23_0123_/arch/sh/boards/st/mb448/setup.c
--- linux-sh4-2.6.23.17_stm23_0123/arch/sh/boards/st/mb448/setup.c	2010-02-20 14:34:41.000000000 +0100
+++ linux-sh4-2.6.23.17_stm23_0123_/arch/sh/boards/st/mb448/setup.c	2010-02-20 14:20:43.000000000 +0100
@@ -20,65 +20,202 @@
 #include <linux/mtd/partitions.h>
 #include <linux/phy.h>
 #include <asm/irl.h>
+#include <linux/stm/soc_init.h>
+#include <linux/stm/sysconf.h>
+#include <linux/dma-mapping.h>
+#include "../common/common.h"
+#include <asm/mb411/epld.h>
+#include "../common/epld.c"
+#include <linux/bpa2.h>
+
+#define ASC2_INTEN ((unsigned int*)(0xb8032010))
+#define ASC3_INTEN ((unsigned int*)(0xb8033010))
+#define ASC3BaseAddress 0xb8033000
+#define ASC_TX_BUFF     0x004
+#define ASC_INT_STA     0x014
+#define ASC_INT_STA_THE   0x04
+
+#define UHOST2C_BASE                    0x19100000
+#define AHB2STBUS_WRAPPER_GLUE_BASE     (UHOST2C_BASE)
+#define AHB2STBUS_OHCI_BASE             (UHOST2C_BASE + 0x000ffc00)
+#define AHB2STBUS_EHCI_BASE             (UHOST2C_BASE + 0x000ffe00)
+#define AHB2STBUS_PROTOCOL_BASE         (UHOST2C_BASE + 0x000fff00)
 
-static struct stpio_pin *vpp_pio;
+static struct sysconf_field             *usb_power_sc;
+static u64                              st40_dma_mask = 0xfffffff;
 
 static int ascs[2] __initdata = { 2, 3 };
 
+/* additional info:
+
+LMI_SYS:
+0x04000000-0x07FFFFFF = 64MB RAM for linux
+
+LMI_VID:
+0x10000000-0x103FFFFF = 4MB RAM for ST231-0 (video delta)
+0x10400000-0x107FFFFF = 4MB RAM for ST231-1 (audio delta)
+0x10800000-0x13FFFFFF = 56MB RAM for allocator
+*/
+
+const char *LMI_VID_partalias[] = {
+	"BPA2_Region1",
+	"coredisplay-video",
+	"v4l2-video-buffers",
+	"gfx-memory",
+	NULL };
+
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea",  NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+        {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+        },
+        {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01600000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+        }
+};
+
+/* prototypes */
+static void phy_reset(void* bus);
+static void send_fp_byte(unsigned char Data);
+
+static void send_fp_byte(unsigned char Data)
+{
+        unsigned char *ASC_3_TX_BUFF = (unsigned char*)(ASC3BaseAddress + ASC_TX_BUFF);
+        unsigned int *ASC_3_INT_STA = (unsigned int*)(ASC3BaseAddress + ASC_INT_STA);
+        unsigned long Counter = 100000;
+
+        while (((*ASC_3_INT_STA & ASC_INT_STA_THE) == 0) && --Counter);
+        *ASC_3_TX_BUFF = Data;
+}
+
+static void tf7700_power_off(void)
+{
+        send_fp_byte(0x02);
+        send_fp_byte(0x11);
+        send_fp_byte(0x81);
+        send_fp_byte(0x03);
+        send_fp_byte(0x02);
+        send_fp_byte(0x21);
+        send_fp_byte(0x01);
+        send_fp_byte(0x03);
+}
+
+static void phy_reset(void* bus)
+{
+        static struct stpio_pin *phyreset;
+
+        printk ("Resetting the network PHY\n");
+
+        if (phyreset == NULL) {
+                phyreset = stpio_request_pin(5, 3, "PHY RST", STPIO_OUT);
+        }
+
+        stpio_set_pin(phyreset, 1);
+        udelay(1);
+        stpio_set_pin(phyreset, 0);
+        udelay(1000);
+        stpio_set_pin(phyreset, 1);
+}
+
+
 void __init mb448_setup(char** cmdline_p)
 {
-	printk("STMicroelectronics STb7109E Reference board initialisation\n");
+	printk("Topfield TF7700HDPVR board initialisation\n");
 
 	stx7100_early_device_init();
 	stb7100_configure_asc(ascs, 2, 0);
+
+        /* disable interrupts to prevent a system lockup */
+        *ASC2_INTEN = *ASC2_INTEN & ~0x000001fe;
+        *ASC3_INTEN = *ASC3_INTEN & ~0x000001fe;
+
+	printk("LOAD bpa2_parts_table\n");
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
 static struct plat_ssc_data ssc_private_info = {
 	.capability  =
 		ssc0_has(SSC_I2C_CAPABILITY) |
-		ssc1_has(SSC_SPI_CAPABILITY) |
+		ssc1_has(SSC_I2C_CAPABILITY) |
 		ssc2_has(SSC_I2C_CAPABILITY),
 };
 
-static struct resource smc91x_resources[] = {
-	[0] = {
-		.start	= 0xa2000300,
-		.end	= 0xa2000300 + 0xff,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = {
-		.start	= IRL3_IRQ,
-		.end	= IRL3_IRQ,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
-
-static struct platform_device smc91x_device = {
-	.name		= "smc91x",
-	.id		= 0,
-	.num_resources	= ARRAY_SIZE(smc91x_resources),
-	.resource	= smc91x_resources,
+static struct platform_device epld_device = {
+        .name           = "epld",
+        .id             = -1,
+        .num_resources  = 1,
+        .resource       = (struct resource[]) {
+                {
+                        .start  = EPLD_BASE,
+                        .end    = EPLD_BASE + EPLD_SIZE - 1,
+                        .flags  = IORESOURCE_MEM,
+                }
+        },
+        .dev.platform_data = &(struct plat_epld_data) {
+                 .opsize = 8,
+        },
 };
 
 static void set_vpp(struct map_info * info, int enable)
 {
-	stpio_set_pin(vpp_pio, enable);
+        if (enable) {
+                epld_write(3, EPLD_FLASH);
+        } else {
+                epld_write(2, EPLD_FLASH);
+        }
 }
 
-static struct mtd_partition mtd_parts_table[3] = {
-	{
-		.name = "Boot firmware",
-		.size = 0x00040000,
-		.offset = 0x00000000,
-	}, {
-		.name = "Kernel",
-		.size = 0x00100000,
-		.offset = 0x00040000,
-	}, {
-		.name = "Root FS",
-		.size = MTDPART_SIZ_FULL,
-		.offset = 0x00140000,
-	}
+static struct mtd_partition mtd_parts_table[] = {
+      {
+       .name = "TF Boot Loader",
+       .size = 0x00030000,
+       .offset = 0x00000000,
+       .mask_flags = MTD_WRITEABLE
+       },
+      {
+       .name = "U-Boot",
+       .size = 0x00020000,
+       .offset = MTDPART_OFS_NXTBLK,
+       },
+      {
+       .name = "U-Boot Settings",
+       .size = 0x00010000,
+       .offset = MTDPART_OFS_NXTBLK,
+       },
+      {
+       .name = "TF Kernel",
+       .size = 0x00200000,
+       .offset = MTDPART_OFS_NXTBLK,
+       },
+      {
+       .name = "Root FS (unused)",
+       .size = MTDPART_SIZ_FULL,
+       .offset = MTDPART_OFS_NXTBLK
+       },
+      {
+       .name   = "TF Firmware (overwrites U-Boot and Kernel!)",
+       .offset = 0x00030000,
+       .size   = 0x00790000,
+       },
+      {
+       .name   = "TF Settings",
+       .offset = 0x007c0000,
+       .size   = 0x00020000,
+       },
+      {
+       .name   = "TF Defaults",
+       .offset = 0x007e0000,
+       .size   = 0x00020000,
+       }
 };
 
 static struct physmap_flash_data physmap_flash_data = {
@@ -106,8 +243,8 @@
 
 static struct plat_stmmacphy_data phy_private_data = {
 	.bus_id = 0,
-	.phy_addr = 14,
-	.phy_mask = 1,
+	.phy_addr = 0,
+	.phy_mask = 0,
 	.interface = PHY_INTERFACE_MODE_MII,
 	.phy_reset = NULL,
 };
@@ -130,29 +267,32 @@
 };
 
 static struct platform_device *mb448_devices[] __initdata = {
-	&smc91x_device,
 	&physmap_flash,
 	&mb448_phy_device,
+	&epld_device,
 };
 
 static int __init device_init(void)
 {
-	struct stpio_pin *smc91x_reset;
+        static struct stpio_pin *pin;
 
 	stx7100_configure_sata();
 	stx7100_configure_ssc(&ssc_private_info);
	stx7100_configure_usb();
 	stx7100_configure_ethernet(0, 0, 0);
 
-	vpp_pio = stpio_request_pin(2,7, "VPP", STPIO_OUT);
+        /* assign power-off function */
+        pm_power_off = tf7700_power_off;
+
+        /* The Audio DAC (UDA1334ATS) uses GPIO pin 2-4 as an active high mute signal */
+        pin = stpio_request_pin(2, 4, "DACMUTE", STPIO_OUT);
+	if(pin == NULL)
+		printk("DACMUTE pin = NULL\n");
+	else
+		stpio_set_pin(pin, 0);
+
+	phy_reset(NULL);
 
-	/* Reset the SMSC 91C111 Ethernet chip */
-	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
-					     STPIO_OUT, 0);
-	udelay(1);
-	stpio_set_pin(smc91x_reset, 1);
-	udelay(1);
-	stpio_set_pin(smc91x_reset, 0);
 
 	return platform_add_devices(mb448_devices,
 				    ARRAY_SIZE(mb448_devices));
diff -Nur linux-sh4-2.6.23.17_stm23_0123/arch/sh/cpu/sh4/setup-stb7100.c linux-sh4-2.6.23.17_stm23_0123_/arch/sh/cpu/sh4/setup-stb7100.c
--- linux-sh4-2.6.23.17_stm23_0123/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2010-02-21 11:39:09.000000000 +0100
+++ linux-sh4-2.6.23.17_stm23_0123_/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2010-02-21 11:42:00.000000000 +0100
@@ -133,7 +133,8 @@
 	 * software work around is required.)
 	 */
 	pin = stpio_request_pin(5,7, "USBPWR", STPIO_OUT);
-	stpio_set_pin(pin, 1);
+	/* TF7700 implements active-low signal */
+	stpio_set_pin(pin, 0);
 
 #ifndef CONFIG_PM
 	sc = sysconf_claim(SYS_CFG, 2, 1, 1, "usb");
@@ -292,8 +293,8 @@
 static char i2c_st[] = "i2c_st";
 static char spi_st[] = "spi_st_ssc";
 static struct platform_device stssc_devices[] = {
-	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 2),
-	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 2),
+	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 0xff),
+	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 0xff),
 	STSSC_DEVICE(0x18042000, 117, 4, 0, 1, 0xff),
 };
 
