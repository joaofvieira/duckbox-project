*** linux-sh4-2.6.23.17_stm23_0119-orig/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2009-06-06 20:17:15.000000000 +0200
--- linux-sh4/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2009-06-10 23:17:19.000000000 +0200
***************
*** 292,299 ****
  static char i2c_st[] = "i2c_st";
  static char spi_st[] = "spi_st_ssc";
  static struct platform_device stssc_devices[] = {
! 	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 2),
! 	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 2),
  	STSSC_DEVICE(0x18042000, 117, 4, 0, 1, 0xff),
  };
  
--- 292,299 ----
  static char i2c_st[] = "i2c_st";
  static char spi_st[] = "spi_st_ssc";
  static struct platform_device stssc_devices[] = {
! 	STSSC_DEVICE(0x18040000, 119, 2, 0, 1, 0xff),
! 	STSSC_DEVICE(0x18041000, 118, 3, 0, 1, 0xff),
  	STSSC_DEVICE(0x18042000, 117, 4, 0, 1, 0xff),
  };
  
***************
*** 704,714 ****
  static struct platform_device stm_stasc_devices[] = {
  	STASC_DEVICE(0x18030000, 123, -1, -1, 0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
--- 704,714 ----
  static struct platform_device stm_stasc_devices[] = {
  	STASC_DEVICE(0x18030000, 123, -1, -1, 0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
*** linux-sh4-2.6.23.17_stm23_0119-orig/arch/sh/boards/st/mb442/setup.c	2009-06-06 20:17:14.000000000 +0200
--- linux-sh4/arch/sh/boards/st/mb442/setup.c	2009-06-11 18:09:12.000000000 +0200
***************
*** 19,36 ****
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
  #include <asm/irl.h>
  
! static int ascs[2] __initdata = { 2, 3 };
  
  void __init mb442_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7100 Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 19,62 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
  #include <asm/irl.h>
  
! /* Dagobert: ufs922 uses the micom device 
!  * so we dont need uart3
!  */
! static int ascs[2] __initdata = { 2};
! 
! const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
! const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
! 
! static struct bpa2_partition_desc bpa2_parts_table[] = {
! 	{
! 		.name  = "LMI_VID",
! 		.start = 0x10800000,
! 		.size  = 0x03800000,
! 		.flags = 0,
! 		.aka   = LMI_VID_partalias
! 	},
! 	{
! 		.name  = "LMI_SYS",
! 		.start = 0,
! 		.size  = 0x02600000,
! 		.flags = 0,
! 		.aka   = LMI_SYS_partalias
! 	}
! };
! 
  
  void __init mb442_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7100 Reference board initialisation\n");
  
  	stx7100_early_device_init();
!  	stb7100_configure_asc(ascs, 1, 0);
!  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
***************
*** 40,46 ****
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
--- 66,72 ----
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
***************
*** 113,124 ****
--- 139,154 ----
  
  static int mb442_phy_reset(void* bus)
  {
+ /* Dagobert: */
+    if (phy_reset_pin != NULL)
+    {
  	stpio_set_pin(phy_reset_pin, 1);
  	udelay(1);
  	stpio_set_pin(phy_reset_pin, 0);
  	udelay(1);
  	stpio_set_pin(phy_reset_pin, 1);
  
+    }
  	return 1;
  }
  
***************
*** 165,175 ****
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
! 	stx7100_configure_pwm(&pwm_private_info);
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
  	stx7100_configure_lirc(&lirc_scd);
  	stx7100_configure_pata(3, 1, IRL1_IRQ);
  
--- 195,205 ----
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
! 	//stx7100_configure_pwm(&pwm_private_info);
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
  	stx7100_configure_lirc(&lirc_scd);
  	stx7100_configure_pata(3, 1, IRL1_IRQ);
  
***************
*** 175,192 ****
  
  	vpp_pio = stpio_request_set_pin(2, 7, "flash_VPP", STPIO_OUT, 0);
  
  	phy_reset_pin = stpio_request_set_pin(2, 4, "ste100p_reset",
  					      STPIO_OUT, 1);
  	stx7100_configure_ethernet(0, 0, 0);
  
! 	/* Reset the SMSC 91C111 Ethernet chip */
  	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
  					     STPIO_OUT, 0);
  	udelay(1);
  	stpio_set_pin(smc91x_reset, 1);
  	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
! 
  	return platform_add_devices(mb442_devices,
  				    ARRAY_SIZE(mb442_devices));
  }
--- 205,229 ----
  
  	vpp_pio = stpio_request_set_pin(2, 7, "flash_VPP", STPIO_OUT, 0);
  
+ 	/* Dagobert: 2, 4 is Tuner B on ufs922: is there really a reset needed?
+ 	 * on stlinux22 this is not needed.
+ 	 * TODO: identify reset pin for ufs922 if any
+ 	 
  	phy_reset_pin = stpio_request_set_pin(2, 4, "ste100p_reset",
  					      STPIO_OUT, 1);
+ 	*/
+ 	phy_reset_pin = NULL;
+ 	
  	stx7100_configure_ethernet(0, 0, 0);
  
! 	/* Reset the SMSC 91C111 Ethernet chip 
  	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
  					     STPIO_OUT, 0);
  	udelay(1);
  	stpio_set_pin(smc91x_reset, 1);
  	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
! 	*/
  	return platform_add_devices(mb442_devices,
  				    ARRAY_SIZE(mb442_devices));
  }

*** linux-sh4/drivers/net/stmmac/stmmac_main.c	2010-02-07 22:14:38.470923501 +0100
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	2010-01-31 11:02:03.000000000 +0100
***************
*** 370,375 ****
--- 370,404 ----
  	return;
  }
  
+ #include <linux/ctype.h>
+ 
+ static unsigned long simple_strtoul2(const char *cp,char **endp,unsigned int base)
+ {
+ 	unsigned long result = 0,value;
+ 
+ 	if (*cp == '0') {
+ 		cp++;
+ 		if ((*cp == 'x') && isxdigit(cp[1])) {
+ 			base = 16;
+ 			cp++;
+ 		}
+ 		if (!base) {
+ 			base = 8;
+ 		}
+ 	}
+ 	if (!base) {
+ 		base = 10;
+ 	}
+ 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
+ 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
+ 		result = result*base + value;
+ 		cp++;
+ 	}
+ 	if (endp)
+ 		*endp = (char *)cp;
+ 	return result;
+ }
+ 
  /**
   * get_mac_addr
   * @ioaddr: device I/O address
***************
*** 378,391 ****
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
  
  	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
--- 407,453 ----
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
+ 
+ char g_env_mac[]="00:50:FD:00:00:00";
+ 
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
  
+     int env_size,reg,env_present=0, tmp_count;
+     char *s = NULL, *e,  es[] = "00:00:00:00:00:00";
+     unsigned char s_env_mac[64], v_env_mac[6];
+ 
  	/* Read the MAC address from the hardware */
! 	env_size = 17;
! 	memcpy(s_env_mac, g_env_mac, 17);
! 
! 	if (env_size > 0) {
! 			env_present = 1;
! 			s = s_env_mac;
! 		}
! 
! 	//by doliyu ...patch for mac address write error!
! 	for(tmp_count =0 ; tmp_count < 17; tmp_count++)
! 	{
! 		if(s_env_mac[tmp_count] == ' ')
! 			s_env_mac[tmp_count]='0';
! 		printk("s_env_mac[%d] = %c\n", tmp_count, s_env_mac[tmp_count]);
! 	}
! 	
! 	for (reg = 0; reg < 6; ++reg) { /* turn string into mac value */
! 		v_env_mac[reg] = s ? simple_strtoul2 (s, &e, 16) : 0;
! 		if (s)
! 			s = (*e) ? e + 1 : e;
! 	}
! 
!     printk("get ether addr = %x, %x, %x, %x, %x, %x \n", v_env_mac[0],v_env_mac[1],v_env_mac[2],v_env_mac[3],v_env_mac[4],v_env_mac[5]);
!     hi_addr = (int)(v_env_mac[5]) <<8 | (int)(v_env_mac[4]);
!     lo_addr = (int)(v_env_mac[3]) << 24 | (int)(v_env_mac[2]) << 16 | (int)(v_env_mac[1]) <<8 | v_env_mac[0];
! 
! //	hi_addr = readl(ioaddr + high);
! //	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
***************
*** 2309,2314 ****
--- 2371,2379 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }

*** linux-sh4-2.6.23.17_stm23_0119-orig/drivers/net/stmmac/stmmac_main.c	2009-06-06 20:17:15.000000000 +0200
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	2009-06-10 21:21:07.000000000 +0200
***************
*** 370,375 ****
--- 370,484 ----
  	return;
  }
  
+ /*added by doliyu*/
+ #define CFG_FLASH_BASE  	      0xA0000000
+ #define       CFG_ENV_IS_IN_FLASH     1 
+ #define CFG_ENV_OFFSET  	0x20000
+ #define CFG_ENV_ADDR		(CFG_FLASH_BASE + CFG_ENV_OFFSET)
+ #define CFG_ENV_SIZE		0x10000
+ #define CFG_ENV_SECT_SIZE	0x20000
+ 
+ #define CFG_ENV_IN_EEPROM
+ 
+ unsigned char env_get_char_memory (int index)
+ {
+ 	      return ( *((unsigned char *)(saved_command_line + index)) );
+ }
+ 
+ static int
+ envmatch (unsigned char *s1, int i2)
+ {
+ 
+       while (*s1 == env_get_char_memory(i2++))
+ 	      if (*s1++ == '=')
+ 		      return(i2);
+       if (*s1 == '\0' && env_get_char_memory(i2-1) == '=')
+ 	      return(i2);
+       return(-1);
+ }
+ 
+ unsigned char *env_get_addr (int index)
+ {
+       return ( ((unsigned char *)(saved_command_line + index)) );
+ }
+ 
+ char *getenv (unsigned char *name)
+ {
+       int i, nxt;
+ 
+ 
+       for (i=0; env_get_char_memory(i) != '\0'; i=nxt+1) {
+ 	      int val;
+ 
+ 	      for (nxt=i; env_get_char_memory(nxt) != '\0'; ++nxt) {
+ 		      if (nxt >= CFG_ENV_SIZE) {
+ 			      return (NULL);
+ 		      }
+ 	      }
+ 	      if ((val=envmatch(name, i)) < 0)
+ 		      continue;
+ 	      return (env_get_addr(val));
+       }
+ 
+       return (NULL);
+ }
+ int getenv_r (unsigned char *name, unsigned char *buf, unsigned len)
+ {
+       int i, nxt;
+ 
+       for (i=0; env_get_char_memory(i) != '\0'; i=nxt+1) {
+ 	      int val, n;
+ 
+ 	      for (nxt=i; env_get_char_memory(nxt) != '\0'; ++nxt) {
+ 		      if (nxt >= CFG_ENV_SIZE) {
+ 			      return (-1);
+ 		      }
+ 	      }
+ 	      if ((val=envmatch(name, i)) < 0)
+ 		      continue;
+ 	      /* found; copy out */
+ 	      n = 0;
+ 	      while ((len > n++) && (*buf++ = env_get_char_memory(val++)) != '\0')
+ 		      ;
+ 	      if (len == n)
+ 		      *buf = '\0';
+ 	      return (n);
+       }
+       return (-1);
+ }
+ 
+ 
+ #include <linux/ctype.h>
+ 
+ static unsigned long simple_strtoul2(const char *cp,char **endp,unsigned int base)
+ {
+       unsigned long result = 0,value;
+ 
+       if (*cp == '0') {
+ 	      cp++;
+ 	      if ((*cp == 'x') && isxdigit(cp[1])) {
+ 		      base = 16;
+ 		      cp++;
+ 	      }
+ 	      if (!base) {
+ 		      base = 8;
+ 	      }
+       }
+       if (!base) {
+ 	      base = 10;
+       }
+       while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
+ 	  ? toupper(*cp) : *cp)-'A'+10) < base) {
+ 	      result = result*base + value;
+ 	      cp++;
+       }
+       if (endp)
+ 	      *endp = (char *)cp;
+       return result;
+ }
+ 
+ 
+ 
  /**
   * get_mac_addr
   * @ioaddr: device I/O address
***************
*** 378,391 ****
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
! 	unsigned int hi_addr, lo_addr;
  
  	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
--- 487,543 ----
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
+ 
+ #ifdef CFG_ENV_IN_EEPROM
+ char g_env_mac[]="00:50:FD:00:00:00";
+ #endif
+ 
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
!     unsigned int hi_addr, lo_addr;
!     int env_size,reg,env_present=0, tmp_count;
!     char *s = NULL, *e,  es[] = "00:00:00:00:00:00";
!     unsigned char s_env_mac[64], v_env_mac[6];
! 
! #ifndef CFG_ENV_IN_EEPROM    
!       env_size = getenv_r ("ethaddr", s_env_mac, sizeof (s_env_mac));
!       if ((env_size > 0) && (env_size < sizeof (es))) {       /* exit if env is bad */
! 	      printk ("\n*** ERROR: ethaddr is not set properly!!\n");
! 	      return;
!       }
! 
!       
! #else
!       env_size = 17;
!       memcpy(s_env_mac, g_env_mac, 17);
! #endif
!       if (env_size > 0) {
! 		      env_present = 1;
! 		      s = s_env_mac;
! 	      }
! 
!       //by doliyu ...patch for mac address write error!
!       for(tmp_count =0 ; tmp_count < 17; tmp_count++)
!       {
! 	      if(s_env_mac[tmp_count] == ' ')
! 		      s_env_mac[tmp_count]='0';
! 	      printk("s_env_mac[%d] = %c\n", tmp_count, s_env_mac[tmp_count]);
!       }
!       
!       for (reg = 0; reg < 6; ++reg) { /* turn string into mac value */
! 	      v_env_mac[reg] = s ? simple_strtoul2 (s, &e, 16) : 0;
! 	      if (s)
! 		      s = (*e) ? e + 1 : e;
!       }
! 
!       printk("get ether addr = %x, %x, %x, %x, %x, %x \n", v_env_mac[0],v_env_mac[1],v_env_mac[2],v_env_mac[3],v_env_mac[4],v_env_mac[5]);
!       hi_addr = (int)(v_env_mac[5]) <<8 | (int)(v_env_mac[4]);
!       lo_addr = (int)(v_env_mac[3]) << 24 | (int)(v_env_mac[2]) << 16 | (int)(v_env_mac[1]) <<8 | v_env_mac[0];
  
  	/* Read the MAC address from the hardware */
! //	hi_addr = readl(ioaddr + high);
! //	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
***************
*** 2309,2314 ****
--- 2461,2471 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ #ifdef CFG_ENV_IN_EEPROM
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+  			memcpy(g_env_mac, opt + 8, 17);
+  		}
+ #endif
  	}
  	return 0;
  }
