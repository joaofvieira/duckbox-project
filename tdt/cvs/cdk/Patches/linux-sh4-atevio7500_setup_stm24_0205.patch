*** a/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
--- b/setup.c	2011-01-22 12:22:31.340928000 +0100
***************
*** 389,394 ****
--- 389,422 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock4 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

*** a/arch/sh/boards/mach-mb680/setup.c	2011-02-13 12:16:40.000000000 +0100
--- b/setup.c	2011-02-19 18:33:24.768890783 +0100
@@ -26,18 +26,42 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
+#include <linux/bpa2.h>
 #include <asm/irq-ilc.h>
 #include <mach/common.h>
 #include "../mach-st/mb705-epld.h"
+#include <linux/stm/pio.h>
 
 
 
 #define MB680_PIO_PHY_RESET stm_gpio(5, 5)
-#define MB680_PIO_PCI_SERR stm_gpio(6, 4)
-#define MB680_PIO_PCI_RESET stm_gpio(15, 6)
-#define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
-
 
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x05f00000, /* 95 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+ };
 
 static void __init mb680_setup(char** cmdline_p)
 {
@@ -49,74 +73,20 @@
 			.routing.asc2 = stx7105_asc2_pio4,
 			.hw_flow_control = 1,
 			.is_console = 1, });
-	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
-}
 
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
 
 
-static struct platform_device mb680_leds = {
-	.name = "leds-gpio",
-	.id = 0,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "LD5",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(2, 4),
-			}, {
-				.name = "LD6",
-				.gpio = stm_gpio(2, 3),
-			},
-		},
-	},
-};
-
-/*
- * mb680 rev C added software control of the PHY reset, and buffers which
- * allow isolation of the MII pins so that their use as MODE pins is not
- * compromised by the PHY.
- */
-
-/*
- * When connected to the mb705, MII reset is controlled by an EPLD register
- * on the mb705.
- * When used standalone a PIO pin is used, and J47-C must be fitted.
- *
- * Timings:
- *    PHY         | Reset low | Post reset stabilisation
- *    ------------+-----------+-------------------------
- *    DB83865     |   150uS   |         20mS
- *    LAN8700     |   100uS   |         800nS
- */
-#ifdef CONFIG_SH_ST_MB705
-static void ll_phy_reset(void)
-{
-	mb705_reset(EPLD_EMI_RESET_SW0, 150);
-}
-#else
-static void ll_phy_reset(void)
+static void mb680_phy_reset(void)
 {
 	gpio_set_value(MB680_PIO_PHY_RESET, 0);
-	udelay(150);
+	udelay(100);
 	gpio_set_value(MB680_PIO_PHY_RESET, 1);
 }
-#endif
-
-static int mb680_phy_reset(void *bus)
-{
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 1);
-	ll_phy_reset();
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 0);
-	mdelay(20);
-
-	return 0;
-}
 
 static struct plat_stmmacphy_data mb680_phy_private_data = {
-	/* National Semiconductor DP83865 (rev A/B) or SMSC 8700 (rev C) */
+	/* Micrel */
 	.bus_id = 0,
 	.phy_addr = -1,
 	.phy_mask = 0,
@@ -141,8 +111,105 @@
 	}
 };
 
+#ifdef FUP_CAN_FLASH_CONFIG
+static struct mtd_partition mtd_partition mb680_physmap_flash_partitions[] = {
+	{
+		.name = "U-BOOT",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00300000,
+		.offset = 0x00100000,
+	}, {
+		.name = "FW",
+		.size = 0x006E0000,
+		.offset = 0x00B20000,
+	}, {
+		.name = "EXT2",
+		.size = 0x00BE0000,
+		.offset = 0x01220000,
+	}, {
+		.name = "ROOT",
+		.size = 0x0021E0000,
+		.offset = 0x01E20000,
+	}, { 
+		.name = "EXT1",
+		.size = 0x006E0000,
+		.offset = 0x00420000,
+	}, { 
+		.name = "U-BOOT ENV",
+		.size = 0x00020000,
+		.offset = 0x00040000,
+	}, { 
+ 		.name = "Full", 
+ 		.size = MTDPART_SIZ_FULL, 
+		.offset = 0x00100000, 
+	}
+};
+#else
+static struct mtd_partition mb680_physmap_flash_partitions[] = {
+	{
+		.name = "U-BOOT",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00300000,
+		.offset = 0x00100000,
+	}, {
+		.name = "FW",
+		.size = 0x006E0000,
+		.offset = 0x00B20000,
+	}, {
+		.name = "VAR",
+		.size = 0x00BC0000,
+		.offset = 0x01220000,
+	}, {
+		.name = "ROOT",
+		.size = 0x001E00000,
+		.offset = 0x02200000,
+	}, {
+		.name = "SWAP (VOLATILE)",
+		.size = 0x006E0000,
+		.offset = 0x00420000,
+	}, { 
+		.name = "U-BOOT ENV",
+		.size = 0x00020000,
+		.offset = 0x00040000,
+	}, { 
+ 		.name = "Full", 
+ 		.size = MTDPART_SIZ_FULL, 
+ 		.offset = 0x00100000, 
+	}
+};
+#endif
+
+static struct physmap_flash_data mb680_physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mb680_physmap_flash_partitions),
+	.parts		= mb680_physmap_flash_partitions
+};
+
+static struct platform_device mb680_physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 64*1024*1024 - 1, //64MB
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &mb680_physmap_flash_data,
+	},
+};
+
 static struct platform_device *mb680_devices[] __initdata = {
-	&mb680_leds,
+	&mb680_physmap_flash,
 	&mb680_phy_device,
 };
 
@@ -158,79 +225,37 @@
 }
 #endif
 
-/*
- * J22-A must be removed, J22-B must be 2-3.
- */
-static struct stm_plat_pci_config mb680_pci_config = {
-	.pci_irq = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_DEFAULT,
-		[2] = PCI_PIN_DEFAULT,
-		[3] = PCI_PIN_UNUSED
-	},
-	.serr_irq = PCI_PIN_UNUSED, /* Modified in mb680_device_init() below */
-	.idsel_lo = 30,
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.pci_clk = 33333333,
-	/* When connected to the mb705, PCI reset is controlled by an EPLD
-	 * register on the mb705. When used standalone a PIO pin is used,
-	 * and J47-D, J9-G must be fitted. */
-#ifdef CONFIG_SH_ST_MB705
-	.pci_reset = mb705_epld_pci_reset,
-#else
-	.pci_reset_gpio = MB680_PIO_PCI_RESET,
-#endif
-};
-
-int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
-{
-       /* We can use the standard function on this board */
-       return stx7105_pcibios_map_platform_irq(&mb680_pci_config, pin);
-}
-
 void __init mbxxx_configure_audio_pins(void)
 {
+/*
+	//TDT: This blocks the scart audio pin -> commented out
 	stx7105_configure_audio(&(struct stx7105_audio_config) {
 			.pcm_player_0_output =
 					stx7105_pcm_player_0_output_6_channels,
 			.spdif_player_output_enabled = 1,
 			.pcm_reader_input_enabled =
 					cpu_data->type == CPU_STX7105, });
+*/
 }
 
 static int __init mb680_devices_init(void)
 {
-	/* Setup the PCI_SERR# PIO
-	 * J20-A - open, J27-E - closed */
-	if (gpio_request(MB680_PIO_PCI_SERR, "PCI_SERR#") == 0) {
-		gpio_direction_input(MB680_PIO_PCI_SERR);
-		mb680_pci_config.serr_irq = gpio_to_irq(MB680_PIO_PCI_SERR);
-		set_irq_type(mb680_pci_config.serr_irq, IRQ_TYPE_LEVEL_LOW);
-	} else {
-		printk(KERN_WARNING "mb680: Failed to claim PCI_SERR PIO!\n");
-	}
-	stx7105_configure_pci(&mb680_pci_config);
-
 	stx7105_configure_sata(0);
 
 	/* Valid only for mb680 rev. A & rev. B (they had two SATA lines) */
-	stx7105_configure_sata(1);
+	//TDT: Either way we don't have 2 SATA connectors -> commented out
+	/* stx7105_configure_sata(1); */
 
-	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
-			.out0 = stx7105_pwm_out0_pio13_0,
-			.out1 = stx7105_pwm_out1_disabled, });
+	stx7105_configure_ssc_i2c(0, &(struct stx7105_ssc_config) {
+			.routing.ssc1.sclk = stx7105_ssc0_sclk_pio2_2,
+			.routing.ssc1.mtsr = stx7105_ssc0_mtsr_pio2_3, });
 
-	/* NIM CD I2C bus*/
-	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+	/* NIM CD I2C bus */
+	/*stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
 			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
-			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
-	/* NIM AB/STRecord I2C bus*/
+			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });*/
+
+	/* NIM AB/STRecord I2C bus */
 	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
 			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
 			.routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5, });
@@ -251,7 +276,7 @@
 	 * alt	| 12[6]	J5B:1-2  J6G:open	14[7]	J10B:1-2  J11H:open
 	 */
 	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
-			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
+			.ovrcur_mode = stx7105_usb_ovrcur_disabled,
 			.pwr_enabled = 1,
 			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
 			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
@@ -261,28 +286,17 @@
 			.routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
 			.routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });
 
+	//TDT: This is a pio_set_pin request and below that the STPIO_OUT setting
 	gpio_request(MB680_PIO_PHY_RESET, "notPioResetMII");
 	gpio_direction_output(MB680_PIO_PHY_RESET, 1);
-	gpio_request(MB680_PIO_MII_BUS_SWITCH, "MIIBusSwitchnotOE");
-	gpio_direction_output(MB680_PIO_MII_BUS_SWITCH, 1);
 
 	stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
 			.mode = stx7105_ethernet_mode_mii,
-			.ext_clk = 1,
+			.ext_clk = 0,
 			.phy_bus = 0, });
 
-	/*
-	 * Check jumpers before using IR:
-	 * On the mb705:
-	 *	J25A : 1-2
-	 *	J25B : 1-2 (UHF), 2-3 (IR)
-	 * On the mb680:
-	 *	J15A : fitted
-	 */
-	stx7105_configure_lirc(&(struct stx7105_lirc_config) {
-			.rx_mode = stx7105_lirc_rx_mode_ir,
-			.tx_enabled = 1,
-			.tx_od_enabled = 1, });
+	/* enable optical out */
+	stpio_request_pin (10, 6, "opt_out", STPIO_ALT_OUT);
 
 	return platform_add_devices(mb680_devices, ARRAY_SIZE(mb680_devices));
 }
@@ -302,11 +316,6 @@
 
 static void __init mb680_init_irq(void)
 {
-#ifndef CONFIG_SH_ST_MB705
-	/* Configure STEM interrupts as active low. */
-	set_irq_type(ILC_EXT_IRQ(1), IRQ_TYPE_LEVEL_LOW);
-	set_irq_type(ILC_EXT_IRQ(2), IRQ_TYPE_LEVEL_LOW);
-#endif
 }
 
 struct sh_machine_vector mv_mb680 __initmv = {
--- a/drivers/net/stmmac/common.h	2011-06-03 05:27:07.059694029 -0700
+++ a/drivers/net/stmmac/common.h	2011-06-03 05:25:45.000000000 -0700
@@ -220,7 +220,7 @@
 	void (*set_umac_addr) (void __iomem *ioaddr, unsigned char *addr,
 			       unsigned int reg_n);
 	void (*get_umac_addr) (void __iomem *ioaddr, unsigned char *addr,
-			       unsigned int reg_n);
+			       unsigned int reg_n, char* ethaddr);
 };
 
 struct mac_link {
@@ -248,5 +248,5 @@
 extern void stmmac_set_mac_addr(void __iomem *ioaddr, u8 addr[6],
 				unsigned int high, unsigned int low);
 extern void stmmac_get_mac_addr(void __iomem *ioaddr, unsigned char *addr,
-				unsigned int high, unsigned int low);
+				unsigned int high, unsigned int low, char* ethaddr);
 extern void dwmac_dma_flush_tx_fifo(void __iomem *ioaddr);
--- a/drivers/net/stmmac/dwmac1000_core.c	2011-06-03 05:30:44.979694180 -0700
+++ a/drivers/net/stmmac/dwmac1000_core.c	2011-06-03 03:46:08.000000000 -0700
@@ -81,10 +81,10 @@
 }
 
 static void dwmac1000_get_umac_addr(void __iomem *ioaddr, unsigned char *addr,
-				unsigned int reg_n)
+				unsigned int reg_n, char* ethaddr)
 {
 	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
-				GMAC_ADDR_LOW(reg_n));
+				GMAC_ADDR_LOW(reg_n), ethaddr);
 }
 
 static void dwmac1000_set_filter(struct net_device *dev)
--- a/drivers/net/stmmac/dwmac100_core.c	2011-06-03 05:30:15.883693990 -0700
+++ a/drivers/net/stmmac/dwmac100_core.c	2011-06-03 03:46:08.000000000 -0700
@@ -94,9 +94,9 @@
 }
 
 static void dwmac100_get_umac_addr(void __iomem *ioaddr, unsigned char *addr,
-				   unsigned int reg_n)
+				   unsigned int reg_n, char* ethaddr)
 {
-	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW);
+	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW, ethaddr);
 }
 
 static void dwmac100_set_filter(struct net_device *dev)
--- a/drivers/net/stmmac/dwmac_lib.c	2011-06-03 05:29:36.627694036 -0700
+++ a/drivers/net/stmmac/dwmac_lib.c	2011-06-03 03:46:08.000000000 -0700
@@ -238,21 +238,27 @@
 	writel(data, ioaddr + low);
 }
 
-void stmmac_get_mac_addr(void __iomem *ioaddr, unsigned char *addr,
-			 unsigned int high, unsigned int low)
+static inline unsigned char hex(char ch)
 {
-	unsigned int hi_addr, lo_addr;
-
-	/* Read the MAC address from the hardware */
-	hi_addr = readl(ioaddr + high);
-	lo_addr = readl(ioaddr + low);
+	if (ch >= 'a' && ch <= 'f')
+		return ch-'a'+10;
+	if (ch >= 'A' && ch <= 'F')
+		return ch-'A'+10;
+	if (ch >= '0' && ch <= '9')
+		return ch-'0';
+	return -1;
+}
 
-	/* Extract the MAC address from the high and low words */
-	addr[0] = lo_addr & 0xff;
-	addr[1] = (lo_addr >> 8) & 0xff;
-	addr[2] = (lo_addr >> 16) & 0xff;
-	addr[3] = (lo_addr >> 24) & 0xff;
-	addr[4] = hi_addr & 0xff;
-	addr[5] = (hi_addr >> 8) & 0xff;
+void stmmac_get_mac_addr(void __iomem *ioaddr, unsigned char *addr,
+			 unsigned int high, unsigned int low, char* ethaddr)
+{
+	int i, j;
+	for(i = 0, j = 0; i < 6; i++)
+	{
+		addr[i] = (hex(ethaddr[j])<<4) + hex(ethaddr[j + 1]);
+		j += 3;
+	}
+	printk("PARSE CMDLINE: %s\n", ethaddr);
+	printk("ETHADDR: %02X:%02X:%02X:%02X:%02X:%02X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
 }
 
--- a/drivers/net/stmmac/stmmac_main.c	2011-06-03 05:33:39.111694010 -0700
+++ a/drivers/net/stmmac/stmmac_main.c	2011-06-03 03:46:08.000000000 -0700
@@ -133,6 +133,8 @@
 module_param(buf_sz, int, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(buf_sz, "DMA buffer size");
 
+static char g_env_mac[] = "00:00:00:00:00:00";
+
 static const u32 default_msg_level = (NETIF_MSG_DRV | NETIF_MSG_PROBE |
 				      NETIF_MSG_LINK | NETIF_MSG_IFUP |
 				      NETIF_MSG_IFDOWN | NETIF_MSG_TIMER);
@@ -1512,7 +1514,7 @@
 
 	/* Get the MAC address */
 	priv->hw->mac->get_umac_addr((void __iomem *) dev->base_addr,
-				     dev->dev_addr, 0);
+				     dev->dev_addr, 0, g_env_mac);
 
 	if (!is_valid_ether_addr(dev->dev_addr))
 		pr_warning("\tno valid MAC address;"
@@ -1968,6 +1970,8 @@
 		else if (!strncmp(opt, "tmrate:", 7))
 			strict_strtoul(opt + 7, 0, (unsigned long *)&tmrate);
 #endif
+		else if( !strncmp(opt, "ethaddr:", 8))
+			memcpy(g_env_mac, opt + 8, 17);
 	}
 	return 0;
 }
