--- orig-linux-2.6.17.14_stm22_0040/kernel/softirq.c	2006-06-18 03:49:35.000000000 +0200
+++ linux-2.6.17.14_stm22_0040/kernel/softirq.c	2007-03-24 04:48:25.000000000 +0100
@@ -47,6 +47,14 @@
 static DEFINE_PER_CPU(struct task_struct *, ksoftirqd);
 
 /*
+ * Mask of SOFTIRQ's we don't want to handle at IRQ level, but always
+ * defer to ksoftirqd. Normally this should be 0, but this can be
+ * used to defer tasklets for example.
+ */
+// #define SOFTIRQ_IRQ_MASK (0)
+#define SOFTIRQ_IRQ_MASK ((1UL << TASKLET_SOFTIRQ) | (1UL << NET_TX_SOFTIRQ) | (1UL << NET_RX_SOFTIRQ))
+
+/*
  * we cannot loop indefinitely here to avoid userspace starvation,
  * but we also don't want to introduce a worst case 1/HZ latency
  * to the pending events, so lets the scheduler to balance
@@ -72,7 +80,11 @@
  */
 #define MAX_SOFTIRQ_RESTART 10
 
-asmlinkage void __do_softirq(void)
+/*
+ * mask is a mask of any SOFTIRQ's we do NOT want to handle in
+ * this call.
+ */
+static asmlinkage void __do_softirq(__u32 mask)
 {
 	struct softirq_action *h;
 	__u32 pending;
@@ -85,7 +97,8 @@
 	cpu = smp_processor_id();
 restart:
 	/* Reset the pending bitmask before enabling irqs */
-	set_softirq_pending(0);
+	set_softirq_pending(pending & mask);
+	pending &= ~mask;
 
 	local_irq_enable();
 
@@ -103,7 +116,7 @@
 	local_irq_disable();
 
 	pending = local_softirq_pending();
-	if (pending && --max_restart)
+	if ((pending & (~mask)) && --max_restart)
 		goto restart;
 
 	if (pending)
@@ -127,7 +140,7 @@
 	pending = local_softirq_pending();
 
 	if (pending)
-		__do_softirq();
+		__do_softirq(0);
 
 	local_irq_restore(flags);
 }
@@ -154,9 +167,22 @@
 EXPORT_SYMBOL(local_bh_enable);
 
 #ifdef __ARCH_IRQ_EXIT_IRQS_DISABLED
-# define invoke_softirq()	__do_softirq()
+# define invoke_softirq()	__do_softirq(SOFTIRQ_IRQ_MASK)
 #else
-# define invoke_softirq()	do_softirq()
+static void invoke_softirq(void)
+{
+	__u32 pending;
+	unsigned long flags;
+
+	local_irq_save(flags);
+
+	pending = local_softirq_pending();
+
+	if (pending)
+		__do_softirq(SOFTIRQ_IRQ_MASK);
+
+	local_irq_restore(flags);
+}
 #endif
 
 /*
@@ -350,7 +376,8 @@
 
 static int ksoftirqd(void * __bind_cpu)
 {
-	set_user_nice(current, 19);
+//	set_user_nice(current, 19);
+	set_user_nice(current, -5);
 	current->flags |= PF_NOFREEZE;
 
 	set_current_state(TASK_INTERRUPTIBLE);
