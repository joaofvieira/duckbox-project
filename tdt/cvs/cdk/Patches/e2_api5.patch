diff -rcN enigma2_orig/lib/dvb/frontend.cpp enigma2/lib/dvb/frontend.cpp
*** enigma2_orig/lib/dvb/frontend.cpp	Sat Feb 27 19:33:11 2010
--- enigma2/lib/dvb/frontend.cpp	Sat Mar  6 03:35:33 2010
***************
*** 6,11 ****
--- 6,12 ----
  #include <unistd.h>
  #include <fcntl.h>
  #include <sys/ioctl.h>
+ #include <sys/time.h>
  
  #ifndef I2C_SLAVE_FORCE
  #define I2C_SLAVE_FORCE	0x0706
***************
*** 49,57 ****
  #define parm_u_ofdm_transmission_mode parm.u.ofdm.transmission_mode
  #define parm_u_ofdm_guard_interval parm.u.ofdm.guard_interval
  #define parm_u_ofdm_hierarchy_information parm.u.ofdm.hierarchy_information
! #ifdef FEC_9_10
! 	#warning "FEC_9_10 already exist in dvb api ... it seems it is now ready for DVB-S2"
! #else
  	#define FEC_S2_QPSK_1_2 (fe_code_rate_t)(FEC_AUTO+1)
  	#define FEC_S2_QPSK_2_3 (fe_code_rate_t)(FEC_S2_QPSK_1_2+1)
  	#define FEC_S2_QPSK_3_4 (fe_code_rate_t)(FEC_S2_QPSK_2_3+1)
--- 50,56 ----
  #define parm_u_ofdm_transmission_mode parm.u.ofdm.transmission_mode
  #define parm_u_ofdm_guard_interval parm.u.ofdm.guard_interval
  #define parm_u_ofdm_hierarchy_information parm.u.ofdm.hierarchy_information
! #if HAVE_DVB_API_VERSION < 5
  	#define FEC_S2_QPSK_1_2 (fe_code_rate_t)(FEC_AUTO+1)
  	#define FEC_S2_QPSK_2_3 (fe_code_rate_t)(FEC_S2_QPSK_1_2+1)
  	#define FEC_S2_QPSK_3_4 (fe_code_rate_t)(FEC_S2_QPSK_2_3+1)
***************
*** 70,75 ****
--- 69,84 ----
  	#define FEC_S2_8PSK_3_5 (fe_code_rate_t)(FEC_S2_8PSK_8_9+1)
  	#define FEC_S2_8PSK_4_5 (fe_code_rate_t)(FEC_S2_8PSK_3_5+1)
  	#define FEC_S2_8PSK_9_10 (fe_code_rate_t)(FEC_S2_8PSK_4_5+1)
+ #else
+ 	#define FEC_S2_QPSK_1_2 (fe_code_rate_t)(FEC_1_2)
+ 	#define FEC_S2_QPSK_2_3 (fe_code_rate_t)(FEC_2_3)
+ 	#define FEC_S2_QPSK_3_4 (fe_code_rate_t)(FEC_3_4)
+ 	#define FEC_S2_QPSK_5_6 (fe_code_rate_t)(FEC_5_6)
+ 	#define FEC_S2_QPSK_7_8 (fe_code_rate_t)(FEC_7_8)
+ 	#define FEC_S2_QPSK_8_9 (fe_code_rate_t)(FEC_8_9)
+ 	#define FEC_S2_QPSK_3_5 (fe_code_rate_t)(FEC_3_5)
+ 	#define FEC_S2_QPSK_4_5 (fe_code_rate_t)(FEC_4_5)
+ 	#define FEC_S2_QPSK_9_10 (fe_code_rate_t)(FEC_9_10)
  #endif
  #endif
  
***************
*** 103,108 ****
--- 112,119 ----
  		}
  #endif
  
+ #define DTV_S2_PROPERTIES_NUM  10
+ 
  void eDVBDiseqcCommand::setCommandString(const char *str)
  {
  	if (!str)
***************
*** 416,423 ****
  	{
  	case iDVBFrontend::feSatellite:
  	{
! 			/* high symbol rate transponders tune faster, due to 
! 				requiring less zigzag and giving more symbols faster. 
  
  				5s are definitely not enough on really low SR when
  				zigzag has to find the exact frequency first.
--- 427,434 ----
  	{
  	case iDVBFrontend::feSatellite:
  	{
! 			/* high symbol rate transponders tune faster, due to
! 				requiring less zigzag and giving more symbols faster.
  
  				5s are definitely not enough on really low SR when
  				zigzag has to find the exact frequency first.
***************
*** 477,482 ****
--- 488,498 ----
  
  int eDVBFrontend::openFrontend()
  {
+ #if HAVE_DVB_API_VERSION >= 5
+     struct dtv_property   p[1];
+   	struct dtv_properties cmdseq;
+ #endif
+ 
  	if (m_state != stateClosed)
  		return -1;  // already opened
  
***************
*** 503,508 ****
--- 519,538 ----
  	}
  	else
  		eWarning("frontend %d already opened", m_dvbid);
+ 
+ #if HAVE_DVB_API_VERSION >= 5
+ 	memset(p, 0, sizeof(dtv_property));
+ 	p[0].cmd = DTV_CLEAR;
+     cmdseq.num = 1;
+     cmdseq.props = p;
+ 	if (::ioctl(m_fd, FE_SET_PROPERTY, &cmdseq) < 0) {
+         eWarning("ioctl FE_SET_PROPERTY: DTV_CLEAR failed");
+         ::close(m_fd);
+         m_fd = -1;
+         return -1;
+     }
+ #endif
+ 
  	if (m_type == -1)
  	{
  		if (::ioctl(m_fd, FE_GET_INFO, &fe_info) < 0)
***************
*** 979,989 ****
  	case FEC_3_4: tmp = eDVBFrontendParametersSatellite::FEC_3_4; break;
  	case FEC_5_6: tmp = eDVBFrontendParametersSatellite::FEC_5_6; break;
  	case FEC_7_8: tmp = eDVBFrontendParametersSatellite::FEC_7_8; break;
  	case FEC_NONE: tmp = eDVBFrontendParametersSatellite::FEC_None; break;
  	default:
  	case FEC_AUTO: tmp = eDVBFrontendParametersSatellite::FEC_Auto; break;
! #if HAVE_DVB_API_VERSION >=3
! 	case FEC_S2_8PSK_1_2: 
  	case FEC_S2_QPSK_1_2: tmp = eDVBFrontendParametersSatellite::FEC_1_2; break;
  	case FEC_S2_8PSK_2_3:
  	case FEC_S2_QPSK_2_3: tmp = eDVBFrontendParametersSatellite::FEC_2_3; break;
--- 1009,1025 ----
  	case FEC_3_4: tmp = eDVBFrontendParametersSatellite::FEC_3_4; break;
  	case FEC_5_6: tmp = eDVBFrontendParametersSatellite::FEC_5_6; break;
  	case FEC_7_8: tmp = eDVBFrontendParametersSatellite::FEC_7_8; break;
+ #if HAVE_DVB_API_VERSION >= 5
+ 	case FEC_3_5: tmp = eDVBFrontendParametersSatellite::FEC_3_5; break;
+ 	case FEC_4_5: tmp = eDVBFrontendParametersSatellite::FEC_4_5; break;
+ 	case FEC_8_9: tmp = eDVBFrontendParametersSatellite::FEC_8_9; break;
+ 	case FEC_9_10: tmp = eDVBFrontendParametersSatellite::FEC_9_10; break;
+ #endif
  	case FEC_NONE: tmp = eDVBFrontendParametersSatellite::FEC_None; break;
  	default:
  	case FEC_AUTO: tmp = eDVBFrontendParametersSatellite::FEC_Auto; break;
! #if HAVE_DVB_API_VERSION < 5
! 	case FEC_S2_8PSK_1_2:
  	case FEC_S2_QPSK_1_2: tmp = eDVBFrontendParametersSatellite::FEC_1_2; break;
  	case FEC_S2_8PSK_2_3:
  	case FEC_S2_QPSK_2_3: tmp = eDVBFrontendParametersSatellite::FEC_2_3; break;
***************
*** 1193,1198 ****
--- 1229,1237 ----
  
  void eDVBFrontend::getTransponderData(ePyObject dest, bool original)
  {
+     dvb_frontend_event event;
+     int ret = -1;
+ 
  	if (dest && PyDict_Check(dest))
  	{
  		switch(m_type)
***************
*** 1204,1214 ****
  				FRONTENDPARAMETERS front;
  				if (m_fd == -1 && !original)
  					original = true;
! 				else if (ioctl(m_fd, FE_GET_FRONTEND, &front)<0)
  				{
! 					eDebug("FE_GET_FRONTEND failed (%m)");
  					original = true;
  				}
  				{
  					const FRONTENDPARAMETERS &parm = original || m_simulate ? this->parm : front;
  					long tmp = eDVBFrontendParametersSatellite::Inversion_Unknown;
--- 1243,1256 ----
  				FRONTENDPARAMETERS front;
  				if (m_fd == -1 && !original)
  					original = true;
! // 				else if (ioctl(m_fd, FE_GET_FRONTEND, &front)<0)
! 				else if ((ret = ioctl(m_fd, FE_GET_EVENT, &event)) < 0)
  				{
! 					eDebug("FE_GET_EVENT failed (%m)");
  					original = true;
  				}
+ 				else if (ret >= 0)
+ 				    front = event.parameters;
  				{
  					const FRONTENDPARAMETERS &parm = original || m_simulate ? this->parm : front;
  					long tmp = eDVBFrontendParametersSatellite::Inversion_Unknown;
***************
*** 1219,1228 ****
  							break;
  						case INVERSION_OFF:
  							tmp = eDVBFrontendParametersSatellite::Inversion_Off;
  						default:
  							break;
  					}
! 					PutToDict(dest, "inversion", tmp);
  
  					switch(m_type)
  					{
--- 1261,1273 ----
  							break;
  						case INVERSION_OFF:
  							tmp = eDVBFrontendParametersSatellite::Inversion_Off;
+ 							break;
  						default:
  							break;
  					}
! 
! 					if (tmp)
! 						PutToDict(dest, "inversion", tmp);
  
  					switch(m_type)
  					{
***************
*** 1335,1340 ****
--- 1380,1386 ----
  	eDVBFrontend *sec_fe = this;
  	eDVBRegisteredFrontend *regFE = 0;
  	long tmp = m_data[LINKED_PREV_PTR];
+ 
  	while ( tmp != -1 )
  	{
  		eDVBRegisteredFrontend *prev = (eDVBRegisteredFrontend *)tmp;
***************
*** 1703,1713 ****
--- 1749,1844 ----
  		eDebug("setting frontend %d", m_dvbid);
  		m_sn->start();
  		feEvent(-1);
+ #if HAVE_DVB_API_VERSION >= 5
+ 
+ 		if (m_type == feSatellite) {
+             struct dtv_property     p[DTV_S2_PROPERTIES_NUM];
+             struct dtv_properties   cmdseq;
+ 
+             memset(p, 0, sizeof(dtv_property) * DTV_S2_PROPERTIES_NUM);
+ 
+             p[0].cmd = DTV_DELIVERY_SYSTEM;
+             p[2].cmd = DTV_MODULATION;
+             if (!m_delivery_system) {
+                 p[0].u.data = SYS_DVBS;
+                 p[2].u.data = QPSK;
+             }
+             else {
+                 p[0].u.data = SYS_DVBS2;
+                 if (m_modulation == 2) // M8PSK
+                     p[2].u.data = PSK_8;
+                 else
+                     p[2].u.data = QPSK;
+             }
+ 
+             p[1].cmd = DTV_FREQUENCY;       p[1].u.data = parm.frequency;
+             p[3].cmd = DTV_SYMBOL_RATE;     p[3].u.data = parm.u.qpsk.symbol_rate;
+             p[4].cmd = DTV_INNER_FEC;
+             p[5].cmd = DTV_INVERSION;       p[5].u.data = parm.inversion;
+             p[6].cmd = DTV_ROLLOFF;         p[6].u.data = ROLLOFF_35;
+             p[7].cmd = DTV_BANDWIDTH_HZ;    p[7].u.data = 0;
+             p[8].cmd = DTV_PILOT;           p[8].u.data = PILOT_AUTO;
+             p[9].cmd = DTV_TUNE;            p[9].u.data = 0;
+ 
+             // FEC: DVB-S
+             switch(parm_u_qpsk_fec_inner) {
+                 case FEC_1_2:
+                     p[4].u.data = FEC_1_2;
+                     break;
+                 case FEC_2_3:
+                     p[4].u.data = FEC_2_3;
+                     break;
+                 case FEC_3_4:
+                     p[4].u.data = FEC_3_4;
+                     break;
+                 case FEC_3_5:
+                     p[4].u.data = FEC_3_5;
+                     break;
+                 case FEC_4_5:
+                     p[4].u.data = FEC_4_5;
+                     break;
+                 case FEC_5_6:
+                     p[4].u.data = FEC_5_6;
+                     break;
+                 case FEC_7_8:
+                     p[4].u.data = FEC_7_8;
+                     break;
+                 case FEC_8_9:
+                     p[4].u.data = FEC_8_9;
+                     break;
+                 case FEC_9_10:
+                     p[4].u.data = FEC_9_10;
+                     break;
+                 case FEC_NONE:
+                     p[4].u.data = FEC_NONE;
+                 default:
+                 case FEC_AUTO:
+                     p[4].u.data = FEC_AUTO;
+                     break;
+             }
+ 
+             cmdseq.num = DTV_S2_PROPERTIES_NUM;
+             cmdseq.props = p;
+             if (::ioctl(m_fd, FE_SET_PROPERTY, &cmdseq) < 0) {
+                 perror("FE_SET_PROPERTY failed");
+                 return;
+             }
+         }
+         else {
+             if (ioctl(m_fd, FE_SET_FRONTEND, &parm) == -1) {
+                 perror("FE_SET_FRONTEND failed");
+                 return;
+             }
+ 
+             return;
+         }
+ #else
  		if (ioctl(m_fd, FE_SET_FRONTEND, &parm) == -1)
  		{
  			perror("FE_SET_FRONTEND failed");
  			return;
  		}
+ #endif
  	}
  }
  
***************
*** 1753,1758 ****
--- 1884,1890 ----
  			feparm.fec,
  			feparm.orbital_position);
  #endif
+         m_delivery_system = feparm.system;
  		m_cur_pol = feparm.polarisation;
  		m_cur_orbpos = feparm.orbital_position;
  		parm_u_qpsk_symbol_rate = feparm.symbol_rate;
***************
*** 1832,1838 ****
  					eDebugNoSimulate("no valid fec for DVB-S2 set.. abort !!");
  					return -EINVAL;
  			}
! #if not defined(__sh__) 
  			parm_inversion |= (feparm.rolloff << 2); // Hack.. we use bit 2..3 of inversion param for rolloff
  			parm_inversion |= (feparm.pilot << 4); // Hack.. we use bit 4..5 of inversion param for pilot
  #else
--- 1964,1970 ----
  					eDebugNoSimulate("no valid fec for DVB-S2 set.. abort !!");
  					return -EINVAL;
  			}
! #if not defined(__sh__)
  			parm_inversion |= (feparm.rolloff << 2); // Hack.. we use bit 2..3 of inversion param for rolloff
  			parm_inversion |= (feparm.pilot << 4); // Hack.. we use bit 4..5 of inversion param for pilot
  #else
***************
*** 1841,1847 ****
  			int hack;
  
  			hack = (int) parm_inversion;
! 			
  			hack |= (int) (feparm.rolloff << 2); // Hack.. we use bit 2..3 of inversion param for rolloff
  			hack |= (int) (feparm.pilot << 4); // Hack.. we use bit 4..5 of inversion param for pilot
  
--- 1973,1979 ----
  			int hack;
  
  			hack = (int) parm_inversion;
! 
  			hack |= (int) (feparm.rolloff << 2); // Hack.. we use bit 2..3 of inversion param for rolloff
  			hack |= (int) (feparm.pilot << 4); // Hack.. we use bit 4..5 of inversion param for pilot
  
***************
*** 2138,2143 ****
--- 2270,2276 ----
  		res=prepare_sat(feparm, timeout);
  		if (res)
  			goto tune_error;
+         m_modulation = feparm.modulation;
  
  		break;
  	}
***************
*** 2293,2301 ****
  	}
  	if (m_simulate)
  		return 0;
! #if HAVE_DVB_API_VERSION < 3	
  	return ::ioctl(m_secfd, SEC_SET_TONE, tone);
! #else	
  	return ::ioctl(m_fd, FE_SET_TONE, tone);
  #endif
  }
--- 2426,2434 ----
  	}
  	if (m_simulate)
  		return 0;
! #if HAVE_DVB_API_VERSION < 3
  	return ::ioctl(m_secfd, SEC_SET_TONE, tone);
! #else
  	return ::ioctl(m_fd, FE_SET_TONE, tone);
  #endif
  }
diff -rcN enigma2_orig/lib/dvb/frontend.h enigma2/lib/dvb/frontend.h
*** enigma2_orig/lib/dvb/frontend.h	Sat Feb 27 19:33:11 2010
--- enigma2/lib/dvb/frontend.h	Fri Mar  5 02:22:16 2010
***************
*** 77,84 ****
--- 77,86 ----
  	int m_fd;
  	bool m_need_rotor_workaround;
  	bool m_can_handle_dvbs2;
+ 	int m_modulation;
  	char m_filename[128];
  	char m_description[128];
+     int m_delivery_system;
  #if HAVE_DVB_API_VERSION < 3
  	int m_secfd;
  	char m_sec_filename[128];
