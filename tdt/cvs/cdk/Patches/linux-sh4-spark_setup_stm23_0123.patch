*** a/drivers/mtd/chips/cfi_probe.c	2011-01-02 21:05:30.000000000 +0100
--- b/cfi_probe.c	2011-01-05 20:38:36.087467593 +0100
***************
*** 255,260 ****
--- 255,276 ----
  	for (i=0; i<cfi->cfiq->NumEraseRegions; i++) {
  		cfi->cfiq->EraseRegionInfo[i] = le32_to_cpu(cfi->cfiq->EraseRegionInfo[i]);
  
+ 	/* kdhong */
+ 	printk( "CFI MFR = %x DEV = %x\n", cfi->mfr, cfi->id );
+ 
+ 	if( cfi->mfr == 0x00c2 && cfi->id == 0x227e )
+ 	{
+ 		int devsize = (1 << cfi->cfiq->DevSize) * cfi->interleave;
+ 
+ 		printk( "devsize = %x\n", devsize );
+ 
+ 		if( devsize == 0x400000 )
+ 		{
+ 			cfi->cfiq->EraseRegionInfo[i] = 0x100003f;
+ 		}
+ 	}
+ 	/* kdhong */
+ 
  #ifdef DEBUG_CFI
  		printk("  Erase Region #%d: BlockSize 0x%4.4X bytes, %d blocks\n",
  		       i, (cfi->cfiq->EraseRegionInfo[i] >> 8) & ~0xff,
*** a/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2011-01-05 22:00:04.000000000 +0100
--- b/setup-stx7111.c	2011-01-06 18:04:49.738959174 +0100
***************
*** 237,242 ****
--- 237,255 ----
  		platform_device_register(&stssc_devices[i]);
  	}
  
+         /* some additional sysconfig settings to enable i2c, cic and cec */
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 0, 0, "cic");
+         sysconf_write(ssc_sc, 1);
+ 
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 17, 17, "cic");
+         sysconf_write(ssc_sc, 1);
+ 
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 8, 8, "cec");
+         sysconf_write(ssc_sc, 1);
+ 
+         ssc_sc = sysconf_claim(SYS_CFG, 7, 15, 15, "i2c");
+         sysconf_write(ssc_sc, 1);
+ 
  	/* I2C buses number reservation (to prevent any hot-plug device
  	 * from using it) */
  #ifdef CONFIG_I2C_BOARDINFO
***************
*** 390,401 ****
  	STASC_DEVICE(0xfd030000, evt2irq(0x1160), 11, 15,
  		     0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0xfd031000, evt2irq(0x1140), 12, 16,
  		     1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0xfd032000, evt2irq(0x1120), 13, 17,
! 		     4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  	STASC_DEVICE(0xfd033000, evt2irq(0x1100), 14, 18,
  		     5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
--- 403,417 ----
  	STASC_DEVICE(0xfd030000, evt2irq(0x1160), 11, 15,
  		     0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
+ //console
  	STASC_DEVICE(0xfd031000, evt2irq(0x1140), 12, 16,
  		     1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! //fp
! 	STASC_DEVICE(0xfd032000, evt2irq(0x1120), /* 13 */ -1, /*17 */ -1,
! 		     4, 3, 2, /*4 konfetti */ -1, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
+ 
  	STASC_DEVICE(0xfd033000, evt2irq(0x1100), 14, 18,
  		     5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
***************
*** 468,474 ****
  			break;
  		}
  
! 		pdev->id = i;
  		((struct stasc_uart_data*)(pdev->dev.platform_data))->flags = flags;
  		stasc_configured_devices[stasc_configured_devices_count++] = pdev;
  	}
--- 484,491 ----
  			break;
  		}
  
!                 pdev->id = i;
!                 
  		((struct stasc_uart_data*)(pdev->dev.platform_data))->flags = flags;
  		stasc_configured_devices[stasc_configured_devices_count++] = pdev;
  	}
***************
*** 545,564 ****
  	platform_device_register(&lirc_device);
  }
  
! void __init stx7111_configure_nand(struct platform_device *pdev)
  {
! 	/* EMI Bank base address */
! 	/*  - setup done in stm_nand_emi probe */
  
! 	/* NAND Controller base address */
! 	pdev->resource[0].start	= 0xFE701000;
! 	pdev->resource[0].end	= 0xFE701FFF;
  
! 	/* NAND Controller IRQ */
! 	pdev->resource[1].start = evt2irq(0x14c0);
! 	pdev->resource[1].end	= evt2irq(0x14c0);
  
! 	platform_device_register(pdev);
  }
  
  
--- 562,680 ----
  	platform_device_register(&lirc_device);
  }
  
! /* NAND Resources ---------------------------------------------------------- */
! 
! static void nand_cmd_ctrl(struct mtd_info *mtd, int cmd, unsigned int ctrl)
  {
! 	struct nand_chip *this = mtd->priv;
! 
! 	if (ctrl & NAND_CTRL_CHANGE) {
! 
! 		if (ctrl & NAND_CLE) {
! 			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W |
! 						   (unsigned int)(1 << 17));
! 		}
! 		else {
! 			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W &
! 						   ~(unsigned int)(1 << 17));
! 		}
! 
! 		if (ctrl & NAND_ALE) {
! 			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W |
! 						   (unsigned int)(1 << 18));
! 		}
! 		else {
! 			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W &
! 						   ~(unsigned int)(1 << 18));
! 		}
! 	}
! 
! 	if (cmd != NAND_CMD_NONE) {
! 		writeb(cmd, this->IO_ADDR_W);
! 	}
! }
! 
! static void nand_write_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
! {
! 	int i;
! 	struct nand_chip *chip = mtd->priv;
! 
! 	/* write buf up to 4-byte boundary */
! 	while ((unsigned int)buf & 0x3) {
! 		writeb(*buf++, chip->IO_ADDR_W);
! 		len--;
! 	}
! 
! 	writesl(chip->IO_ADDR_W, buf, len/4);
! 
! 	/* mop up trailing bytes */
! 	for (i = (len & ~0x3); i < len; i++) {
! 		writeb(buf[i], chip->IO_ADDR_W);
! 	}
! }
! 
! static void nand_read_buf(struct mtd_info *mtd, uint8_t *buf, int len)
! {
! 	int i;
! 	struct nand_chip *chip = mtd->priv;
! 
! 	/* read buf up to 4-byte boundary */
! 	while ((unsigned int)buf & 0x3) {
! 		*buf++ = readb(chip->IO_ADDR_R);
! 		len--;
! 	}
! 
! 	readsl(chip->IO_ADDR_R, buf, len/4);
! 
! 	/* mop up trailing bytes */
! 	for (i = (len & ~0x3); i < len; i++) {
! 		buf[i] = readb(chip->IO_ADDR_R);
! 	}
! }
! 
! static const char *nand_part_probes[] = { "cmdlinepart", NULL };
! 
! static struct platform_device nand_flash[] = {
! 	EMI_NAND_DEVICE(0),
! 	EMI_NAND_DEVICE(1),
! 	EMI_NAND_DEVICE(2),
! 	EMI_NAND_DEVICE(3),
! 	EMI_NAND_DEVICE(4),
!  };
! 
! 
! /*
!  * stx7111_configure_nand - Configures NAND support for the STx7111
!  *
!  * Requires generic platform NAND driver (CONFIG_MTD_NAND_PLATFORM).
!  * Uses 'gen_nand.x' as ID for specifying MTD partitions on the kernel
!  * command line.
!  */
! void __init stx7111_configure_nand(struct plat_stmnand_data *data)
! {
! 	unsigned int bank_base, bank_end;
! 	unsigned int emi_bank = data->emi_bank;
! 
! 	struct platform_nand_data *nand_private_data =
! 		nand_flash[emi_bank].dev.platform_data;
! 
! 	bank_base = emi_bank_base(emi_bank) + data->emi_withinbankoffset;
! 	if (emi_bank == 4)
! 		bank_end = 0x07ffffff;
! 	else
! 		bank_end = emi_bank_base(emi_bank+1) - 1;
! 
! 	printk("Configuring EMI Bank%d for NAND device\n", emi_bank);
! 	emi_config_nand(data->emi_bank, data->emi_timing_data);
  
! 	nand_flash[emi_bank].resource[0].start = bank_base;
! 	nand_flash[emi_bank].resource[0].end = bank_end;
  
! 	nand_private_data->chip.chip_delay = data->chip_delay;
! 	nand_private_data->chip.partitions = data->mtd_parts;
! 	nand_private_data->chip.nr_partitions = data->nr_parts;
  
! 	platform_device_register(&nand_flash[emi_bank]);
  }
  
  
*** a/include/linux/stm/soc.h	2011-01-05 22:00:04.000000000 +0100
--- b/soc.h	2011-01-06 18:46:53.838961281 +0100
***************
*** 708,717 ****
  void stx7111_configure_ssc(struct plat_ssc_data *data);
  void stx7111_configure_usb(int inv_enable);
  void stx7111_configure_ethernet(int en_mii, int sel, int ext_clk, int phy_bus);
- void stx7111_configure_nand(struct platform_device *pdev);
  void stx7111_configure_lirc(lirc_scd_t *scd);
  void stx7111_configure_pci(struct pci_config_data *pci_config);
  int  stx7111_pcibios_map_platform_irq(struct pci_config_data *pci_config, u8 pin);
  
  void stx7141_early_device_init(void);
  void stx7141_configure_asc(const int *ascs, int num_ascs, int console);
--- 708,717 ----
  void stx7111_configure_ssc(struct plat_ssc_data *data);
  void stx7111_configure_usb(int inv_enable);
  void stx7111_configure_ethernet(int en_mii, int sel, int ext_clk, int phy_bus);
  void stx7111_configure_lirc(lirc_scd_t *scd);
  void stx7111_configure_pci(struct pci_config_data *pci_config);
  int  stx7111_pcibios_map_platform_irq(struct pci_config_data *pci_config, u8 pin);
+ void stx7111_configure_nand(struct plat_stmnand_data *data);
  
  void stx7141_early_device_init(void);
  void stx7141_configure_asc(const int *ascs, int num_ascs, int console);
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/boards/st/mb618/setup.c	Fri Jan 21 04:10:43 2011
--- linux-sh4/arch/sh/boards/st/mb618/setup.c	Sat Jan 22 05:33:29 2011
***************
*** 21,26 ****
--- 21,27 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/mtd/nand.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
***************
*** 33,44 ****
  #include <asm/io.h>
  #include "../common/common.h"
  
  /* Whether the hardware supports NOR or NAND Flash depends on J34.
   * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
   * Note that J30A must be in position 2-3 to select the on board Flash
   * (both NOR and NAND).
   */
- #define FLASH_NOR
  
  static int ascs[2] __initdata = { 2, 3 };
  
--- 34,71 ----
  #include <asm/io.h>
  #include "../common/common.h"
  
+ const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+  
+ /*
+ 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+ 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+ 0x40800000 - 0x47FFFFFF - linux   (120mb) 
+ 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+ 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+ */
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+     {
+  	    .name  = "bigphysarea",
+  	    .start = 0x48000000,
+  	    .size  = 0x02000000, /* 32 Mb */
+  	    .flags = 0,
+  	    .aka   = NULL
+     }, 
+     {
+  	    .name  = "LMI_IO",
+  	    .start = 0x4A000000,
+  	    .size  = 0x06000000, /* 92 Mb */
+  	    .flags = 0,
+  	    .aka   = LMI_IO_partalias
+     }, 
+  };
+ 
  /* Whether the hardware supports NOR or NAND Flash depends on J34.
   * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
   * Note that J30A must be in position 2-3 to select the on board Flash
   * (both NOR and NAND).
   */
  
  static int ascs[2] __initdata = { 2, 3 };
  
***************
*** 47,53 ****
  	printk("STMicroelectronics STx7111 Mboard initialisation\n");
  
  	stx7111_early_device_init();
! 	stx7111_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 74,81 ----
  	printk("STMicroelectronics STx7111 Mboard initialisation\n");
  
  	stx7111_early_device_init();
! 	stx7111_configure_asc(ascs, 1, 0);
!   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
***************
*** 56,62 ****
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
! 		ssc0_has(SSC_SPI_CAPABILITY) |
  		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
--- 84,90 ----
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
! 		ssc0_has(SSC_I2C_CAPABILITY) |
  		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
***************
*** 123,144 ****
  
  static void set_vpp(struct map_info * info, int enable)
  {
! 	stpio_set_pin(vpp_pio, enable);
! }
  
! static struct mtd_partition mtd_parts_table[3] = {
  	{
  		.name = "Boot firmware",
! 		.size = 0x00040000,
  		.offset = 0x00000000,
  	}, {
  		.name = "Kernel",
! 		.size = 0x00100000,
! 		.offset = 0x00040000,
  	}, {
! 		.name = "Root FS",
  		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00140000,
  	}
  };
  
--- 151,172 ----
  
  static void set_vpp(struct map_info * info, int enable)
  {
! /*	stpio_set_pin(vpp_pio, enable);
! */}
  
! static struct mtd_partition mtd_parts_table[] = {
  	{
  		.name = "Boot firmware",
! 		.size = 0x00080000,
  		.offset = 0x00000000,
  	}, {
  		.name = "Kernel",
! 		.size = 0x00700000,
! 		.offset = 0x00080000,
  	}, {
! 		.name = "Reserve",
  		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00780000,
  	}
  };
  
***************
*** 156,162 ****
  	.resource	= (struct resource[]) {
  		{
  			.start		= 0x00000000,
! 			.end		= 32*1024*1024 - 1,
  			.flags		= IORESOURCE_MEM,
  		}
  	},
--- 184,190 ----
  	.resource	= (struct resource[]) {
  		{
  			.start		= 0x00000000,
! 			.end		= 8*1024*1024 - 1, /* NOR Flashsize = 0x800000 */
  			.flags		= IORESOURCE_MEM,
  		}
  	},
***************
*** 179,185 ****
  static struct plat_stmmacphy_data phy_private_data = {
  	/* SMSC LAN 8700 */
  	.bus_id = 0,
! 	.phy_addr = -1,
  	.phy_mask = 0,
  	.interface = PHY_INTERFACE_MODE_MII,
  	.phy_reset = &mb618_phy_reset,
--- 207,213 ----
  static struct plat_stmmacphy_data phy_private_data = {
  	/* SMSC LAN 8700 */
  	.bus_id = 0,
! 	.phy_addr = 3,
  	.phy_mask = 0,
  	.interface = PHY_INTERFACE_MODE_MII,
  	.phy_reset = &mb618_phy_reset,
***************
*** 219,263 ****
  	},
  };
  
! /* J34 must be in the 1-2 position to enable NAND Flash */
! static struct mtd_partition mb618_nand_parts[] = {
! 	{
! 		.name	= "NAND root",
! 		.offset	= 0,
! 		.size 	= 0x00800000
! 	}, {
! 		.name	= "NAND home",
! 		.offset	= MTDPART_OFS_APPEND,
! 		.size	= MTDPART_SIZ_FULL
! 	},
  };
  
  static struct plat_stmnand_data mb618_nand_config = {
! 	/* STM_NAND_EMI data */
! 	.emi_withinbankoffset   = 0,
! 	.rbn_port               = -1,
! 	.rbn_pin                = -1,
! 
! 	.timing_data = &(struct nand_timing_data) {
! 		.sig_setup      = 50,           /* times in ns */
! 		.sig_hold       = 50,
! 		.CE_deassert    = 0,
! 		.WE_to_RBn      = 100,
! 		.wr_on          = 10,
! 		.wr_off         = 40,
! 		.rd_on          = 10,
! 		.rd_off         = 40,
! 		.chip_delay     = 50,           /* in us */
! 	},
! 	.flex_rbn_connected     = 0,	/* mb618 rev A-D: board-mod required:
! 					 * R283 -> pos 1-2 (RBn pull-up). Then
! 					 * set flex_rbn_connected = 1  */
! };
! 
! /* Platform data for STM_NAND_EMI/FLEX/AFM. */
! static struct platform_device mb618_nand_device =
! 	STM_NAND_DEVICE("stm-nand-emi", 0, &mb618_nand_config,
! 			mb618_nand_parts, ARRAY_SIZE(mb618_nand_parts), 0);
  
  
  static struct pci_config_data mb618_pci_config = {
--- 247,319 ----
  	},
  };
  
! /* J34 must be in the 1-2 position to enable NOR Flash */
! static struct mtd_partition nand_partitions[] = {
! #ifdef ORIGINAL_MTD
! 	 {
! 	 .name = "NAND KERNEL :          0x0000.0000-0x002F.FFFF",
! 	 .size = 0x300000,
! 	 .offset = 0,
! 	 },
! 	 {
! 	 .name = "NAND ROOT :            0x0030.0000-0x027F.FFFF",
! 	 .size = 0x2500000,
! 	 .offset = 0x300000,
! 	 },
! 	 {
! 	 .name = "NAND CONFIG :          0x0280.0000-0x04FF.FFFF",
! 	 .size = 0x2800000,
! 	 .offset = 0x2800000,
! 	 },
! 	 {
! 	 .name = "NAND DATA :            0x0500.0000-0x07FF.FFFF",
! 	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
! 	 .offset = 0x05000000,
! 	 },
! #else
! 	 {
! 	 .name = "NAND Spark Kernel",
! 	 .size = 0x0800000,
! 	 .offset = 0,
! 	 }, {
!      .name = "NAND Spark Root fs",
!      .size = 0x17800000,
!      .offset = 0x800000,
!      }, {
!      .name = "NAND Enigma2 Kernel",
!      .size = 0x800000,
!      .offset = 0x18000000,
!      }, {
! 	 .name = "NAND Enigma2 User fs",
! 	 .size = 0x7700000, //MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
! 	 .offset = 0x18800000,
! 	 },
! #endif
  };
  
  static struct plat_stmnand_data mb618_nand_config = {
! 	.emi_bank		= 1,
! 	.emi_withinbankoffset	= 0,
! 
! 	/* Timings for NAND512W3A */
! 	.emi_timing_data = &(struct emi_timing_data) {
! 		.rd_cycle_time	 = 40,		 /* times in ns */
! 		.rd_oee_start	 = 0,
! 		.rd_oee_end	 = 10,
! 		.rd_latchpoint	 = 10,
! 		.busreleasetime  = 0,
! 
! 		.wr_cycle_time	 = 40,
! 		.wr_oee_start	 = 0,
! 		.wr_oee_end	 = 10,
! 
! 		.wait_active_low = 0,
! 	},
! 
! 	.chip_delay		= 40,		/* time in us */
! 	.mtd_parts		= nand_partitions,
! 	.nr_parts		= ARRAY_SIZE(nand_partitions),
! };
  
  
  static struct pci_config_data mb618_pci_config = {
***************
*** 269,275 ****
  		PCI_PIN_UNUSED,
  		PCI_PIN_UNUSED
  	},
! 	.serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
  	.idsel_lo = 30,
  	.idsel_hi = 30,
  	.req_gnt = {
--- 325,331 ----
  		PCI_PIN_UNUSED,
  		PCI_PIN_UNUSED
  	},
! 	.serr_irq = PCI_PIN_UNUSED,
  	.idsel_lo = 30,
  	.idsel_hi = 30,
  	.req_gnt = {
***************
*** 289,301 ****
  }
  
  static struct platform_device *mb618_devices[] __initdata = {
- 	&mb618_leds,
  	&epld_device,
! #ifdef FLASH_NOR
! 	&physmap_flash,
! #endif
  	&mb618_phy_device,
- 	&mb618_button_device,
  };
  
  /* Configuration based on Futarque-RC signals train. */
--- 345,353 ----
  }
  
  static struct platform_device *mb618_devices[] __initdata = {
  	&epld_device,
! 	&physmap_flash, /* FLASH_NOR */
  	&mb618_phy_device,
  };
  
  /* Configuration based on Futarque-RC signals train. */
***************
*** 343,368 ****
  
  static int __init device_init(void)
  {
! 	stx7111_configure_pci(&mb618_pci_config);
! 	stx7111_configure_pwm(&pwm_private_info);
  	stx7111_configure_ssc(&ssc_private_info);
  	stx7111_configure_usb(1); /* Enable inverter */
  	stx7111_configure_ethernet(1, 0, 0, 0);
-         stx7111_configure_lirc(&lirc_scd);
  
! 	vpp_pio = stpio_request_pin(3,4, "VPP", STPIO_OUT);
  
  #ifdef CONFIG_SND
! 	i2c_register_board_info(1, &mb618_scart_audio, 1);
  #endif
  
! #ifndef FLASH_NOR
! 	stx7111_configure_nand(&mb618_nand_device);
  	/* The MTD NAND code doesn't understand the concept of VPP,
  	 * (or hardware write protect) so permanently enable it.
  	 */
! 	stpio_set_pin(vpp_pio, 1);
! #endif
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
--- 395,431 ----
  
  static int __init device_init(void)
  {
! /*	stx7111_configure_pci(&mb618_pci_config);
! */	stx7111_configure_pwm(&pwm_private_info);
  	stx7111_configure_ssc(&ssc_private_info);
  	stx7111_configure_usb(1); /* Enable inverter */
  	stx7111_configure_ethernet(1, 0, 0, 0);
  
! 	stx7111_configure_lirc(&lirc_scd);
  
+ /*	vpp_pio = stpio_request_pin(3,4, "VPP", STPIO_OUT);
+ */
  #ifdef CONFIG_SND
! 	//disable the in-kernel scart handling otherwise probing
! 	//of avs will fail later
! 	//i2c_register_board_info(1, &mb618_scart_audio, 1);
  #endif
  
! 	stx7111_configure_nand(&mb618_nand_config);
  	/* The MTD NAND code doesn't understand the concept of VPP,
  	 * (or hardware write protect) so permanently enable it.
  	 */
! /*	stpio_set_pin(vpp_pio, 1);
! */
! 
! /* kdhong */
! 	{
! //		struct stpio_pin *pin;
! //		pin = stpio_request_pin(4,4, "PHY_RESET", STPIO_OUT);
! //		stpio_set_pin(pin, 1);
! //		stpio_free_pin( pin );
! 	}
! /* kdhong */
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/net/stmmac/stmmac_main.c	Fri Jan 21 04:10:43 2011
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	Sat Jan 22 05:33:20 2011
***************
*** 390,395 ****
--- 390,514 ----
  }
  
  /**
+  * set_mac_addr
+  * @ioaddr: device I/O address
+  * @Addr: new MAC address
+  * @high: High register offset
+  * @low: low register offset
+  * Description: the function sets the hardware MAC address
+  */
+ static void set_mac_addr(unsigned long ioaddr, u8 Addr[6],
+ 			 unsigned int high, unsigned int low)
+ {
+ 	unsigned long data;
+ 
+ 	data = (Addr[5] << 8) | Addr[4];
+ 	writel(data, ioaddr + high);
+ 	data = (Addr[3] << 24) | (Addr[2] << 16) | (Addr[1] << 8) | Addr[0];
+ 	writel(data, ioaddr + low);
+ 
+ 	return;
+ }
+ 
+ #include <linux/ctype.h>
+ 
+ static unsigned long simple_strtoul2(const char *cp,char **endp,unsigned int base)
+ {
+ 	unsigned long result = 0,value;
+ 
+ 	if (*cp == '0') {
+ 		cp++;
+ 		if ((*cp == 'x') && isxdigit(cp[1])) {
+ 			base = 16;
+ 			cp++;
+ 		}
+ 		if (!base) {
+ 			base = 8;
+ 		}
+ 	}
+ 	if (!base) {
+ 		base = 10;
+ 	}
+ 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
+ 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
+ 		result = result*base + value;
+ 		cp++;
+ 	}
+ 	if (endp)
+ 		*endp = (char *)cp;
+ 	return result;
+ }
+ 
+ /**
+  * get_mac_addr
+  * @ioaddr: device I/O address
+  * @addr: mac address
+  * @high: High register offset
+  * @low: low register offset
+  * Description: the function gets the hardware MAC address
+  */
+ 
+ char g_env_mac[]="00:50:FD:00:00:00";
+ 
+ static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
+ 			    unsigned int high, unsigned int low)
+ {
+ 	unsigned int hi_addr, lo_addr;
+ 
+     int env_size,reg,env_present=0, tmp_count;
+     char *s = NULL, *e,  es[] = "00:00:00:00:00:00";
+     unsigned char s_env_mac[64], v_env_mac[6];
+ 
+ 	/* Read the MAC address from the hardware */
+ 	env_size = 17;
+ 	memcpy(s_env_mac, g_env_mac, 17);
+ 
+ 	if (env_size > 0) {
+ 			env_present = 1;
+ 			s = s_env_mac;
+ 		}
+ 
+ 	//by doliyu ...patch for mac address write error!
+ 	for(tmp_count =0 ; tmp_count < 17; tmp_count++)
+ 	{
+ 		if(s_env_mac[tmp_count] == ' ')
+ 			s_env_mac[tmp_count]='0';
+ 		printk("s_env_mac[%d] = %c\n", tmp_count, s_env_mac[tmp_count]);
+ 	}
+ 	
+ 	for (reg = 0; reg < 6; ++reg) { /* turn string into mac value */
+ 		v_env_mac[reg] = s ? simple_strtoul2 (s, &e, 16) : 0;
+ 		if (s)
+ 			s = (*e) ? e + 1 : e;
+ 	}
+ 
+     printk("get ether addr = %x, %x, %x, %x, %x, %x \n", v_env_mac[0],v_env_mac[1],v_env_mac[2],v_env_mac[3],v_env_mac[4],v_env_mac[5]);
+     hi_addr = (int)(v_env_mac[5]) <<8 | (int)(v_env_mac[4]);
+     lo_addr = (int)(v_env_mac[3]) << 24 | (int)(v_env_mac[2]) << 16 | (int)(v_env_mac[1]) <<8 | v_env_mac[0];
+ 
+ //	hi_addr = readl(ioaddr + high);
+ //	lo_addr = readl(ioaddr + low);
+ 
+ 	/* Extract the MAC address from the high and low words */
+ #if 1
+ 	addr[0] = 0;
+ 	addr[1] = 0;
+ 	addr[2] = 0;
+ 	addr[3] = 0;
+ 	addr[4] = 0;
+ 	addr[5] = 0;
+ #else
+ 	addr[0] = lo_addr & 0xff;
+ 	addr[1] = (lo_addr >> 8) & 0xff;
+ 	addr[2] = (lo_addr >> 16) & 0xff;
+ 	addr[3] = (lo_addr >> 24) & 0xff;
+ 	addr[4] = hi_addr & 0xff;
+ 	addr[5] = (hi_addr >> 8) & 0xff;
+ #endif
+ 	return;
+ }
+ 
+ /**
   * stmmac_mac_enable_rx
   * @dev: net device structure
   * Description: the function enables the RX MAC process
***************
*** 1887,1894 ****
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");
  	}
  
  	ret = register_netdev(dev);
--- 2006,2013 ----
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		/*printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");*/
  	}
  
  	ret = register_netdev(dev);
***************
*** 2348,2353 ****
--- 2467,2475 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }
*** common.h	2011-11-20 21:19:26.000000000 +0200
--- linux-sh4/drivers/net/stmmac/common.h	2011-11-20 21:52:28.447268196 +0200
***************
*** 215,221 ****
  				unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
! 
  	/* Read the MAC address from the hardware */
  	hi_addr = readl(ioaddr + high);
  	lo_addr = readl(ioaddr + low);
--- 215,221 ----
  				unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
! #if 0
  	/* Read the MAC address from the hardware */
  	hi_addr = readl(ioaddr + high);
  	lo_addr = readl(ioaddr + low);
***************
*** 227,233 ****
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! 
  	return;
  }
  
--- 227,240 ----
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! #else
!  	addr[0] = 0;
!  	addr[1] = 0;
!  	addr[2] = 0;
!  	addr[3] = 0;
!  	addr[4] = 0;
!  	addr[5] = 0;
! #endif
  	return;
  }
       
*** linux-sh4-2.6.23.17_stm23_0123.orig/arch/sh/kernel/setup.c	2011-11-23 22:41:04.009168798 +0200
--- linux-sh4/arch/sh/kernel/setup.c	2011-11-23 22:38:14.000000000 +0200
***************
*** 276,281 ****
--- 276,305 ----
  #endif
  #endif
  
+ 	{
+ 		/* spider: remove bigphysarea allocation from command line */
+ 		int i;
+ 		int command_line_len = strlen(command_line);
+ 
+ 		for(i = 0; i < (command_line_len-11); i++)
+ 		{
+ 			if(!strncmp(command_line + i + 1, "bigphysarea", 11))
+ 			{
+ 				// search for next pos
+ 				int k;
+ 				int pos=command_line_len;
+ 				for(k=i+1; k<command_line_len; k++)
+ 					if(command_line[k]==' ') {
+ 						pos=k;
+ 						break;
+ 					}
+ 				memmove(command_line+i, command_line+pos, command_line_len-pos);
+ 				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+ 				break;
+ 			}
+ 		}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;
