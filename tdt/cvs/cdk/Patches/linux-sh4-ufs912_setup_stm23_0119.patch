diff -x Module.symvers -x .mailmap -rcN b//drivers/net/stmmac/stmmac_main.c a//drivers/net/stmmac/stmmac_main.c
*** b//drivers/net/stmmac/stmmac_main.c	2010-02-07 22:14:38.470923501 +0100
--- a//drivers/net/stmmac/stmmac_main.c	2010-01-31 11:02:03.000000000 +0100
***************
*** 370,375 ****
--- 370,404 ----
  	return;
  }
  
+ #include <linux/ctype.h>
+ 
+ static unsigned long simple_strtoul2(const char *cp,char **endp,unsigned int base)
+ {
+ 	unsigned long result = 0,value;
+ 
+ 	if (*cp == '0') {
+ 		cp++;
+ 		if ((*cp == 'x') && isxdigit(cp[1])) {
+ 			base = 16;
+ 			cp++;
+ 		}
+ 		if (!base) {
+ 			base = 8;
+ 		}
+ 	}
+ 	if (!base) {
+ 		base = 10;
+ 	}
+ 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
+ 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
+ 		result = result*base + value;
+ 		cp++;
+ 	}
+ 	if (endp)
+ 		*endp = (char *)cp;
+ 	return result;
+ }
+ 
  /**
   * get_mac_addr
   * @ioaddr: device I/O address
***************
*** 378,391 ****
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
  
  	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
--- 407,453 ----
   * @low: low register offset
   * Description: the function gets the hardware MAC address
   */
+ 
+ char g_env_mac[]="00:50:FD:00:00:00";
+ 
  static void get_mac_address(unsigned long ioaddr, unsigned char *addr,
  			    unsigned int high, unsigned int low)
  {
  	unsigned int hi_addr, lo_addr;
  
+     int env_size,reg,env_present=0, tmp_count;
+     char *s = NULL, *e,  es[] = "00:00:00:00:00:00";
+     unsigned char s_env_mac[64], v_env_mac[6];
+ 
  	/* Read the MAC address from the hardware */
! 	env_size = 17;
! 	memcpy(s_env_mac, g_env_mac, 17);
! 
! 	if (env_size > 0) {
! 			env_present = 1;
! 			s = s_env_mac;
! 		}
! 
! 	//by doliyu ...patch for mac address write error!
! 	for(tmp_count =0 ; tmp_count < 17; tmp_count++)
! 	{
! 		if(s_env_mac[tmp_count] == ' ')
! 			s_env_mac[tmp_count]='0';
! 		printk("s_env_mac[%d] = %c\n", tmp_count, s_env_mac[tmp_count]);
! 	}
! 	
! 	for (reg = 0; reg < 6; ++reg) { /* turn string into mac value */
! 		v_env_mac[reg] = s ? simple_strtoul2 (s, &e, 16) : 0;
! 		if (s)
! 			s = (*e) ? e + 1 : e;
! 	}
! 
!     printk("get ether addr = %x, %x, %x, %x, %x, %x \n", v_env_mac[0],v_env_mac[1],v_env_mac[2],v_env_mac[3],v_env_mac[4],v_env_mac[5]);
!     hi_addr = (int)(v_env_mac[5]) <<8 | (int)(v_env_mac[4]);
!     lo_addr = (int)(v_env_mac[3]) << 24 | (int)(v_env_mac[2]) << 16 | (int)(v_env_mac[1]) <<8 | v_env_mac[0];
! 
! //	hi_addr = readl(ioaddr + high);
! //	lo_addr = readl(ioaddr + low);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
***************
*** 2309,2314 ****
--- 2371,2379 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }
*** b/drivers/stm/pio.c	2010-02-15 09:28:08.000000000 +0100
--- a/drivers/stm/pio.c	2010-02-28 22:09:42.000000000 +0100
***************
*** 54,59 ****
--- 54,60 ----
  #include <linux/gpio.h>
  #endif
  #ifdef CONFIG_PROC_FS
+ #include <asm/uaccess.h>    	/* copy_from_user */
  #include <linux/proc_fs.h>
  #include <linux/kallsyms.h>
  #endif
***************
*** 466,477 ****
  					&stpio_ports[portno].pins[pinno];
  
  			len += sprintf(page + len,
! 					"PIO %d.%d [%-10s] [%s] [%s]\n",
  					portno, pinno,
  					(pin->name ? pin->name : ""),
  					stpio_get_direction_name(
  					pin->direction),
! 					stpio_get_handler_name(pin->func));
  			if (len + begin > off + count)
  				goto done;
  			if (len + begin < off) {
--- 467,479 ----
  					&stpio_ports[portno].pins[pinno];
  
  			len += sprintf(page + len,
! 					"PIO %d.%d [%-10s] [%s] [%s]    [%d]\n",
  					portno, pinno,
  					(pin->name ? pin->name : ""),
  					stpio_get_direction_name(
  					pin->direction),
! 					stpio_get_handler_name(pin->func),
! 					(pin->name ? stpio_get_pin(pin) : 0));
  			if (len + begin > off + count)
  				goto done;
  			if (len + begin < off) {
***************
*** 491,496 ****
--- 493,559 ----
  	return ((count < begin + len - off) ? count : begin + len - off);
  }
  
+ int stpio_write_proc(struct file *file, const char __user *buf,
+                            unsigned long count, void *data)
+ {
+ 	char 		*page;
+ 	ssize_t 	ret = -ENOMEM;
+ 	int 		value, port, pinno, dir;
+ 
+ 	char* myString = kmalloc(count + 1, GFP_KERNEL);
+ 
+ 	printk("%s %d - ", __FUNCTION__, count);
+ 
+ 	page = (char *)__get_free_page(GFP_KERNEL);
+ 	if (page) 
+ 	{ 
+ 		struct stpio_pin* pin;
+ 		
+ 		ret = -EFAULT;
+ 		if (copy_from_user(page, buf, count))
+ 			goto out;
+ 
+ 		strncpy(myString, page, count);
+ 		myString[count] = '\0';
+ 
+ 		printk("%s\n", myString);
+ 		sscanf(myString, "%d %d %d %d", &port, &pinno, &value, &dir);
+ 
+ 		printk("port %d, pin %d, value %d, dir = %d\n", port, pinno, value, dir);
+ 		
+ 		pin = &stpio_ports[port].pins[pinno];
+ 			
+ 
+ 		printk("pin = %p\n", pin);
+ 		
+ 		if (value == -1)
+ 		{	
+ 			//free
+ 			printk("free pin\n");
+ 			stpio_free_pin(pin);
+ 		} else
+ 		if (dir != -1)
+ 		{
+ 			printk("configure pin\n");
+ 			//reconfigure
+ 			stpio_configure_pin(pin, dir);
+ 			
+ 		} else
+ 		{
+ 			printk("set pin\n");
+ 			stpio_set_pin(pin, value);
+ 		}
+ 
+ 		/* always return count to avoid endless loop */
+ 		ret = count;	
+ 	}
+ 	
+ out:
+ 	free_page((unsigned long)page);
+ 	kfree(myString);
+ 	return ret;
+ }
+ 
  #endif /* CONFIG_PROC_FS */
  
  
***************
*** 855,861 ****
--- 918,927 ----
  #ifdef CONFIG_PROC_FS
  	proc_stpio = create_proc_entry("stpio", 0, NULL);
  	if (proc_stpio)
+         {
  		proc_stpio->read_proc = stpio_read_proc;
+ 		proc_stpio->write_proc = stpio_write_proc;
+         }
  #endif
  
  	return platform_driver_register(&stpio_driver);
*** b/drivers/mtd/chips/cfi_probe.c	2010-02-15 09:28:06.000000000 +0100
--- a/drivers/mtd/chips/cfi_probe.c	2010-03-06 11:02:11.000000000 +0100
***************
*** 255,260 ****
--- 255,276 ----
  	for (i=0; i<cfi->cfiq->NumEraseRegions; i++) {
  		cfi->cfiq->EraseRegionInfo[i] = le32_to_cpu(cfi->cfiq->EraseRegionInfo[i]);
  
+ 	/* kdhong */
+ 	printk( "CFI MFR = %x DEV = %x\n", cfi->mfr, cfi->id );
+ 
+ 	if( cfi->mfr == 0x00c2 && cfi->id == 0x227e )
+ 	{
+ 		int devsize = (1 << cfi->cfiq->DevSize) * cfi->interleave;
+ 
+ 		printk( "devsize = %x\n", devsize );
+ 
+ 		if( devsize == 0x400000 )
+ 		{
+ 			cfi->cfiq->EraseRegionInfo[i] = 0x100003f;
+ 		}
+ 	}
+ 	/* kdhong */
+ 
  #ifdef DEBUG_CFI
  		printk("  Erase Region #%d: BlockSize 0x%4.4X bytes, %d blocks\n",
  		       i, (cfi->cfiq->EraseRegionInfo[i] >> 8) & ~0xff,
*** a/arch/sh/boards/st/mb618/setup.c	2010-05-07 20:04:43.000000000 +0200
--- b/setup.c	2010-05-13 17:49:05.177908300 +0200
***************
*** 19,24 ****
--- 19,25 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/phy.h>
  #include <linux/lirc.h>
  #include <linux/gpio_keys.h>
***************
*** 30,50 ****
  #include <asm/io.h>
  #include "../common/common.h"
  
  /* Whether the hardware supports NOR or NAND Flash depends on J34.
   * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
   * Note that J30A must be in position 2-3 to select the on board Flash
   * (both NOR and NAND).
   */
- #define FLASH_NOR
  
! static int ascs[2] __initdata = { 2, 3 };
  
  static void __init mb618_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STx7111 Mboard initialisation\n");
  
  	stx7111_early_device_init();
! 	stx7111_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 31,78 ----
  #include <asm/io.h>
  #include "../common/common.h"
  
+ const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+  
+ /*
+ 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+ 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+ 0x40800000 - 0x47FFFFFF - linux   (120mb) 
+ 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+ 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+ */
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+     {
+  	    .name  = "bigphysarea",
+  	    .start = 0x48000000,
+  	    .size  = 0x02000000, /* 32 Mb */
+  	    .flags = 0,
+  	    .aka   = NULL
+     }, 
+     {
+  	    .name  = "LMI_IO",
+  	    .start = 0x4A000000,
+  	    .size  = 0x06000000, /* 92 Mb */
+  	    .flags = 0,
+  	    .aka   = LMI_IO_partalias
+     }, 
+  };
+ 
  /* Whether the hardware supports NOR or NAND Flash depends on J34.
   * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
   * Note that J30A must be in position 2-3 to select the on board Flash
   * (both NOR and NAND).
   */
  
! static int ascs[1] __initdata = { 1 };
  
  static void __init mb618_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STx7111 Mboard initialisation\n");
  
  	stx7111_early_device_init();
! 	stx7111_configure_asc(ascs, 1, 0);
!   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
***************
*** 53,59 ****
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
! 		ssc0_has(SSC_SPI_CAPABILITY) |
  		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
--- 81,87 ----
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
! 		ssc0_has(SSC_I2C_CAPABILITY) |
  		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
***************
*** 120,141 ****
  
  static void set_vpp(struct map_info * info, int enable)
  {
! 	stpio_set_pin(vpp_pio, enable);
! }
  
! static struct mtd_partition mtd_parts_table[3] = {
  	{
! 		.name = "Boot firmware",
! 		.size = 0x00040000,
  		.offset = 0x00000000,
  	}, {
! 		.name = "Kernel",
! 		.size = 0x00100000,
! 		.offset = 0x00040000,
! 	}, {
! 		.name = "Root FS",
  		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00140000,
  	}
  };
  
--- 148,165 ----
  
  static void set_vpp(struct map_info * info, int enable)
  {
! /*	stpio_set_pin(vpp_pio, enable);
! */}
  
! static struct mtd_partition mtd_parts_table[] = {
  	{
! 		.name = "NOR U-BOOT :    0xA000.0000-0xA007.FFFF (512KB)",
! 		.size = 0x00080000,
  		.offset = 0x00000000,
  	}, {
! 		.name = "NOR ROOT :      0xA008.0000-0xA03F.FFFF (3,5MB)",
  		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00080000,
  	}
  };
  
***************
*** 153,159 ****
  	.resource	= (struct resource[]) {
  		{
  			.start		= 0x00000000,
! 			.end		= 32*1024*1024 - 1,
  			.flags		= IORESOURCE_MEM,
  		}
  	},
--- 177,183 ----
  	.resource	= (struct resource[]) {
  		{
  			.start		= 0x00000000,
! 			.end		= 4*1024*1024 - 1, /* NOR Flashsize = 0x400000 */
  			.flags		= IORESOURCE_MEM,
  		}
  	},
***************
*** 176,182 ****
  static struct plat_stmmacphy_data phy_private_data = {
  	/* SMSC LAN 8700 */
  	.bus_id = 0,
! 	.phy_addr = -1,
  	.phy_mask = 0,
  	.interface = PHY_INTERFACE_MODE_MII,
  	.phy_reset = &mb618_phy_reset,
--- 200,206 ----
  static struct plat_stmmacphy_data phy_private_data = {
  	/* SMSC LAN 8700 */
  	.bus_id = 0,
! 	.phy_addr = 3,
  	.phy_mask = 0,
  	.interface = PHY_INTERFACE_MODE_MII,
  	.phy_reset = &mb618_phy_reset,
***************
*** 216,236 ****
  	},
  };
  
  /* J34 must be in the 1-2 position to enable NOR Flash */
! static struct mtd_partition nand_partitions[] = {
! 	{
! 		.name	= "NAND root",
! 		.offset	= 0,
! 		.size 	= 0x00800000
! 	}, {
! 		.name	= "NAND home",
! 		.offset	= MTDPART_OFS_APPEND,
! 		.size	= MTDPART_SIZ_FULL
! 	},
  };
  
  static struct nand_config_data mb618_nand_config = {
! 	.emi_bank		= 0,
  	.emi_withinbankoffset	= 0,
  
  	/* Timings for NAND512W3A */
--- 240,293 ----
  	},
  };
  
+ //#define ORIGINAL_MTD
+ 
  /* J34 must be in the 1-2 position to enable NOR Flash */
! static struct mtd_partition nand_partitions[] = {
! #ifdef ORIGINAL_MTD
! 	 {
! 	 .name = "NAND KERNEL :          0x0000.0000-0x002F.FFFF",
! 	 .size = 0x300000,
! 	 .offset = 0,
! 	 },
! 	 {
! 	 .name = "NAND ROOT :            0x0030.0000-0x027F.FFFF",
! 	 .size = 0x2500000,
! 	 .offset = 0x300000,
! 	 },
! 	 {
! 	 .name = "NAND CONFIG :          0x0280.0000-0x04FF.FFFF",
! 	 .size = 0x2800000,
! 	 .offset = 0x2800000,
! 	 },
! 	 {
! 	 .name = "NAND DATA :            0x0500.0000-0x07FF.FFFF",
! 	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
! 	 .offset = 0x05000000,
! 	 },
! #else
! 	 {
! 	 .name = "NAND KERNEL :   0x0000.0000-0x003F.FFFF (  4MB)",
! 	 .size = 0x400000,
! 	 .offset = 0,
! 	 }, {
! 	 .name = "NAND FW :       0x0040.0000-0x00BF.FFFF ( 8MB)",
! 	 .size = 0x800000,
! 	 .offset = 0x400000,
! 	 }, {
! 	 .name = "NAND ROOT :     0x00C0.0000-0x04BF.FFFF ( 64MB)",
! 	 .size = 0x4000000,
! 	 .offset = 0xC00000,
! 	 }, {
! 	 .name = "NAND DATA :     0x04C0.0000-0x07FF.FFFF ( 52MB)",
! 	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
! 	 .offset = 0x04C00000,
! 	 },
! #endif
  };
  
  static struct nand_config_data mb618_nand_config = {
! 	.emi_bank		= 1,
  	.emi_withinbankoffset	= 0,
  
  	/* Timings for NAND512W3A */
***************
*** 253,259 ****
  	.nr_parts		= ARRAY_SIZE(nand_partitions),
  };
  
- 
  /* We don't bother with INT[BCD] as they are shared with the ssc
   * J20-A must be removed, J20-B must be 5-6
   */
--- 310,315 ----
***************
*** 273,285 ****
  }
  
  static struct platform_device *mb618_devices[] __initdata = {
- 	&mb618_leds,
  	&epld_device,
! #ifdef FLASH_NOR
! 	&physmap_flash,
! #endif
  	&mb618_phy_device,
- 	&mb618_button_device,
  };
  
  /* Configuration based on Futarque-RC signals train. */
--- 329,337 ----
  }
  
  static struct platform_device *mb618_devices[] __initdata = {
  	&epld_device,
! 	&physmap_flash, /* FLASH_NOR */
  	&mb618_phy_device,
  };
  
  /* Configuration based on Futarque-RC signals train. */
***************
*** 327,352 ****
  
  static int __init device_init(void)
  {
! 	stx7111_configure_pci(&pci_config);
! 	stx7111_configure_pwm(&pwm_private_info);
  	stx7111_configure_ssc(&ssc_private_info);
  	stx7111_configure_usb(1); /* Enable inverter */
  	stx7111_configure_ethernet(1, 0, 0, 0);
!         stx7111_configure_lirc(&lirc_scd);
! 
! 	vpp_pio = stpio_request_pin(3,4, "VPP", STPIO_OUT);
! 
  #ifdef CONFIG_SND
! 	i2c_register_board_info(1, &mb618_scart_audio, 1);
  #endif
  
- #ifndef FLASH_NOR
  	stx7111_configure_nand(&mb618_nand_config);
  	/* The MTD NAND code doesn't understand the concept of VPP,
  	 * (or hardware write protect) so permanently enable it.
  	 */
! 	stpio_set_pin(vpp_pio, 1);
! #endif
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
--- 379,415 ----
  
  static int __init device_init(void)
  {
! /*	stx7111_configure_pci(&pci_config);
! */	stx7111_configure_pwm(&pwm_private_info);
  	stx7111_configure_ssc(&ssc_private_info);
  	stx7111_configure_usb(1); /* Enable inverter */
  	stx7111_configure_ethernet(1, 0, 0, 0);
!        
! /*        stx7111_configure_lirc(&lirc_scd);
! */
! /*	vpp_pio = stpio_request_pin(3,4, "VPP", STPIO_OUT);
! */
  #ifdef CONFIG_SND
! 	//disable the in-kernel scart handling otherwise probing
! 	//of avs will fail later
! 	//i2c_register_board_info(1, &mb618_scart_audio, 1);
  #endif
  
  	stx7111_configure_nand(&mb618_nand_config);
  	/* The MTD NAND code doesn't understand the concept of VPP,
  	 * (or hardware write protect) so permanently enable it.
  	 */
! /*	stpio_set_pin(vpp_pio, 1);
! */
! 
! /* kdhong */
! 	{
! 		struct stpio_pin *pin;
! 		pin = stpio_request_pin(4,4, "PHY_RESET", STPIO_OUT);
! 		stpio_set_pin(pin, 1);
! //		stpio_free_pin( pin );
! 	}
! /* kdhong */
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
*** b/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2010-02-15 09:28:08.000000000 +0100
--- a/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2010-03-06 12:42:34.000000000 +0100
***************
*** 264,269 ****
--- 264,282 ----
  		platform_device_register(&stssc_devices[i]);
  	}
  
+         /* some additional sysconfig settings to enable i2c, cic and cec */
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 0, 0, "cic");
+         sysconf_write(ssc_sc, 1);
+ 
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 17, 17, "cic");
+         sysconf_write(ssc_sc, 1);
+ 
+ 	ssc_sc = sysconf_claim(SYS_CFG, 5, 8, 8, "cec");
+         sysconf_write(ssc_sc, 1);
+ 
+         ssc_sc = sysconf_claim(SYS_CFG, 7, 15, 15, "i2c");
+         sysconf_write(ssc_sc, 1);
+ 
  	/* I2C buses number reservation (to prevent any hot-plug device
  	 * from using it) */
  #ifdef CONFIG_I2C_BOARDINFO
***************
*** 422,433 ****
  	STASC_DEVICE(0xfd030000, evt2irq(0x1160), 11, 15,
  		     0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0xfd031000, evt2irq(0x1140), 12, 16,
  		     1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0xfd032000, evt2irq(0x1120), 13, 17,
! 		     4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  	STASC_DEVICE(0xfd033000, evt2irq(0x1100), 14, 18,
  		     5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
--- 435,449 ----
  	STASC_DEVICE(0xfd030000, evt2irq(0x1160), 11, 15,
  		     0, 0, 1, 4, 7,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
+ //console
  	STASC_DEVICE(0xfd031000, evt2irq(0x1140), 12, 16,
  		     1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! //fp
! 	STASC_DEVICE(0xfd032000, evt2irq(0x1120), /* 13 */ -1, /*17 */ -1,
! 		     4, 3, 2, /*4 konfetti */ -1, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
+ 
  	STASC_DEVICE(0xfd033000, evt2irq(0x1100), 14, 18,
  		     5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
***************
*** 499,504 ****
--- 515,521 ----
  			 * ssc2_mux_sel = 0 */
  			if (!sc7_3)
  				sc7_3 = sysconf_claim(SYS_CFG, 7, 3, 3, "asc");
+ 
  			sysconf_write(sc7_3, 0);
  
  			break;
***************
*** 508,514 ****
  			break;
  		}
  
! 		pdev->id = i;
  		((struct stasc_uart_data*)(pdev->dev.platform_data))->flags = flags;
  		stasc_configured_devices[stasc_configured_devices_count++] = pdev;
  	}
--- 525,532 ----
  			break;
  		}
  
!                 pdev->id = i;
!                 
  		((struct stasc_uart_data*)(pdev->dev.platform_data))->flags = flags;
  		stasc_configured_devices[stasc_configured_devices_count++] = pdev;
  	}

