*** a/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2011-01-03 11:13:35.000000000 +0100
--- b/setup-stb7100.c	2011-01-03 16:28:45.578307315 +0100
***************
*** 514,520 ****
  	mac_speed_sc = sysconf_claim(SYS_CFG, 7, 20, 20, "stmmac");
  
  	/* Remove the PHY clk */
! 	stpio_request_pin(3, 7, "stmmac EXTCLK", STPIO_ALT_OUT);
  
  	/* Configure the ethernet MAC PBL depending on the cut of the chip */
  	if (chip_revision == 1){
--- 514,520 ----
  	mac_speed_sc = sysconf_claim(SYS_CFG, 7, 20, 20, "stmmac");
  
  	/* Remove the PHY clk */
! //	stpio_request_pin(3, 7, "stmmac EXTCLK", STPIO_ALT_OUT);
  
  	/* Configure the ethernet MAC PBL depending on the cut of the chip */
  	if (chip_revision == 1){
***************
*** 677,685 ****
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
--- 677,685 ----
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
*** a/drivers/stm/pio.c	2011-01-03 11:13:42.000000000 +0100
--- b/pio.c	2011-01-03 17:15:15.958555041 +0100
***************
*** 154,159 ****
--- 154,168 ----
  		stpio_configure_pin(pin, direction);
  		pin->name = name;
  	}
+ 	else
+ 	{
+ 		pin = &stpio_ports[portno].pins[pinno];
+ 
+ 		if( pin )
+ 		{
+ 			printk( "GPIO %d %d is occupied by %s\n", portno, pinno, pin->name );
+ 		}
+ 	}
  
  	spin_unlock(&stpio_lock);
  
***************
*** 163,169 ****
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
! 	stpio_configure_pin(pin, STPIO_IN);
  	pin->name = NULL;
  	pin->func = 0;
  	pin->dev  = 0;
--- 172,178 ----
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
! //	stpio_configure_pin(pin, STPIO_IN);
  	pin->name = NULL;
  	pin->func = 0;
  	pin->dev  = 0;
*** a/arch/sh/boards/st/mb448/setup.c	2011-01-05 19:06:49.000000000 +0100
--- b/setup.c	2011-01-07 22:40:50.928603786 +0100
***************
*** 18,42 ****
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <linux/phy.h>
  #include <asm/irl.h>
  
  static struct stpio_pin *vpp_pio;
  
! static int ascs[2] __initdata = { 2, 3 };
  
  void __init mb448_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7109E Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
--- 18,65 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/phy.h>
  #include <asm/irl.h>
  
  static struct stpio_pin *vpp_pio;
  
! static int ascs[2] __initdata = { 2 };
! 
! const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
! const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
! 
! static struct bpa2_partition_desc bpa2_parts_table[] = {
! 	{
! 		.name  = "LMI_VID",
! 		.start = 0x10800000,
! 		.size  = 0x03800000,
! 		.flags = 0,
! 		.aka   = LMI_VID_partalias
! 	},
! 	{
! 		.name  = "LMI_SYS",
! 		.start = 0,
! 		.size  = 0x02600000,
! 		.flags = 0,
! 		.aka   = LMI_SYS_partalias
! 	}
! };
! 
  
  void __init mb448_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7109E Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 1, 0);
!   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
***************
*** 62,84 ****
  
  static void set_vpp(struct map_info * info, int enable)
  {
! 	stpio_set_pin(vpp_pio, enable);
  }
  
! static struct mtd_partition mtd_parts_table[3] = {
  	{
! 		.name = "Boot firmware",
! 		.size = 0x00040000,
! 		.offset = 0x00000000,
! 	}, {
! 		.name = "Kernel",
! 		.size = 0x00100000,
! 		.offset = 0x00040000,
! 	}, {
! 		.name = "Root FS",
! 		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00140000,
! 	}
  };
  
  static struct physmap_flash_data physmap_flash_data = {
--- 85,200 ----
  
  static void set_vpp(struct map_info * info, int enable)
  {
! //	stpio_set_pin(vpp_pio, enable);
  }
  
! static struct mtd_partition mtd_parts_table[] = 
! {
! #if 1
  	{
! 	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
! 	 .size = 0x00040000,
! 	 .offset = 0x00000000,
! 	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
! 	 },
! 	 {
! 	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
! 	 .size = 0x001C0000,
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
! 	 .size = 0x0A0000,	
! 	 .offset = 0x00200000,
! 	 },
! 	 {
! 	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
! 	 .size = 0x240000,	/* will expand to the end of the flash */
! 	 .offset = 0x002A0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 1		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 2		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 3		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
! 	 .size = 0x01000000,	/* will expand to the end of the flash */
! 	 .offset = 0x00000000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 }	 
! #else
! 	{
! 	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
! 	 .size = 0x00040000,
! 	 .offset = 0x00000000,
! 	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
! 	 },
! 	 {
! 	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
! 	 .size = 0x001C0000,
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
! 	 .size = 0x0A0000,	
! 	 .offset = 0x00200000,
! 	 },
! 	 {
! 	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
! 	 .size = 0x240000,	/* will expand to the end of the flash */
! 	 .offset = 0x002A0000,
! 	 },
! 	 {
! 	 .name = "APP_Modules		0xA04E.0000-0xA0AF.FFFF",
! 	 .size = 0x0620000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "GTK Lib		0xA0B0.0000-0xA0FF.FFFF",
! 	 .size = 0x00500000,	/* will expand to the end of the flash */
! 	 .offset = 0x00B00000,
! 	 },
! 	 {
! 	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
! 	 .size = 0x01000000,	/* will expand to the end of the flash */
! 	 .offset = 0x00000000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 }	 
! #endif	 
  };
  
  static struct physmap_flash_data physmap_flash_data = {
***************
*** 90,96 ****
  
  static struct resource physmap_flash_resource = {
  	.start		= 0x00000000,
! 	.end		= 0x00800000 - 1,
  	.flags		= IORESOURCE_MEM,
  };
  
--- 206,212 ----
  
  static struct resource physmap_flash_resource = {
  	.start		= 0x00000000,
! 	.end		= 0x01000000 - 1,
  	.flags		= IORESOURCE_MEM,
  };
  
***************
*** 119,126 ****
  	.resource	= (struct resource[]) {
                  {
  			.name	= "phyirq",
! 			.start	= IRL0_IRQ,
! 			.end	= IRL0_IRQ,
  			.flags	= IORESOURCE_IRQ,
  		},
  	},
--- 235,242 ----
  	.resource	= (struct resource[]) {
                  {
  			.name	= "phyirq",
! 			.start	= IRL3_IRQ,
! 			.end	= IRL3_IRQ,
  			.flags	= IORESOURCE_IRQ,
  		},
  	},
***************
*** 135,159 ****
  	&mb448_phy_device,
  };
  
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
! 	stx7100_configure_ethernet(0, 0, 0);
  
! 	vpp_pio = stpio_request_pin(2,7, "VPP", STPIO_OUT);
  
! 	/* Reset the SMSC 91C111 Ethernet chip */
! 	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
  					     STPIO_OUT, 0);
! 	udelay(1);
! 	stpio_set_pin(smc91x_reset, 1);
! 	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
  
  	return platform_add_devices(mb448_devices,
  				    ARRAY_SIZE(mb448_devices));
  }
--- 251,283 ----
  	&mb448_phy_device,
  };
  
+ static struct plat_stm_pwm_data pwm_private_info = {
+ 	.flags		= PLAT_STM_PWM_OUT1,
+ };
+ 
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
+ 	stx7100_configure_pwm(&pwm_private_info);	
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
! 	stx7100_configure_ethernet(0, 1, 0);
  
! //	vpp_pio = stpio_request_pin(2,7, "VPP", STPIO_OUT);
  
! 	/* Reset the USB POWER 
! 	smc91x_reset = stpio_request_set_pin(5, 7, "smc91x_reset",
  					     STPIO_OUT, 0);
! //	udelay(1);
! //	stpio_set_pin(smc91x_reset, 1);
! //	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
  
+ 	udelay( 10 );
+ 	stpio_free_pin( smc91x_reset );
+ */
  	return platform_add_devices(mb448_devices,
  				    ARRAY_SIZE(mb448_devices));
  }

*** linux-sh4/drivers/net/stmmac/common.h	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/common.h.patched	2011-02-03 12:07:07.000000000 +0100
***************
*** 207,232 ****
  	return;
  }
  
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low)
  {
! 	unsigned int hi_addr, lo_addr;
! 
! 	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
! 
! 	/* Extract the MAC address from the high and low words */
! 	addr[0] = lo_addr & 0xff;
! 	addr[1] = (lo_addr >> 8) & 0xff;
! 	addr[2] = (lo_addr >> 16) & 0xff;
! 	addr[3] = (lo_addr >> 24) & 0xff;
! 	addr[4] = hi_addr & 0xff;
! 	addr[5] = (hi_addr >> 8) & 0xff;
  
  	return;
  }
--- 207,238 ----
  	return;
  }
  
+ static inline unsigned char hex(char ch)
+ {
+ 	if (ch >= 'a' && ch <= 'f')
+ 		return ch-'a'+10;
+ 	if (ch >= 'A' && ch <= 'F')
+ 		return ch-'A'+10;
+ 	if (ch >= '0' && ch <= '9')
+ 		return ch-'0';
+ 	return -1;
+ }
+ 
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low, char* ethaddr)
  {
! 	int i, j;
! 	for(i = 0, j = 0; i < 6; i++)
! 	{
! 		addr[i] = (hex(ethaddr[j])<<4) + hex(ethaddr[j + 1]);
! 		j += 3;
! 	}
! 	printk("PARSE CMDLINE: %s\n", ethaddr);
! 	printk("ETHADDR: %02X:%02X:%02X:%02X:%02X:%02X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
  
  	return;
  }
***************
*** 296,302 ****
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n);
  };
  
  struct mac_link {
--- 302,308 ----
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n, char* ethaddr);
  };
  
  struct mac_link {
*** linux-sh4/drivers/net/stmmac/gmac.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/gmac.c.patched	2011-02-03 12:11:18.000000000 +0100
***************
*** 414,423 ****
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n));
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
--- 414,423 ----
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n, char* ethaddr)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n), ethaddr);
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
*** linux-sh4/drivers/net/stmmac/mac100.c	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/mac100.c.patched	2011-02-03 12:11:15.000000000 +0100
***************
*** 280,288 ****
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW);
  }
  
  static void mac100_set_filter(struct net_device *dev)
--- 280,288 ----
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n, char* ethaddr)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW, ethaddr);
  }
  
  static void mac100_set_filter(struct net_device *dev)
*** linux-sh4/drivers/net/stmmac/stmmac_main.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/stmmac_main.c.patched	2011-02-03 12:07:11.000000000 +0100
***************
*** 143,148 ****
--- 143,150 ----
  module_param(tx_coe, int, S_IRUGO | S_IWUSR);
  MODULE_PARM_DESC(tx_coe, "GMAC COE type 2 [on/off]");
  
+ static char g_env_mac[] = "00:00:00:00:00:00";
+ 
  static const u32 default_msg_level = (NETIF_MSG_DRV | NETIF_MSG_PROBE |
  				      NETIF_MSG_LINK | NETIF_MSG_IFUP |
  				      NETIF_MSG_IFDOWN | NETIF_MSG_TIMER);
***************
*** 1883,1889 ****
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
--- 1885,1891 ----
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0, g_env_mac);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
***************
*** 2348,2353 ****
--- 2350,2358 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }
