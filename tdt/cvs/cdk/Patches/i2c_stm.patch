sh_stm: Increase robustness of I2C driver

- Added manual PIO reset on arbitration/slave mode detection
- Check for an unexpected stop condition on the bus
- Clear status register after reset
- Fix auto-retry on address error condition
- Better busy wait and stop condition wait
- Add delay after stop to comply with STOP/START tBUF delay
- Ensure we are in I2C mode before starting TX in prepare to read phase

Signed-off-by: Francesco Virlinzi <francesco.virlinzi@st.com>
Signed-off-by: Carl Shaw <carl.shaw@st.com>

Index: linux-2.6.17/drivers/i2c/busses/i2c-stm.c
===================================================================
--- linux-2.6.17.orig/drivers/i2c/busses/i2c-stm.c	2008-07-23 10:02:41.000000000 +0100
+++ linux-2.6.17/drivers/i2c/busses/i2c-stm.c	2008-07-23 10:10:49.000000000 +0100
@@ -3,16 +3,13 @@
  *
  * i2c-stm.c
  * i2c algorithms for STMicroelectronics SSC device
- * Version: 2.0 (1 April 2007)
+ * Version: 2.3 (9th Mar 2008)
  *
  * --------------------------------------------------------------------
  *
  *  Copyright (C) 2006  Virlinzi Francesco
  *                   <francesco.virlinzi@st.com>
  *
- * 23 August 2006 - Modified to support the 2.6.17 kernel version
- *	Virlinzi Francesco <francesco.virlinzi@st.com>
- *
  * May be copied or modified under the terms of the GNU General Public
  * License.  See linux/COPYING for more information.
  *
@@ -50,12 +47,31 @@
 #endif
 
 /* --- Defines for I2C --- */
-#define DEVICE_ID                    0x041175
-
+/* These values WILL produce physical clocks which are slower */
+/* Especially if hardware glith suppression is enabled        */
+/* They should probably be made board dependent?              */
 #define I2C_RATE_NORMAL            100000
 #define I2C_RATE_FASTMODE          400000
+
+
 #define NANOSEC_PER_SEC            1000000000
 
+/* Standard I2C timings */
+#define REP_START_HOLD_TIME_NORMAL      4000
+#define REP_START_HOLD_TIME_FAST         600
+#define START_HOLD_TIME_NORMAL          4000
+#define START_HOLD_TIME_FAST             600
+#define REP_START_SETUP_TIME_NORMAL     4700
+#define REP_START_SETUP_TIME_FAST        600
+#define DATA_SETUP_TIME_NORMAL           250
+#define DATA_SETUP_TIME_FAST             100
+#define STOP_SETUP_TIME_NORMAL          4000
+#define STOP_SETUP_TIME_FAST             600
+#define BUS_FREE_TIME_NORMAL            4700
+#define BUS_FREE_TIME_FAST              1300
+
+/* These values come from hw boys... */
+/*
 #define REP_START_HOLD_TIME_NORMAL   4000
 #define REP_START_HOLD_TIME_FAST     6500
 #define START_HOLD_TIME_NORMAL       4500
@@ -68,6 +84,7 @@
 #define STOP_SETUP_TIME_FAST          800
 #define BUS_FREE_TIME_NORMAL         5700
 #define BUS_FREE_TIME_FAST           1500
+*/
 
 /* Define for glitch suppression support */
 #ifdef CONFIG_I2C_STM_GLITCH_SUPPORT
@@ -86,6 +103,14 @@
      #define GLITCH_WIDTH_CLOCK			0
 #endif
 
+#ifdef CONFIG_I2C_STM_HW_GLITCH
+  #if CONFIG_HW_GLITCH_WIDTH > 0
+    #define HW_GLITCH_WIDTH                     CONFIG_HW_GLITCH_WIDTH
+  #else
+    #define HW_GLITCH_WIDTH                     1 /* in microseconds */
+  #endif
+#endif
+
 /* To manage normal vs fast mode */
 #define IIC_STM_CONFIG_SPEED_MASK          0x1
 #define IIC_STM_CONFIG_SPEED_NORMAL        0x0
@@ -110,7 +135,8 @@
 typedef enum _iic_fsm_error_e {
 	IIC_E_NO_ERROR = 0x0,
 	IIC_E_RUNNING = 0x1,
-	IIC_E_NOTACK = 0x2
+	IIC_E_NOTACK = 0x2,
+	IIC_E_ARBL = 0x4
 } iic_fsm_error_e;
 
 struct iic_ssc {
@@ -167,7 +193,7 @@
 		(struct ssc_t *)container_of(adap->adapter.dev.parent,struct ssc_t, dev);
 	unsigned short status;
 	short tx_fifo_status;
-	unsigned int idx;
+	unsigned int idx, previntmask;
 	unsigned short address;
 	struct i2c_msg *pmsg;
 	char fast_mode;
@@ -175,12 +201,31 @@
 		char bytes[2];
 		short word;
 	} tmp;
+	int tmp2=0;
 
 	dgb_print2("\n");
 
 	fast_mode = check_fastmode(adap);
 	pmsg = trsc->msgs_queue + trsc->current_msg;
 
+	/* Disable interrupts */
+	previntmask = ssc_load32(ssc_bus, SSC_IEN);
+	ssc_store32(ssc_bus, SSC_IEN, 0);
+
+	status = ssc_load32(ssc_bus, SSC_STA);
+
+	/* Slave mode detection - this should never happen as we don't support multi-master */
+        if ( trsc->state > IIC_FSM_START &&
+		((status & SSC_STA_ARBL) || !(ssc_load32(ssc_bus, SSC_CTL) & SSC_CTL_MS)) ){
+		dgb_print2("In SLAVE mode (state %d, status %08x)!\n", trsc->state, status);
+		trsc->status_error = IIC_E_ARBL;
+		ssc_store32(ssc_bus, SSC_TBUF, 0x1ff);
+		ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+		trsc->waitcondition = 0;
+		wake_up(&(ssc_bus->wait_queue));
+		return ;
+	}
+
 	trsc->state = trsc->next_state;
 
 	barrier();
@@ -197,8 +242,8 @@
 		 * check if the i2c timing register
 		 * of ssc are ready to use
 		 */
-		if (check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_FAST ||
-		   !check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_NORMAL )
+		if ((check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_FAST) ||
+		   (!check_fastmode(adap) && ssc_bus->i2c_timing != SSC_I2C_READY_NORMAL ))
 			iic_stm_setup_timing(adap);
 		jump_on_fsm_start(trsc);
 		break;
@@ -206,196 +251,194 @@
 	case IIC_FSM_START:
 	      be_fsm_start:
 		dgb_print2("-Start address 0x%x\n", pmsg->addr);
-		ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_SR | SSC_CTL_EN | 0x1);
-		ssc_store16(ssc_bus, SSC_BRG,
+		ssc_store32(ssc_bus, SSC_CTL, SSC_CTL_SR | SSC_CTL_EN | SSC_CTL_MS |
+                            SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
+		ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+		ssc_store32(ssc_bus, SSC_BRG,
 			    (adap->config &
 			     IIC_STM_CONFIG_BAUDRATE_MASK) >> 16);
-		ssc_store16(ssc_bus, SSC_CTL,
+		/* enable RX, TX FIFOs */
+		ssc_store32(ssc_bus, SSC_CTL,
 			    SSC_CTL_EN | SSC_CTL_MS |
-			    SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
-		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+			    SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 |
+			    SSC_CTL_EN_TX_FIFO | SSC_CTL_EN_RX_FIFO);
+
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 			    (SSC_I2C_I2CFSMODE * fast_mode));
-		address = (pmsg->addr << 2) | 0x1;
+
 		trsc->start_state = IIC_FSM_START;
 		trsc->next_state  = IIC_FSM_DATA_WRITE;
+
+		address = (pmsg->addr << 2) | 0x1;
 		if (pmsg->flags & I2C_M_RD){
 			address |= 0x2;
 			trsc->next_state = IIC_FSM_PREPARE_2_READ;
 		}
 		trsc->idx_current_msg = 0;
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN);
-		ssc_store16(ssc_bus, SSC_TBUF, address);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+
+		status = ssc_load32(ssc_bus, SSC_STA);
+                if (status & SSC_STA_BUSY){
+                        dgb_print2("    bus BUSY!\n");
+                        trsc->waitcondition = 0; /* to not sleep */
+                        trsc->status_error = IIC_E_RUNNING;     /* to raise the error */
+                        return ;
+                }
+
+		ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN | SSC_IEN_ARBLEN);
+		ssc_store32(ssc_bus, SSC_TBUF, address);
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 			    SSC_I2C_STRTG | SSC_I2C_TXENB |
 			    (SSC_I2C_I2CFSMODE * fast_mode));
 		break;
 	case IIC_FSM_PREPARE_2_READ:
 		/* Just to clear th RBUF */
-		ssc_load16(ssc_bus, SSC_RBUF);
-		status = ssc_load16(ssc_bus, SSC_STA);
+		while (ssc_load32(ssc_bus, SSC_RX_FSTAT)){
+			dgb_print2(".");
+			ssc_load32(ssc_bus, SSC_RBUF);
+		}
+
+		if (ssc_load32(ssc_bus, SSC_TX_FSTAT)){
+                        printk(KERN_ERR "i2c-stm: IIC_FSM_PREPARE_2_READ:TX FIFO NOT empty!\n");
+                }
+
+		status = ssc_load32(ssc_bus, SSC_STA);
 		dgb_print2(" Prepare to Read... Status=0x%x\n", status);
+
 		if (status & SSC_STA_NACK)
 			jump_on_fsm_abort(trsc);
+
 		trsc->next_state = IIC_FSM_DATA_READ;
-#if !defined(CONFIG_I2C_STM_HW_FIFO)
-		if (!pmsg->len) {
-			dgb_print("Zero Read\n");
-			jump_on_fsm_stop(trsc);
-		}
-		ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
-		if (pmsg->len == 1) {
-			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-				    (SSC_I2C_I2CFSMODE * fast_mode));
-		} else {
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-				    SSC_I2C_ACKG |
-				    (SSC_I2C_I2CFSMODE * fast_mode));
-			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_RIEN);
-		}
-                break;
-#else
+
 		switch (pmsg->len) {
 		case 0: dgb_print2("Zero Read\n");
 			jump_on_fsm_stop(trsc);
-
-		case 1: ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+		case 1:
+			ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 				(SSC_I2C_I2CFSMODE * fast_mode));
-			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
-		   break;
+			ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+			ssc_store32(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_ARBLEN);
+			break;
 		default:
-			/* enable the fifos */
-			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
-				SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 |
-				SSC_CTL_EN_TX_FIFO | SSC_CTL_EN_RX_FIFO );
-			ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_ACKG |
+			ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+			ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_ACKG |
 				(SSC_I2C_I2CFSMODE * fast_mode));
 			/* P.S.: in any case the last byte has to be
 			 *       managed in a different manner
 			 */
 			for ( idx = 0;  idx < SSC_RXFIFO_SIZE &&
 					idx < pmsg->len-1 ;  ++idx )
-				ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
-			ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_RIEN | SSC_IEN_TIEN);
+				ssc_store32(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_RIEN | SSC_IEN_TIEN | SSC_IEN_ARBLEN);
 		}
 		break;
-#endif
 	case IIC_FSM_DATA_READ:
-#if !defined(CONFIG_I2C_STM_HW_FIFO)
-		status = ssc_load16(ssc_bus, SSC_STA);
-		if (!(status & SSC_STA_TE))
-			return;
-		tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
-		tmp.word = tmp.word >> 1;
-		pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
-		dgb_print2(" Data Read...Status=0x%x %d-%c\n",
-			status, tmp.bytes[0], tmp.bytes[0]);
-		/*Did we finish? */
-		if (trsc->idx_current_msg == pmsg->len) {
-			status &= ~SSC_STA_NACK;
-			jump_on_fsm_stop(trsc);
-		} else {
-			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
-			/*Is this the last byte? */
-			if (trsc->idx_current_msg == (pmsg->len - 1)) {
-				ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-					 (SSC_I2C_I2CFSMODE * fast_mode));
-				ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN);
-			}
-		}
-		break;
-#else
-		status = ssc_load16(ssc_bus, SSC_STA);
-		if (!(status & SSC_STA_TE))
-			return;
+		/* Check for transmit problem */
+                if (!(status & SSC_STA_TE)){
+                        ssc_store32(ssc_bus, SSC_IEN, previntmask);
+                        break;
+                }
+
+		/* Check for unexpected bus STOP condition */
+                if (status & SSC_STA_STOP){
+                        ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+                        jump_on_fsm_abort(trsc);
+                }
+
 		dgb_print2(" Data Read...Status=0x%x\n",status);
 		/* 1.0 Is it the last byte */
 		if (trsc->idx_current_msg == pmsg->len-1) {
-			tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
+			tmp.word = ssc_load32(ssc_bus, SSC_RBUF);
 			tmp.word = tmp.word >> 1;
 			pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
 			dgb_print2(" Rx Data %d-%c\n",tmp.bytes[0], tmp.bytes[0]);
-		} else
-		/* 1.1 take the bytes from Rx fifo */
-		for (idx = 0 ;  idx < SSC_RXFIFO_SIZE &&
-			trsc->idx_current_msg < pmsg->len-1; ++idx ) {
-				tmp.word = ssc_load16(ssc_bus, SSC_RBUF);
-				tmp.word = tmp.word >> 1;
-				pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
-				dgb_print2(" Rx Data %d-%c\n",tmp.bytes[0], tmp.bytes[0]);
-				}
+		} else {
+			/* 1.1 take the bytes from Rx fifo */
+			for (idx = 0 ;  idx < SSC_RXFIFO_SIZE &&
+				trsc->idx_current_msg < pmsg->len-1; ++idx ) {
+					tmp.word = ssc_load32(ssc_bus, SSC_RBUF);
+					tmp.word = tmp.word >> 1;
+					pmsg->buf[trsc->idx_current_msg++] = tmp.bytes[0];
+					dgb_print2(" Rx Data %d-%c\n",tmp.bytes[0], tmp.bytes[0]);
+			}
+		}
+
 		/* 2. Do we finish? */
 		if (trsc->idx_current_msg == pmsg->len) {
 			status &= ~SSC_STA_NACK;
 			jump_on_fsm_stop(trsc);
 		}
+
 		/* 3. Ask other 'idx' bytes in fifo mode
 		 *    but we want save the latest [pmsg->len-1]
 		 *    in any case...
+		 *    This will also clear any pending clockstretch
 		 */
 		for (idx=0; idx<SSC_TXFIFO_SIZE &&
 			   (trsc->idx_current_msg+idx)<pmsg->len-1; ++idx)
-			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store32(ssc_bus, SSC_TBUF, 0x1ff);
+
 		dgb_print2(" Asked %x bytes in fifo mode\n",idx);
-		ssc_store16(ssc_bus,SSC_IEN,SSC_IEN_RIEN | SSC_IEN_TIEN);
+
+		ssc_store32(ssc_bus,SSC_IEN,SSC_IEN_RIEN | SSC_IEN_TIEN | SSC_IEN_ARBLEN);
+
 		/*Is the next byte the last byte? */
 		if (trsc->idx_current_msg == (pmsg->len - 1)) {
 			dgb_print2(" Asked the last byte\n");
-			ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-			/* disable the fifos */
-			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
-				SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 );
-			ssc_store16(ssc_bus, SSC_TBUF, 0x1ff);
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+			ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+			ssc_store32(ssc_bus, SSC_TBUF, 0x1ff);
+			ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 					    (SSC_I2C_I2CFSMODE * fast_mode) );
-			ssc_store16(ssc_bus,SSC_IEN,SSC_IEN_NACKEN);
+			ssc_store32(ssc_bus,SSC_IEN,SSC_IEN_NACKEN | SSC_IEN_ARBLEN);
 		}
 		break;
-#endif
+
 	case IIC_FSM_DATA_WRITE:
-		/* just to clear some bits in the STATUS register */
-		ssc_load16(ssc_bus, SSC_RBUF);
+                /* Check for unexpected bus STOP condition */
+                if (status & SSC_STA_STOP){
+                        ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+                        jump_on_fsm_abort(trsc);
+                }
+
+                /* just to clear some bits in the STATUS register */
+                while (ssc_load32(ssc_bus, SSC_RX_FSTAT))
+                        ssc_load32(ssc_bus, SSC_RBUF);
 /*
  * Be careful!!!!
  * Here I don't have to use 0xdc0 for
  * the SSC_CLR register
  */
-		ssc_store16(ssc_bus, SSC_CLR, 0x9c0);
-		status = ssc_load16(ssc_bus, SSC_STA);
+		ssc_store32(ssc_bus, SSC_CLR, 0x9c0);
+
+		status = ssc_load32(ssc_bus, SSC_STA);
 		if (status & SSC_STA_NACK)
 			jump_on_fsm_abort(trsc);
-#if defined(CONFIG_I2C_STM_HW_FIFO)
-		tx_fifo_status = ssc_load16(ssc_bus,SSC_TX_FSTAT);
+
+		tx_fifo_status = ssc_load32(ssc_bus,SSC_TX_FSTAT);
 		if ( tx_fifo_status ) {
 			dgb_print2(" Fifo not empty\n");
+			ssc_store32(ssc_bus, SSC_IEN, previntmask);
 			break;
 		}
-#endif
+
 		if (trsc->idx_current_msg == pmsg->len || !(pmsg->len))
 			jump_on_fsm_stop(trsc);
+
 		dgb_print2(" Data Write...Status=0x%x 0x%x-%c\n", status,
 			  pmsg->buf[trsc->idx_current_msg],
 			  pmsg->buf[trsc->idx_current_msg]);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
+
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
 			    (SSC_I2C_I2CFSMODE * fast_mode));
 
 		trsc->next_state = IIC_FSM_DATA_WRITE;
-#if !defined(CONFIG_I2C_STM_HW_FIFO)
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_TEEN | SSC_IEN_NACKEN);
-#else
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_TIEN | SSC_IEN_NACKEN);
-		ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_EN | SSC_CTL_MS |
-                            SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8 |
-			    SSC_CTL_EN_TX_FIFO);
+		ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_TIEN | SSC_IEN_NACKEN | SSC_IEN_ARBLEN);
+
 		for (; tx_fifo_status < SSC_TXFIFO_SIZE &&
 			trsc->idx_current_msg < pmsg->len ;++tx_fifo_status )
-#endif
 		{
-		tmp.bytes[0] = pmsg->buf[trsc->idx_current_msg++];
-		ssc_store16(ssc_bus, SSC_TBUF, tmp.word << 1 | 0x1);
+			tmp.bytes[0] = pmsg->buf[trsc->idx_current_msg++];
+			ssc_store32(ssc_bus, SSC_TBUF, tmp.word << 1 | 0x1);
 		}
 		break;
 
@@ -412,33 +455,26 @@
 			jump_on_fsm_repstart(trsc);
 		}
 		dgb_print2(" Stop\n");
-		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+		ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+		trsc->next_state = IIC_FSM_COMPLETE;
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
 			    SSC_I2C_TXENB | SSC_I2C_STOPG |
 			    (SSC_I2C_I2CFSMODE * fast_mode));
-		trsc->next_state = IIC_FSM_COMPLETE;
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_STOPEN);
+		ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_STOPEN | SSC_IEN_ARBLEN);
 		break;
 
 	case IIC_FSM_COMPLETE:
-		be_fsm_complete:
+		/* be_fsm_complete: */
 		dgb_print2(" Complete\n");
-		ssc_store16(ssc_bus, SSC_IEN, 0x0);
-/*
- *  If there was some problem i can try again for adap->adapter.retries time...
- */
-		if ((trsc->status_error & IIC_E_NOTACK) &&	/* there was a problem */
-		    trsc->start_state == IIC_FSM_START &&	/* it cames from start state */
-		    trsc->idx_current_msg == 0 &&		/* the problem is on address */
-		    ++trsc->attempt <= adap->adapter.retries) {
-			trsc->status_error = 0;
-			jump_on_fsm_start(trsc);
-		}
+		ssc_store32(ssc_bus, SSC_IEN, 0x0);
 		if (!(trsc->status_error & IIC_E_NOTACK))
 			trsc->status_error = IIC_E_NO_ERROR;
+
+		udelay(5);
 		trsc->waitcondition = 0;
 		wake_up(&(ssc_bus->wait_queue));
 		break;
+
 	case IIC_FSM_REPSTART:
 	      be_fsm_repstart:
 		pmsg = trsc->msgs_queue + trsc->current_msg;
@@ -446,67 +482,101 @@
 		trsc->start_state = IIC_FSM_REPSTART;
 		trsc->idx_current_msg = 0;
 		trsc->next_state = IIC_FSM_REPSTART_ADDR;
-		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB
+		ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+		if(ssc_load32(ssc_bus, SSC_STA) & SSC_STA_REPSTRT)
+			tmp2=1;
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB
 			    | SSC_I2C_REPSTRTG | (SSC_I2C_I2CFSMODE *
 						  fast_mode));
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_REPSTRTEN);
+		if(tmp2)
+			udelay(5);
+		ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_REPSTRTEN | SSC_IEN_ARBLEN );
 		break;
+
 	case IIC_FSM_REPSTART_ADDR:
 		dgb_print2("-Rep Start addr 0x%x\n", pmsg->addr);
-		ssc_store16(ssc_bus, SSC_CLR, 0xdc0);
-		ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
+		/* Clear repstart bit */
+		ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_TXENB |
 			    (SSC_I2C_I2CFSMODE * fast_mode));
+
+		ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
 		address = (pmsg->addr << 2) | 0x1;
 		trsc->next_state = IIC_FSM_DATA_WRITE;
 		if (pmsg->flags & I2C_M_RD) {
 			address |= 0x2;
 			trsc->next_state = IIC_FSM_PREPARE_2_READ;
 		}
-		ssc_store16(ssc_bus, SSC_TBUF, address);
-		ssc_store16(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN);
+		ssc_store32(ssc_bus, SSC_TBUF, address);
+		ssc_store32(ssc_bus, SSC_IEN, SSC_IEN_NACKEN | SSC_IEN_TEEN | SSC_IEN_ARBLEN);
 		break;
 	default:
-		printk(KERN_ERR " Error in the FSM\n");
+		printk(KERN_ERR "i2c-stm: Error in the FSM\n");
 		;
 	}
 	return;
 }
 
-static void iic_wait_stop_condition(struct ssc_t *ssc_bus)
+static int iic_wait_stop_condition(struct ssc_t *ssc_bus)
 {
-  unsigned int idx;
-/*
- * Look for a stop condition on the bus
- */
-  dgb_print("\n");
-  for ( idx = 0; idx < 5 ; ++idx )
-    if ((ssc_load16(ssc_bus,SSC_STA) & SSC_STA_STOP) == 0)
-        mdelay(2);
-/*
- * At this point I hope I detected a stop condition
- * but in any case I return and I will tour off the ssc....
- */
+	unsigned int idx;
+
+	dgb_print("\n");
+	for ( idx = 0; idx < 5 ; ++idx ){
+		if (ssc_load32(ssc_bus,SSC_STA) & SSC_STA_STOP)
+			return 1;
+       		mdelay(2);
+	}
+	return 0;
 }
 
-static void iic_wait_free_bus(struct ssc_t *ssc_bus)
+static int iic_wait_free_bus(struct ssc_t *ssc_bus)
 {
-#if 1
-  unsigned int idx;
-/*
- * Look for a free condition on the bus
- */
-  dgb_print("\n");
-  for ( idx = 0; idx < 5 ; ++idx ) {
-    if (!(ssc_load16(ssc_bus,SSC_STA) & SSC_STA_BUSY) )
-	return ;
-    mdelay(2);
-  }
-#endif
+	unsigned int idx;
+
+	dgb_print("\n");
+	for ( idx = 0; idx < 5 ; ++idx ){
+		if (!(ssc_load32(ssc_bus,SSC_STA) & SSC_STA_BUSY) )
+			return 1;
+    		mdelay(2);
+	}
+
+	return 0;
+}
 /*
- * At this point I hope I detected a free bus
- * but in any case I return and I will tour off the ssc....
+ * Issue stop condition on the bus by toggling PIO lines
  */
+static void iic_pio_stop(struct ssc_t *ssc_bus)
+{
+        int cnt = 0;
+
+        printk(KERN_WARNING "i2c-stm: doing PIO stop!\n");
+
+        /* Send STOP */
+        stpio_set_pin(ssc_bus->pio_clk, 0);
+        stpio_set_pin(ssc_bus->pio_data, 0);
+        stpio_configure_pin(ssc_bus->pio_clk, STPIO_BIDIR);
+        stpio_configure_pin(ssc_bus->pio_data, STPIO_BIDIR);
+        udelay(20);
+        stpio_set_pin(ssc_bus->pio_clk, 1);
+        udelay(20);
+        stpio_set_pin(ssc_bus->pio_data, 1);
+        udelay(30);
+        stpio_configure_pin(ssc_bus->pio_clk, STPIO_ALT_BIDIR);
+        stpio_configure_pin(ssc_bus->pio_data, STPIO_ALT_BIDIR);
+
+        /* Reset SSC */
+        ssc_store32(ssc_bus, SSC_CTL, SSC_CTL_SR | SSC_CTL_EN | SSC_CTL_MS |
+                            SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
+        ssc_store32(ssc_bus, SSC_CLR, 0xdc0);
+
+        /* Make sure SSC thinks the bus is free before continuing */
+        while (cnt < 10 && (ssc_load32(ssc_bus, SSC_STA) & (SSC_STA_BUSY | SSC_STA_NACK))){
+                mdelay(2);
+                cnt ++;
+        }
+
+        if (cnt == 10)
+                printk(KERN_ERR "i2c-stm:  Cannot recover bus.  Status: 0x%08x\n", ssc_load32(ssc_bus, SSC_STA));
 }
 
 /*
@@ -534,8 +604,11 @@
 		};
 
 	dgb_print("\n");
-	ssc_request_bus(ssc_bus, iic_state_machine, &transaction);
-	iic_wait_free_bus(ssc_bus);
+	ssc_request_bus(ssc_bus, (void*)iic_state_machine, &transaction);
+
+iic_xfer_retry:
+	if(!iic_wait_free_bus(ssc_bus))
+		iic_pio_stop(ssc_bus);
 
 	iic_state_machine(&transaction);
 
@@ -548,43 +621,59 @@
 	result = transaction.current_msg;
 
 	if (unlikely(transaction.status_error != IIC_E_NO_ERROR || timeout <= 0)) {
-		/* There was some problem */
-		if(timeout<=0){
-			/* There was a timeout !!!
-			   - disable the interrupt
-			   - generate a stop condition on the bus
-			   all this task are done without interrupt....
-			 */
-			ssc_store16(ssc_bus, SSC_IEN, 0x0);
-			ssc_store16(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
-				    SSC_I2C_STOPG | SSC_I2C_TXENB |
-				    (SSC_I2C_I2CFSMODE * check_fastmode(adap)));
-			/* wait until the ssc detects a Stop condition on the bus */
-			/* but before we do that we enable all the interrupts     */
-			local_irq_restore(flag);
-
-			iic_wait_stop_condition(ssc_bus);
-
-			/* turn off the ssc */
-/*
- * Don't disable the SSC as this causes the SDA to go low, causing problems
- * for some slave devices.
- *			ssc_store16(ssc_bus, SSC_I2C, 0 );
- *			ssc_store16(ssc_bus, SSC_CTL, SSC_CTL_SR);
- *			ssc_store16(ssc_bus, SSC_CTL, 0 );
- */
-		} else
-			local_irq_restore(flag);
+		if ((transaction.status_error & IIC_E_NOTACK) &&
+                        transaction.start_state == IIC_FSM_START &&
+                        ++transaction.attempt <= adap->adapter.retries){
+                                /* error on the address - automatically retry */
+                                /* this used to be done in the FSM complete but it was not safe */
+                                /* there as we need to wait for the bus to not be busy before */
+                                /* doing another transaction */
+                                printk(KERN_ERR "i2c-stm: error on address.  auto retry %d\n", transaction.attempt);
+                                transaction.status_error = 0;
+                                local_irq_restore(flag);
+                                goto iic_xfer_retry;
+                } else if (transaction.status_error == IIC_E_ARBL){
+                        /* Arbitration error */
+                        printk(KERN_ERR "i2c-stm: arbitration error\n");
+                        ssc_store32(ssc_bus, SSC_CLR, SSC_CLR_SSCARBL);
+                        ssc_store32(ssc_bus, SSC_CTL, ssc_load32(ssc_bus, SSC_CTL) | SSC_CTL_MS);
+                        local_irq_restore(flag);
+
+                        /* Manually issue stop condition on the bus */
+                        iic_pio_stop(ssc_bus);
+                } else {
+			/* There was some problem */
+			if(timeout<=0){
+				/* There was a timeout !!!
+				   - disable the interrupt
+				   - generate a stop condition on the bus
+				   all this task are done without interrupt....
+				 */
+				ssc_store32(ssc_bus, SSC_IEN, 0x0);
+				ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM |
+					    SSC_I2C_STOPG | SSC_I2C_TXENB |
+					    (SSC_I2C_I2CFSMODE * check_fastmode(adap)));
+				/* wait until the ssc detects a Stop condition on the bus */
+				/* but before we do that we enable all the interrupts     */
+				local_irq_restore(flag);
+
+				if (!iic_wait_stop_condition(ssc_bus)){
+					printk(KERN_ERR "i2c-stm: Error.  Manually stopping transaction.\n");
+                                        iic_pio_stop(ssc_bus);
+				}
+			} else
+				local_irq_restore(flag);
 
-		if (!timeout){
-			printk(KERN_ERR
-			       "stm-i2c: Error timeout in the finite state machine\n");
-			result = -ETIMEDOUT;
-		} else if (timeout < 0) {
-			dgb_print("stm-i2c: interrupt or error in wait event\n");
-			result = timeout;
-		} else
-			result = -EREMOTEIO;
+			if (!timeout){
+				printk(KERN_ERR
+				       "stm-i2c: Error timeout in the finite state machine\n");
+				result = -ETIMEDOUT;
+			} else if (timeout < 0) {
+				dgb_print("stm-i2c: interrupt or error in wait event\n");
+				result = timeout;
+			} else
+				result = -EREMOTEIO;
+		}
 	} else
 		local_irq_restore(flag);
 
@@ -592,31 +681,32 @@
 
 	return result;
 }
-
+#ifdef  CONFIG_I2C_DEBUG_BUS
 static void iic_stm_timing_trace(struct iic_ssc *adap)
 {
 	struct ssc_t *ssc_bus =
 			container_of(adap->adapter.dev.parent, struct ssc_t, dev);
 	dgb_print("SSC_BRG  %d\n", adap->config >> 16);
 	dgb_print("SSC_REP_START_HOLD %d\n",
-		  ssc_load16(ssc_bus, SSC_REP_START_HOLD));
+		  ssc_load32(ssc_bus, SSC_REP_START_HOLD));
 	dgb_print("SSC_REP_START_SETUP %d\n",
-		  ssc_load16(ssc_bus, SSC_REP_START_SETUP));
-	dgb_print("SSC_START_HOLD %d\n", ssc_load16(ssc_bus, SSC_START_HOLD));
-	dgb_print("SSC_DATA_SETUP %d\n", ssc_load16(ssc_bus, SSC_DATA_SETUP));
-	dgb_print("SSC_STOP_SETUP %d\n", ssc_load16(ssc_bus, SSC_STOP_SETUP));
-	dgb_print("SSC_BUS_FREE %d\n", ssc_load16(ssc_bus, SSC_BUS_FREE));
+		  ssc_load32(ssc_bus, SSC_REP_START_SETUP));
+	dgb_print("SSC_START_HOLD %d\n", ssc_load32(ssc_bus, SSC_START_HOLD));
+	dgb_print("SSC_DATA_SETUP %d\n", ssc_load32(ssc_bus, SSC_DATA_SETUP));
+	dgb_print("SSC_STOP_SETUP %d\n", ssc_load32(ssc_bus, SSC_STOP_SETUP));
+	dgb_print("SSC_BUS_FREE %d\n", ssc_load32(ssc_bus, SSC_BUS_FREE));
 	dgb_print("SSC_PRE_SCALER_BRG %d\n",
-		  ssc_load16(ssc_bus, SSC_PRE_SCALER_BRG));
+		  ssc_load32(ssc_bus, SSC_PRE_SCALER_BRG));
 	dgb_print("SSC_NOISE_SUPP_WIDTH %d\n",
-			ssc_load8(ssc_bus, SSC_NOISE_SUPP_WIDTH));
+			ssc_load32(ssc_bus, SSC_NOISE_SUPP_WIDTH));
 	dgb_print("SSC_PRSCALER %d\n",
-			ssc_load8(ssc_bus, SSC_PRSCALER));
+			ssc_load32(ssc_bus, SSC_PRSCALER));
 	dgb_print("SSC_NOISE_SUPP_WIDTH_DATAOUT %d\n",
-			ssc_load16(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT));
+			ssc_load32(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT));
 	dgb_print("SSC_PRSCALER_DATAOUT %d\n",
-			ssc_load16(ssc_bus, SSC_PRSCALER_DATAOUT));
+			ssc_load32(ssc_bus, SSC_PRSCALER_DATAOUT));
 }
+#endif
 
 static void iic_stm_setup_timing(struct iic_ssc *adap)
 {
@@ -630,20 +720,20 @@
 	unsigned short iic_stop_setup;
 	unsigned short iic_bus_free;
 	unsigned short iic_pre_scale_baudrate = 1;
-	unsigned short iic_glitch_width;
-	unsigned short iic_glitch_width_dataout;
-	unsigned char  iic_prescaler;
-	unsigned char  iic_prescaler_dataout;
-	unsigned long  clock = ssc_get_clock()+5000000; /* +5000000 for rounding */
-	unsigned long  ns_per_clk = NANOSEC_PER_SEC / clock;
+#ifdef CONFIG_I2C_STM_HW_GLITCH
+        unsigned short iic_glitch_width;
+        unsigned short iic_glitch_width_dataout;
+        unsigned char  iic_prescaler;
+        unsigned short iic_prescaler_dataout;
+#endif
+	unsigned long  clock = ssc_get_clock();
+        unsigned long  ns_per_clk;
 
 	dgb_print("Assuming %d MHz for the Timing Setup\n",
 		clock / 1000000);
 
-	iic_prescaler          = clock / 10000000;
-	iic_prescaler_dataout  = clock / 10000000;
-	iic_glitch_width_dataout = GLITCH_WIDTH_DATA/100;
-
+	clock += 500000; /* +0.5 Mhz for rounding */
+        ns_per_clk = NANOSEC_PER_SEC / clock;
 
 	if (check_fastmode(adap)) {
 		ssc_bus->i2c_timing = SSC_I2C_READY_FAST;
@@ -657,7 +747,6 @@
 		iic_data_setup =(DATA_SETUP_TIME_FAST+GLITCH_WIDTH_DATA) /ns_per_clk;
 		iic_stop_setup =(STOP_SETUP_TIME_FAST+GLITCH_WIDTH_CLOCK) /ns_per_clk;
 		iic_bus_free =(BUS_FREE_TIME_FAST+GLITCH_WIDTH_DATA) /ns_per_clk;
-		iic_glitch_width = 0;
 	} else {
 		ssc_bus->i2c_timing = SSC_I2C_READY_NORMAL;
 		iic_baudrate = clock  / (2 * I2C_RATE_NORMAL);
@@ -670,24 +759,37 @@
 		iic_data_setup =( DATA_SETUP_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
 		iic_stop_setup =( STOP_SETUP_TIME_NORMAL+GLITCH_WIDTH_CLOCK) / ns_per_clk;
 		iic_bus_free =( BUS_FREE_TIME_NORMAL+GLITCH_WIDTH_DATA) / ns_per_clk;
-		iic_glitch_width = (GLITCH_WIDTH_DATA*(clock/10000000))/(iic_prescaler*1000);
 	}
 
 	adap->config &= ~IIC_STM_CONFIG_BAUDRATE_MASK;
 	adap->config |= iic_baudrate << 16;
 
-	ssc_store16(ssc_bus, SSC_REP_START_HOLD, iic_rep_start_hold);
-	ssc_store16(ssc_bus, SSC_START_HOLD, iic_start_hold);
-	ssc_store16(ssc_bus, SSC_REP_START_SETUP, iic_rep_start_setup);
-	ssc_store16(ssc_bus, SSC_DATA_SETUP, iic_data_setup);
-	ssc_store16(ssc_bus, SSC_STOP_SETUP, iic_stop_setup);
-	ssc_store16(ssc_bus, SSC_BUS_FREE, iic_bus_free);
-	ssc_store16(ssc_bus, SSC_PRE_SCALER_BRG, iic_pre_scale_baudrate);
-	ssc_store8(ssc_bus, SSC_PRSCALER, iic_prescaler);
-	ssc_store8(ssc_bus,  SSC_NOISE_SUPP_WIDTH, iic_glitch_width);
-	ssc_store16(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT, iic_glitch_width_dataout);
-	ssc_store16(ssc_bus, SSC_PRSCALER_DATAOUT, iic_prescaler_dataout);
-	iic_stm_timing_trace(adap);
+	ssc_store32(ssc_bus, SSC_REP_START_HOLD, iic_rep_start_hold);
+	ssc_store32(ssc_bus, SSC_START_HOLD, iic_start_hold);
+	ssc_store32(ssc_bus, SSC_REP_START_SETUP, iic_rep_start_setup);
+	ssc_store32(ssc_bus, SSC_DATA_SETUP, iic_data_setup);
+	ssc_store32(ssc_bus, SSC_STOP_SETUP, iic_stop_setup);
+	ssc_store32(ssc_bus, SSC_BUS_FREE, iic_bus_free);
+	ssc_store32(ssc_bus, SSC_PRE_SCALER_BRG, iic_pre_scale_baudrate);
+
+#ifdef CONFIG_I2C_STM_HW_GLITCH
+        /* See DDTS GNBvd40668 */
+        iic_prescaler = 1;
+        iic_glitch_width = HW_GLITCH_WIDTH * clock / 100000000; /* width in uS */
+        iic_glitch_width_dataout = 1;
+        iic_prescaler_dataout = clock / 10000000;
+
+        ssc_store32(ssc_bus, SSC_PRSCALER, iic_prescaler);
+        ssc_store32(ssc_bus, SSC_NOISE_SUPP_WIDTH, iic_glitch_width);
+        ssc_store32(ssc_bus, SSC_NOISE_SUPP_WIDTH_DATAOUT, iic_glitch_width_dataout);
+        ssc_store32(ssc_bus, SSC_PRSCALER_DATAOUT, iic_prescaler_dataout);
+#endif
+        ssc_store32(ssc_bus, SSC_I2C, SSC_I2C_I2CM);
+        ssc_store32(ssc_bus, SSC_BRG, iic_baudrate);
+
+#ifdef  CONFIG_I2C_DEBUG_BUS
+        iic_stm_timing_trace(adap);
+#endif
 	return;
 }
 
@@ -698,19 +800,15 @@
 	    container_of(adapter, struct iic_ssc, adapter);
 	switch (cmd) {
 	case I2C_STM_IOCTL_FAST:
-		dgb_print("ioctl fast\n");
+		dgb_print("ioctl fast 0x%x\n",arg);
 		iic_adap->config &= ~IIC_STM_CONFIG_SPEED_MASK;
 		if (arg)
 			iic_adap->config |=
 			    IIC_STM_CONFIG_SPEED_FAST;
 		break;
 	default:
-		printk(KERN_WARNING" i2c-ioctl not managed\n");
+		printk(KERN_WARNING" %s: i2c-ioctl not managed\n",__FUNCTION__);
 	}
-/*
- * the timeout and the retries ioctl
- * are managed by i2c core system
- */
 	return 0;
 }
 
@@ -757,6 +855,7 @@
 	struct iic_ssc *iic_stm;
 
 	for (idx = 0; idx < ssc_number; ++idx) {
+               dgb_print("*** Processing ssc number %d  capability %d ***\n", idx, ssc_capability(idx));
 		if (!(ssc_capability(idx) & SSC_I2C_CAPABILITY))
 			continue;
 		iic_stm =
Index: linux-2.6.17/drivers/i2c/busses/Kconfig
===================================================================
--- linux-2.6.17.orig/drivers/i2c/busses/Kconfig	2008-07-23 10:02:41.000000000 +0100
+++ linux-2.6.17/drivers/i2c/busses/Kconfig	2008-07-23 10:08:21.000000000 +0100
@@ -553,12 +553,6 @@
 
 endchoice
 
-config I2C_STM_HW_FIFO
-	bool "I2C hardware SSC Fifo support"
-	depends on I2C_STM
-	help
-	  Enable this option to print out information on STM I2C (SSC) device driver
-
 config I2C_STM_GLITCH_SUPPORT
 	bool "I2C hardware glitch suppression support"
 	depends on I2C_STM
@@ -578,4 +572,17 @@
 	int "Glitch data width"
 	default "500"
 
+config I2C_STM_HW_GLITCH
+	bool "I2C filter glitch suppression support"
+	depends on I2C_STM
+	help
+	  Enable this option to add filter glitch suppression support in the
+	  STM I2C (SSC) device driver.
+	  Set the glitch width in MICROSECONDS or use the default value of 1uS.
+
+config HW_GLITCH_WIDTH
+	depends on I2C_STM_HW_GLITCH
+	int "Glitch suppression width in uS"
+	default "1"
+
 endmenu
Index: linux-2.6.17/include/linux/stm/stm_ssc.h
===================================================================
--- linux-2.6.17.orig/include/linux/stm/stm_ssc.h	2008-07-23 10:02:41.000000000 +0100
+++ linux-2.6.17/include/linux/stm/stm_ssc.h	2008-07-23 10:02:41.000000000 +0100
@@ -209,11 +209,8 @@
    we have to use the following macro
    to access the SSC I/O Memory
 */
-#define ssc_store16(ssc , offset, value) iowrite16(value,ssc->base+offset)
-#define ssc_store8( ssc , offset, value) iowrite8( value,ssc->base+offset)
-
-#define ssc_load16( ssc,offset)          ioread16(ssc->base+offset)
-#define ssc_load8(  ssc,offset)	         ioread8( ssc->base+offset)
+#define ssc_store32(ssc , offset, value) iowrite32(value,ssc->base+offset)
+#define ssc_load32( ssc,offset)          ioread32(ssc->base+offset)
 
 /*
  *   This macro could be used to built the capability field
Index: linux-2.6.17/drivers/stm/stm_ssc.c
===================================================================
--- linux-2.6.17.orig/drivers/stm/stm_ssc.c	2008-07-23 10:02:41.000000000 +0100
+++ linux-2.6.17/drivers/stm/stm_ssc.c	2008-07-23 10:02:41.000000000 +0100
@@ -173,8 +173,8 @@
 	pio_info = info->pio;
 
 	/* 0. skip if not SSC_I2C_CAPABILITY or SSC_SPI_CAPABILITY */
-	if (ssc_capability(ssc_data->ssc_id) != SSC_I2C_CAPABILITY &&
-	    ssc_capability(ssc_data->ssc_id) != SSC_SPI_CAPABILITY) {
+	if (!(ssc_capability(ssc_data->ssc_id) & SSC_I2C_CAPABILITY) &&
+	    !(ssc_capability(ssc_data->ssc_id) & SSC_SPI_CAPABILITY)) {
 		printk(KERN_INFO
 		       "st_ssc: bus%d - skipping configuration, "
 		       "no capability defined\n", ssc_data->ssc_id);
