diff -Nur linux-sh4-2.6.23.17_stm23_0123_orig/drivers/ata/libata-core.c linux-sh4/drivers/ata/libata-core.c
--- linux-sh4-2.6.23.17_stm23_0123_orig/drivers/ata/libata-core.c	2011-05-27 18:30:18.000000000 +0200
+++ linux-sh4/drivers/ata/libata-core.c	2011-05-25 22:31:00.000000000 +0200
@@ -3102,7 +3102,6 @@
 	iowrite8(ap->ctl | ATA_SRST, ioaddr->ctl_addr);
 	udelay(20);	/* FIXME: flush */
 	iowrite8(ap->ctl, ioaddr->ctl_addr);
-	ap->last_ctl = ap->ctl;
 
 	/* spec mandates ">= 2ms" before checking status.
 	 * We wait 150ms, because that was the magic delay used for
@@ -3201,7 +3200,6 @@
 	if (ap->flags & (ATA_FLAG_SATA_RESET | ATA_FLAG_SRST)) {
 		/* set up device control for ATA_FLAG_SATA_RESET */
 		iowrite8(ap->ctl, ioaddr->ctl_addr);
-		ap->last_ctl = ap->ctl;
 	}
 
 	DPRINTK("EXIT\n");
@@ -3587,10 +3585,8 @@
 	}
 
 	/* set up device control */
-	if (ap->ioaddr.ctl_addr) {
+	if (ap->ioaddr.ctl_addr)
 		iowrite8(ap->ctl, ap->ioaddr.ctl_addr);
-		ap->last_ctl = ap->ctl;
-	}
 
 	DPRINTK("EXIT\n");
 }
diff -Nur linux-sh4-2.6.23.17_stm23_0123_orig/drivers/ata/sata_stm.c linux-sh4/drivers/ata/sata_stm.c
--- linux-sh4-2.6.23.17_stm23_0123_orig/drivers/ata/sata_stm.c	2011-05-27 18:30:20.000000000 +0200
+++ linux-sh4/drivers/ata/sata_stm.c	2011-05-25 22:32:40.000000000 +0200
@@ -32,10 +32,9 @@
 #include <scsi/scsi_cmnd.h>
 #include <linux/libata.h>
 #include <linux/stm/soc.h>
-#include <linux/stm/pm.h>
 
 #define DRV_NAME			"sata_stm"
-#define DRV_VERSION			"0.6"
+#define DRV_VERSION			"0.5"
 
 /* Offsets of the component blocks */
 #define SATA_AHB2STBUS_BASE			0x00000000
@@ -226,15 +225,11 @@
 #define SERROR_ERR_C	(1<<9)
 #define SERROR_ERR_P	(1<<10)
 #define SERROR_ERR_E	(1<<11)
-#define SERROR_DIAG_N	(1<<16)
-#define SERROR_DIAG_X	(1<<26)
 
 #define SATA_FIS_SIZE	(8*1024)
 
-static int stm_sata_scr_read(struct ata_port *ap, unsigned int sc_reg,
-			     u32 *val);
-static int stm_sata_scr_write(struct ata_port *ap, unsigned int sc_reg,
-			      u32 val);
+static u32 stm_sata_scr_read (struct ata_port *ap, unsigned int sc_reg);
+static void stm_sata_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val);
 
 /* Layout of a DMAC Linked List Item (LLI)
  * DMAH_CH0_STAT_DST and DMAH_CH0_STAT_SRC are both 0 */
@@ -250,8 +245,6 @@
 {
 	unsigned long phy_init;		/* Initial value for PHYCR */
 	int softsg;			/* If using softsg */
-	int shared_dma_host_irq;	/* If we the interrupt from the DMA
-					 * and HOSTC are or'ed together */
 };
 
 struct stm_port_priv
@@ -272,7 +265,7 @@
 #define STM_MAX_LLIS	ATA_MAX_SECTORS
 #define STM_LLI_BYTES	(STM_MAX_LLIS * sizeof(struct stm_lli))
 
-static void stm_phy_configure(struct ata_port *ap)
+static void stm_phy_reset(struct ata_port *ap)
 {
 	void __iomem *mmio = ap->ioaddr.cmd_addr;
 	struct stm_host_priv *hpriv = ap->host->private_data;
@@ -297,10 +290,10 @@
 	 * phy_ctrl[24:20] iddqsub[4:0]
 	 * phy_ctrl[31:25] NOT DEFINED
 	 */
-	if (hpriv->phy_init) {
-		writel(hpriv->phy_init, mmio + SATA_PHYCR);
-		mdelay(100);
-	}
+	writel(hpriv->phy_init, mmio + SATA_PHYCR);
+        mdelay(100);
+
+	sata_phy_reset(ap);
 }
 
 /*
@@ -616,124 +609,61 @@
 	writel(0xffffffff, mmio_base + SATA_ERRMR);
 }
 
-static void stm_freeze(struct ata_port *ap)
-{
-	void __iomem *mmio = ap->ioaddr.cmd_addr;
-
-	/* Disable interrupts */
-	writel(0, mmio + SATA_INTMR);
-	readl(mmio + SATA_INTMR);	/* flush */
-}
-
-static void stm_thaw(struct ata_port *ap)
-{
-	void __iomem *mmio = ap->ioaddr.cmd_addr;
-
-	/* Reenable interrupts */
-	writel(SATA_INT_ERR, mmio + SATA_INTMR);
-}
-
-static int stm_prereset(struct ata_port *ap, unsigned long deadline)
-{
-	stm_phy_configure(ap);
-	return ata_std_prereset(ap, deadline);
-}
-
-static void stm_postreset(struct ata_port *ap, unsigned int *classes)
-{
-	void __iomem *mmio = ap->ioaddr.cmd_addr;
-
-	/* Enable notification of errors. These are reset by COMRESET. */
-	writel(0xffffffff, mmio + SATA_ERRMR);
-	writel(SATA_INT_ERR, mmio + SATA_INTMR);
-
-	ata_std_postreset(ap, classes);
-}
-
-static void stm_error_handler(struct ata_port *ap)
-{
-        ata_do_eh(ap, stm_prereset, ata_std_softreset,
-                  sata_std_hardreset, stm_postreset);
-}
-
-static void stm_post_internal_cmd(struct ata_queued_cmd *qc)
-{
-	stm_bmdma_stop(qc);
-}
-
-/* This needs munging to give per controller stats */
 static unsigned long error_count;
 static unsigned int print_error=1;
 
-static unsigned stm_sata_dma_irq(struct ata_port *ap)
+static irqreturn_t stm_sata_interrupt(int irq, void *dev_instance)
 {
-	void __iomem *mmio = ap->ioaddr.cmd_addr;
-	struct stm_port_priv *pp = ap->private_data;
-	int handled = 1;
-
-	if (readl(mmio + DMAC_STATUSTFR) & 1) {
-		/* DMA Transfer complete update soft S/G */
-
-		/* Ack the interrupt */
-		writel(1<<0, mmio + DMAC_CLEARTFR);
-
-		DPRINTK("softsg_node %p, end %p\n",
-			pp->softsg_node, pp->softsg_end);
+	struct ata_host *host = dev_instance;
+	unsigned int handled = 0;
+	unsigned int i;
+	unsigned long flags;
 
-		writel(pp->softsg_node->sar, mmio + DMAC_SAR0);
-		writel(pp->softsg_node->dar, mmio + DMAC_DAR0);
+DPRINTK("ENTER\n");
 
-		writel(pp->softsg_node->ctl0, mmio + DMAC_CTL0_0);
-		writel(pp->softsg_node->ctl1, mmio + DMAC_CTL0_1);
+	spin_lock_irqsave(&host->lock, flags);
 
-		if (pp->softsg_node != pp->softsg_end) {
-			pp->softsg_node++;
-		} else {
-			writel(1<<8 | 0<<0, mmio + DMAC_MASKTFR);
-		}
+	for (i = 0; i < host->n_ports; i++) {
+		struct ata_port *ap = host->ports[i];
+		void __iomem *mmio = ap->ioaddr.cmd_addr;
 
-		writel((1<<8) | (1<<0), mmio + DMAC_ChEnReg);
-	} else if (readl(mmio + DMAC_RAWERR) & 1) {
-		ata_port_printk(ap, KERN_ERR, "DMA error asserted\n");
-	}
+		if (readl(mmio + DMAC_STATUSTFR) & 1) {
+			/* DMA Transfer complete update soft S/G */
+			struct stm_port_priv *pp = ap->private_data;
 
-	return handled;
+			/* Ack the interrupt */
+			writel(1<<0, mmio + DMAC_CLEARTFR);
 
-}
+			DPRINTK("softsg_node %p, end %p\n", pp->softsg_node, pp->softsg_end);
 
-static unsigned stm_sata_host_irq(struct ata_port *ap)
-{
-	unsigned int handled = 0;
-	void __iomem *mmio = ap->ioaddr.cmd_addr;
-	struct ata_eh_info *ehi = &ap->eh_info;
-	u32 sstatus, serror;
+			writel(pp->softsg_node->sar, mmio + DMAC_SAR0);
+			writel(pp->softsg_node->dar, mmio + DMAC_DAR0);
 
-	if (readl(mmio + SATA_INTPR) & (SATA_INT_ERR)) {
+			writel(pp->softsg_node->ctl0, mmio + DMAC_CTL0_0);
+			writel(pp->softsg_node->ctl1, mmio + DMAC_CTL0_1);
 
-		stm_sata_scr_read(ap, SCR_STATUS, &sstatus);
-		stm_sata_scr_read(ap, SCR_ERROR, &serror);
-		stm_sata_scr_write(ap, SCR_ERROR, serror);
-
-		if (print_error)
-			ata_port_printk(ap, KERN_ERR,
-					"SStatus 0x%08x, SError 0x%08x\n",
-					sstatus, serror);
-		error_count++;
-
-		ata_ehi_clear_desc(ehi);
-		ata_ehi_push_desc(ehi, "SStatus 0x%08x, SError 0x%08x",
-				  sstatus, serror);
-		ehi->serror |= serror;
-
-		if (serror & (SERROR_DIAG_N | SERROR_DIAG_X)) {
-			ata_ehi_hotplugged(&ap->eh_info);
-			ata_ehi_push_desc(ehi, "Treating as hot-%splug",
-					  serror & SERROR_DIAG_X ? "" : "un");
-		}
+			if (pp->softsg_node != pp->softsg_end) {
+				pp->softsg_node++;
+			} else {
+				writel(1<<8 | 0<<0, mmio + DMAC_MASKTFR);
+			}
 
-		ata_port_freeze(ap);
-		handled = 1;
-	} else
+			writel((1<<8) | (1<<0), mmio + DMAC_ChEnReg);
+		} else
+		if (readl(mmio + DMAC_RAWERR) & 1) {
+			printk("DMA error asserted\n");
+		} else
+		if (readl(mmio + SATA_INTPR) & (SATA_INT_ERR)) {
+			/* Error code set in SError */
+			if (print_error) {
+				printk("%s: SStatus 0x%08x, SError 0x%08x\n", __FUNCTION__,
+				       stm_sata_scr_read(ap, SCR_STATUS),
+				       stm_sata_scr_read(ap, SCR_ERROR));
+			}
+			error_count++;
+			stm_sata_scr_write(ap, SCR_ERROR, -1);
+			handled = 1;
+		} else
 		if (ap && (!(ap->flags & ATA_FLAG_DISABLED))) {
 			struct ata_queued_cmd *qc;
 
@@ -742,47 +672,6 @@
 				handled += ata_host_intr(ap, qc);
 		}
 
-	return handled;
-}
-
-static irqreturn_t stm_sata_dma_interrupt(int irq, void *dev_instance)
-{
-	struct ata_host *host = dev_instance;
-	unsigned int handled = 0;
-	unsigned int i;
-	unsigned long flags;
-	struct stm_host_priv *hpriv = host->private_data;
-
-DPRINTK("ENTER DMA\n");
-
-	BUG_ON(hpriv->shared_dma_host_irq);
-
-	spin_lock_irqsave(&host->lock, flags);
-
-	for (i = 0; i < host->n_ports; i++)
-		handled += stm_sata_dma_irq(host->ports[i]);
-
-	spin_unlock_irqrestore(&host->lock, flags);
-
-	return IRQ_RETVAL(handled);
-}
-
-static irqreturn_t stm_sata_interrupt(int irq, void *dev_instance)
-{
-	struct ata_host *host = dev_instance;
-	unsigned int handled = 0;
-	unsigned int i;
-	unsigned long flags;
-	struct stm_host_priv *hpriv = host->private_data;
-
-DPRINTK("ENTER\n");
-
-	spin_lock_irqsave(&host->lock, flags);
-
-	for (i = 0; i < host->n_ports; i++) {
-		if (hpriv->shared_dma_host_irq)
-			handled += stm_sata_dma_irq(host->ports[i]);
-		handled += stm_sata_host_irq(host->ports[i]);
 	}
 
 	spin_unlock_irqrestore(&host->lock, flags);
@@ -795,25 +684,28 @@
 	/* TODO */
 }
 
-static int stm_sata_scr_read(struct ata_port *ap, unsigned int sc_reg, u32 *val)
+
+static u32 stm_sata_scr_read (struct ata_port *ap, unsigned int sc_reg)
 {
 	void __iomem *mmio = ap->ioaddr.cmd_addr;
+	u32 val;
 
-	if (sc_reg > SCR_CONTROL) return -EINVAL;
+	if (sc_reg > SCR_CONTROL)
+		return 0xffffffffU;
 
-	*val = readl(mmio + SATA_SCR0 + (sc_reg * 4));
-	return 0;
+	val = readl(mmio + SATA_SCR0 + (sc_reg * 4));
+	return val;
 }
 
-static int stm_sata_scr_write(struct ata_port *ap, unsigned int sc_reg, u32 val)
+static void stm_sata_scr_write (struct ata_port *ap, unsigned int sc_reg, u32 val)
 {
 	void __iomem *mmio = ap->ioaddr.cmd_addr;
 
 DPRINTK("%d = %08x\n", sc_reg, val);
-	if (sc_reg > SCR_CONTROL) return -EINVAL;
+	if (sc_reg > SCR_CONTROL)
+		return;
 
 	writel(val, mmio + SATA_SCR0 + (sc_reg * 4));
-	return 0;
 }
 
 static int stm_port_start (struct ata_port *ap)
@@ -933,9 +825,10 @@
 	.port_disable		= ata_port_disable,
 	.tf_load		= ata_tf_load,
 	.tf_read		= ata_tf_read,
-	.check_status		= ata_check_status,
 	.exec_command		= ata_exec_command,
+	.check_status		= ata_check_status,
 	.dev_select		= ata_noop_dev_select,
+	.phy_reset		= stm_phy_reset,
 	.check_atapi_dma	= stm_check_atapi_dma,
 	.bmdma_setup		= stm_bmdma_setup,
 	.bmdma_start		= stm_bmdma_start,
@@ -943,11 +836,9 @@
 	.bmdma_status		= stm_bmdma_status,
 	.qc_prep		= stm_qc_prep,
 	.qc_issue		= ata_qc_issue_prot,
+	.eng_timeout		= ata_eng_timeout, /* ?? */
 	.data_xfer		= stm_data_xfer,
-	.freeze			= stm_freeze,
-	.thaw			= stm_thaw,
-	.error_handler		= stm_error_handler,
-	.post_internal_cmd	= stm_post_internal_cmd,
+	.irq_handler		= stm_sata_interrupt,
 	.irq_clear		= stm_irq_clear,
 	.irq_on			= ata_dummy_irq_on,
 	.scr_read		= stm_sata_scr_read,
@@ -996,12 +887,9 @@
 	struct ata_port *ap;
 	struct stm_host_priv *hpriv = NULL;
 	unsigned long sata_rev, dmac_rev;
-	int dma_irq;
-	int ret;
-
 
 	printk(KERN_DEBUG DRV_NAME " version " DRV_VERSION "\n");
-
+        printk(KERN_INFO "SATA modified by B4Team\n\t");
 	host = ata_host_alloc_pinfo(dev, ppi, 1);
 	if (!host)
 		return -ENOMEM;
@@ -1094,46 +982,30 @@
 	/* time out count = 0xa0(160 dec)
 	 * time out enable = 1
 	 */
-	if (sata_private_info->pc_glue_logic_init)
-		writel(sata_private_info->pc_glue_logic_init,
-		       mmio_base + SATA_PC_GLUE_LOGIC);
+	writel(sata_private_info->pc_glue_logic_init,
+		mmio_base + SATA_PC_GLUE_LOGIC);
 
 	/* DMA controller set up */
 
 	/* Enable DMA controller */
 	writel(DMAC_DmaCfgReg_DMA_EN, mmio_base + DMAC_DmaCfgReg);
 
-	/* Clear initial Serror */
-	writel(-1, mmio_base + SATA_SCR1);
-
-	/* Finished hardware set up */
-
-	/* Now, are we on one of the later SATA IP's, we have the DMA and
-	 * host controller interrupt lines separated out. So if we have two
-	 * irq resources, then it is one of these
-	 */
-
-	dma_irq = platform_get_irq(pdev, 1);
-	if (dma_irq > 0) {
-		/* We have two interrupts */
-		if (devm_request_irq(host->dev, dma_irq, stm_sata_dma_interrupt,
-				     0, dev_driver_string(host->dev), host) < 0)
-			panic("Cannot register SATA dma interrupt %d\n",
-			      dma_irq);
-		hpriv->shared_dma_host_irq = 0;
-	} else {
-		hpriv->shared_dma_host_irq = 1;
-	}
+	/* SATA host controller set up */
 
-	ret = ata_host_activate(host, platform_get_irq(pdev, 0),
-				stm_sata_interrupt,
-				IRQF_SHARED, &stm_sht);
+	/* Clear serror register following probe, and before we enable
+	 * interrupts! */
+	/* scr_write(ap, SCR_ERROR, -1); */
+	writel(-1, mmio_base + SATA_SCR1);
 
-	if (ret && dma_irq > 0)
-		devm_free_irq(host->dev, dma_irq, host);
+	/* Enable notification of errors */
+	writel(0xffffffff, mmio_base + SATA_ERRMR);
+	writel(SATA_INT_ERR, mmio_base + SATA_INTMR);
 
-	return ret;
+	/* Finished hardware set up */
 
+	return ata_host_activate(host, platform_get_irq(pdev, 0),
+				 stm_sata_interrupt,
+				 IRQF_SHARED, &stm_sht);
 }
 
 static int stm_sata_remove(struct platform_device *pdev)
@@ -1141,27 +1013,6 @@
 	return 0;
 }
 
-#ifdef CONFIG_PM
-static int stm_sata_suspend(struct platform_device *pdev, pm_message_t state)
-{
-	if (state.event == PM_EVENT_SUSPEND) {
-		platform_pm_pwdn_req(pdev, HOST_PM, 1);
-		platform_pm_pwdn_ack(pdev, HOST_PM, 1);
-		}
-	return 0;
-}
-
-static int stm_sata_resume(struct platform_device *pdev)
-{
-	platform_pm_pwdn_req(pdev, HOST_PM, 0);
-	platform_pm_pwdn_ack(pdev, HOST_PM, 0);
-	return 0;
-}
-#else
-#define stm_sata_suspend	NULL
-#define stm_sata_resume		NULL
-#endif
-
 static struct platform_driver stm_sata_driver = {
 	.driver = {
 		.name = DRV_NAME,
@@ -1169,8 +1020,6 @@
 	},
 	.probe = stm_sata_probe,
 	.remove = stm_sata_remove,
-	.suspend = stm_sata_suspend,
-	.resume = stm_sata_resume,
 };
 
 static int __init stm_sata_init(void)
