*** linux-sh4/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
--- setup.c.patched	2011-01-22 12:22:31.340928000 +0100
***************
*** 276,281 ****
--- 276,309 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock4 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

*** linux-sh4/arch/sh/boards/st/pdk7105/setup.c	2011-02-02 01:06:34.097847325 +0100
--- setup.c.patched	2011-02-02 01:11:32.928138606 +0100
***************
*** 23,28 ****
--- 23,29 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/mtd/nand.h>
  #include <linux/stm/nand.h>
  #include <linux/spi/spi.h>
***************
*** 57,70 ****
   *
   */
  
! static int ascs[2] __initdata = { 2, 3 };
  
  static void __init pdk7105_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics PDK7105-SDK board initialisation\n");
  
  	stx7105_early_device_init();
! 	stx7105_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 58,100 ----
   *
   */
  
! const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
!                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
!  
! /*
! 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
! 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
! 0x40800000 - 0x47FFFFFF - linux   (120mb) 
! 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
! 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
! */
! static struct bpa2_partition_desc bpa2_parts_table[] = {
!     {
!  	    .name  = "bigphysarea",
!  	    .start = 0x48000000,
!  	    .size  = 0x02000000, /* 32 Mb */
!  	    .flags = 0,
!  	    .aka   = NULL
!     }, 
!     {
!  	    .name  = "LMI_IO",
!  	    .start = 0x4A000000,
!  	    .size  = 0x06000000, /* 92 Mb */
!  	    .flags = 0,
!  	    .aka   = LMI_IO_partalias
!     }, 
!  };
! 
! 
! static int ascs[1] __initdata = { 2 | (STASC_FLAG_NORTSCTS << 8)};
  
  static void __init pdk7105_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics PDK7105-SDK board initialisation\n");
  
  	stx7105_early_device_init();
! 	stx7105_configure_asc(ascs, 1, 0);
!    	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
*************** static struct plat_stm_pwm_data pwm_priv
*** 75,81 ****
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
  	.routing =
--- 105,111 ----
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
  	.routing =
*************** static struct plat_ssc_data ssc_private_
*** 85,91 ****
  
  static struct usb_init_data usb_init[2] __initdata = {
  	{
! 		.oc_en = 1,
  		.oc_actlow = 1,
  		.oc_pinsel = USB0_OC_PIO4_4,
  		.pwr_en = 1,
--- 115,121 ----
  
  static struct usb_init_data usb_init[2] __initdata = {
  	{
! 		.oc_en = 0,
  		.oc_actlow = 1,
  		.oc_pinsel = USB0_OC_PIO4_4,
  		.pwr_en = 1,
*************** static struct platform_device pdk7105_ph
*** 198,219 ****
  		.platform_data = &phy_private_data,
  	}
  };
! 
! static struct mtd_partition mtd_parts_table[3] = {
  	{
! 		.name = "Boot firmware",
  		.size = 0x00040000,
  		.offset = 0x00000000,
  	}, {
  		.name = "Kernel",
! 		.size = 0x00200000,
  		.offset = 0x00040000,
  	}, {
! 		.name = "Root FS",
! 		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00240000,
  	}
  };
  
  static struct physmap_flash_data pdk7105_physmap_flash_data = {
  	.width		= 2,
--- 228,306 ----
  		.platform_data = &phy_private_data,
  	}
  };
! #ifdef FUP_CAN_FLASH_CONFIG
! static struct mtd_partition mtd_parts_table[8] = {
  	{
! 		.name = "U-BOOT",
  		.size = 0x00040000,
  		.offset = 0x00000000,
  	}, {
  		.name = "Kernel",
! 		.size = 0x00300000,
! 		.offset = 0x00100000,
! 	}, {
! 		.name = "FW",
! 		.size = 0x006E0000,
! 		.offset = 0x00B20000,
! 	}, {
! 		.name = "EXT2",
! 		.size = 0x00BE0000,
! 		.offset = 0x01220000,
! 	}, {
! 		.name = "ROOT",
! 		.size = 0x0021E0000,
! 		.offset = 0x01E20000,
! 	}, { 
! 		.name = "EXT1",
! 		.size = 0x006E0000,
! 		.offset = 0x00420000,
! 	}, { 
! 		.name = "U-BOOT ENV",
! 		.size = 0x00020000,
  		.offset = 0x00040000,
+ 	}, { 
+  		.name = "Full", 
+  		.size = MTDPART_SIZ_FULL, 
+ 		.offset = 0x00100000, 
+ 	}
+ };
+ #else
+ static struct mtd_partition mtd_parts_table[8] = {
+ 	{
+ 		.name = "U-BOOT",
+ 		.size = 0x00040000,
+ 		.offset = 0x00000000,
  	}, {
! 		.name = "Kernel",
! 		.size = 0x00300000,
! 		.offset = 0x00100000,
! 	}, {
! 		.name = "FW",
! 		.size = 0x006E0000,
! 		.offset = 0x00B20000,
! 	}, {
! 		.name = "VAR",
! 		.size = 0x00BC0000,
! 		.offset = 0x01220000,
! 	}, {
! 		.name = "ROOT",
! 		.size = 0x001E00000,
! 		.offset = 0x02200000,
! 	}, {
! 		.name = "SWAP (VOLATILE)",
! 		.size = 0x006E0000,
! 		.offset = 0x00420000,
! 	}, { 
! 		.name = "U-BOOT ENV",
! 		.size = 0x00020000,
! 		.offset = 0x00040000,
! 	}, { 
!  		.name = "Full", 
!  		.size = MTDPART_SIZ_FULL, 
!  		.offset = 0x00100000, 
  	}
  };
+ #endif
  
  static struct physmap_flash_data pdk7105_physmap_flash_data = {
  	.width		= 2,
*************** STM_NAND_DEVICE("stm-nand-flex", 2, &nan
*** 324,333 ****
  
  static struct platform_device *pdk7105_devices[] __initdata = {
  	&pdk7105_physmap_flash,
! 	&pdk7105_leds,
! 	&pdk7105_front_panel,
  	&pdk7105_phy_device,
! 	&spi_pio_device[0],
  };
  
  /* Configuration based on Futarque-RC signals train. */
--- 411,420 ----
  
  static struct platform_device *pdk7105_devices[] __initdata = {
  	&pdk7105_physmap_flash,
! /*	&pdk7105_leds,
! 	&pdk7105_front_panel,*/
  	&pdk7105_phy_device,
! /* &spi_pio_device[0],*/
  };
  
  /* Configuration based on Futarque-RC signals train. */
*************** static int __init device_init(void)
*** 390,395 ****
--- 477,483 ----
  		nand_device.id = 0;
  	}
  
+ #ifdef USE_IT
  	/* Setup the PCI_SERR# PIO */
  	if (gpio_request(PDK7105_GPIO_PCI_SERR, "PCI_SERR#") == 0) {
  		gpio_direction_input(PDK7105_GPIO_PCI_SERR);
*************** static int __init device_init(void)
*** 400,408 ****
  		printk(KERN_WARNING "pdk7105: Failed to claim PCI SERR PIO!\n");
  	}
  	stx7105_configure_pci(&pdk7105_pci_config);
  
  	stx7105_configure_sata(0);
! 	stx7105_configure_pwm(&pwm_private_info);
  	stx7105_configure_ssc(&ssc_private_info);
  
  	/*
--- 488,497 ----
  		printk(KERN_WARNING "pdk7105: Failed to claim PCI SERR PIO!\n");
  	}
  	stx7105_configure_pci(&pdk7105_pci_config);
+ #endif    
  
  	stx7105_configure_sata(0);
! /*	stx7105_configure_pwm(&pwm_private_info);*/
  	stx7105_configure_ssc(&ssc_private_info);
  
  	/*
*************** static int __init device_init(void)
*** 419,438 ****
  	stx7105_configure_usb(0, &usb_init[0]);
  	stx7105_configure_usb(1, &usb_init[1]);
  
! 	phy_reset_pin = stpio_request_set_pin(15, 5, "eth_phy_reset",
  					      STPIO_OUT, 1);
  	stx7105_configure_ethernet(0, stx7105_ethernet_mii, 0, 0, 0, 0);
! 	stx7105_configure_lirc(&lirc_scd);
  	stx7105_configure_audio_pins(0, 0, 1, 0);
! 
  	/*
  	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
  	 * concept of WP/VPP, we must permanently enable it
  	 */
! 	stpio_request_set_pin(6, 4, "FLASH_WP", STPIO_OUT, 1);
  
  	stx7105_configure_nand(&nand_device);
! 	spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));
  
  	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
  }
--- 508,530 ----
  	stx7105_configure_usb(0, &usb_init[0]);
  	stx7105_configure_usb(1, &usb_init[1]);
  
! 	phy_reset_pin = stpio_request_set_pin(5, 5, "eth_phy_reset",
  					      STPIO_OUT, 1);
  	stx7105_configure_ethernet(0, stx7105_ethernet_mii, 0, 0, 0, 0);
! /*	stx7105_configure_lirc(&lirc_scd);
  	stx7105_configure_audio_pins(0, 0, 1, 0);
! */
  	/*
  	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
  	 * concept of WP/VPP, we must permanently enable it
  	 */
! 	stpio_request_set_pin(15, 0, "FLASH_WP", STPIO_OUT, 1);
  
  	stx7105_configure_nand(&nand_device);
! /*	spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));*/
! 
! /* enable optical out */
!     stpio_request_pin (10, 6, "opt_out", STPIO_ALT_OUT);
  
  	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
  }
*** linux-sh4/drivers/net/stmmac/common.h	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/common.h.patched	2011-02-03 12:07:07.000000000 +0100
***************
*** 207,232 ****
  	return;
  }
  
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low)
  {
! 	unsigned int hi_addr, lo_addr;
! 
! 	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
! 
! 	/* Extract the MAC address from the high and low words */
! 	addr[0] = lo_addr & 0xff;
! 	addr[1] = (lo_addr >> 8) & 0xff;
! 	addr[2] = (lo_addr >> 16) & 0xff;
! 	addr[3] = (lo_addr >> 24) & 0xff;
! 	addr[4] = hi_addr & 0xff;
! 	addr[5] = (hi_addr >> 8) & 0xff;
  
  	return;
  }
--- 207,238 ----
  	return;
  }
  
+ static inline unsigned char hex(char ch)
+ {
+ 	if (ch >= 'a' && ch <= 'f')
+ 		return ch-'a'+10;
+ 	if (ch >= 'A' && ch <= 'F')
+ 		return ch-'A'+10;
+ 	if (ch >= '0' && ch <= '9')
+ 		return ch-'0';
+ 	return -1;
+ }
+ 
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low, char* ethaddr)
  {
! 	int i, j;
! 	for(i = 0, j = 0; i < 6; i++)
! 	{
! 		addr[i] = (hex(ethaddr[j])<<4) + hex(ethaddr[j + 1]);
! 		j += 3;
! 	}
! 	printk("PARSE CMDLINE: %s\n", ethaddr);
! 	printk("ETHADDR: %02X:%02X:%02X:%02X:%02X:%02X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
  
  	return;
  }
***************
*** 296,302 ****
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n);
  };
  
  struct mac_link {
--- 302,308 ----
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n, char* ethaddr);
  };
  
  struct mac_link {
*** linux-sh4/drivers/net/stmmac/gmac.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/gmac.c.patched	2011-02-03 12:11:18.000000000 +0100
***************
*** 414,423 ****
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n));
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
--- 414,423 ----
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n, char* ethaddr)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n), ethaddr);
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
*** linux-sh4/drivers/net/stmmac/mac100.c	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/mac100.c.patched	2011-02-03 12:11:15.000000000 +0100
***************
*** 280,288 ****
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW);
  }
  
  static void mac100_set_filter(struct net_device *dev)
--- 280,288 ----
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n, char* ethaddr)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW, ethaddr);
  }
  
  static void mac100_set_filter(struct net_device *dev)
*** linux-sh4/drivers/net/stmmac/stmmac_main.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/stmmac_main.c.patched	2011-02-03 12:07:11.000000000 +0100
***************
*** 143,148 ****
--- 143,150 ----
  module_param(tx_coe, int, S_IRUGO | S_IWUSR);
  MODULE_PARM_DESC(tx_coe, "GMAC COE type 2 [on/off]");
  
+ static char g_env_mac[] = "00:00:00:00:00:00";
+ 
  static const u32 default_msg_level = (NETIF_MSG_DRV | NETIF_MSG_PROBE |
  				      NETIF_MSG_LINK | NETIF_MSG_IFUP |
  				      NETIF_MSG_IFDOWN | NETIF_MSG_TIMER);
***************
*** 1883,1889 ****
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
--- 1885,1891 ----
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0, g_env_mac);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
***************
*** 2348,2353 ****
--- 2350,2358 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }
