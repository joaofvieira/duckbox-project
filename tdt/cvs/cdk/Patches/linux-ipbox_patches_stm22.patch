diff -urN linux-2.6.17.14_stm22_0041.org/arch/sh/kernel/setup.c linux-2.6.17.14_stm22_0041/arch/sh/kernel/setup.c
--- linux-2.6.17.14_stm22_0041.org/arch/sh/kernel/setup.c	2011-07-06 05:23:30.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/arch/sh/kernel/setup.c	2011-07-06 06:19:43.878765721 +0200
@@ -77,6 +77,7 @@
 #define LOADER_TYPE (*(unsigned long *) (PARAM+0x00c))
 #define INITRD_START (*(unsigned long *) (PARAM+0x010))
 #define INITRD_SIZE (*(unsigned long *) (PARAM+0x014))
+#define BDINFO                  ((char*)PARAM+0x018)
 /* ... */
 #ifdef CONFIG_CMDLINE_BOOL
 #define COMMAND_LINE CONFIG_CMDLINE
@@ -113,6 +114,8 @@
 
 unsigned long memory_start, memory_end;
 
+bd_t bd;
+
 static char mv_name[MV_NAME_SIZE] __initdata = "";
 static unsigned long mv_io_base __initdata = 0;
 static int mv_mmio_enable __initdata = 0;
@@ -157,6 +160,9 @@
 #endif
 	struct sh_machine_vector *mv = NULL;
 
+	/* copy bdinfo */
+	memcpy((char*)&bd, BDINFO, sizeof(bd));
+
 	mv = get_mv_byname(mv_name);
 
 #ifdef CONFIG_SH_UNKNOWN
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox55.c linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox55.c
--- linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox55.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox55.c	2011-06-08 15:19:55.000000000 +0200
@@ -0,0 +1,251 @@
+/*
+ *
+ * Chip mappings for the abipbox 99xx boards.
+ * Adapted from physmap.c
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <asm/io.h>
+#include <asm/errno.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+/*
+ *	abipbox 55 flash partition
+ *
+ * boot		: 0x00040000
+ * env var	: 0x00020000
+ * kernel	: 0x00240000
+ * root		: *
+ *
+ */
+
+// 64MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x04000000
+
+#define BOOT_SIZE	0x00040000	// boot loader
+#define WELCOME_SIZE	0x00020000	// welcome+boot config
+#define KERNEL_SIZE	0x00240000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-BOOT_SIZE-WELCOME_SIZE-KERNEL_SIZE)
+
+
+#define ONBOARD_ADDR 0x00000000
+
+#define ONBOARD_SIZE		WINDOW_SIZE
+#define ONBOARD_BANKWIDTH	2
+
+#ifdef CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_ADDR CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_SIZE CONFIG_MTD_STBOARDS_STEM_SIZE
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct mtd_info *onboard_mtd;
+#endif
+#ifdef STEM_ADDR
+static struct mtd_info *stem_mtd;
+#endif
+
+#define dprintk(x...)  printk(KERN_DEBUG x)
+//#define dprintk(x...)
+
+#ifdef NEED_VPP
+/*
+ * The comments in mtd/map.h say that this needs to nest correctly,
+ * but in practice vpp gets disabled without being first enabled,
+ * so clearly this is not true. So ignore this, and simply enable and
+ * disable as requested.
+ */
+static void stboards_set_vpp(struct map_info *map, int vpp)
+{
+	if (vpp) {
+		harp_set_vpp_on();
+	} else {
+		harp_set_vpp_off();
+	}
+}
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct map_info onboard_map = {
+	.name = "Onboard_Flash",
+	.size = ONBOARD_SIZE,
+	.bankwidth = ONBOARD_BANKWIDTH,
+#ifdef NEED_VPP
+	.set_vpp = stboards_set_vpp,
+#endif
+};
+#endif
+
+#ifdef STEM_ADDR
+static struct map_info stem_map = {
+	.name = "STEM Flash",
+	.size = STEM_SIZE,
+	.bankwidth = 4,
+};
+#endif
+
+
+static struct mtd_partition onboard_partitions[] = {
+	{
+		.name 		= "nor.boot",
+		.offset 	= 0x00000000,
+		.size		= BOOT_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "nor.config_welcome",
+		.offset		= BOOT_SIZE,
+		.size		= WELCOME_SIZE,
+	},
+	{	.name		= "nor.kernel",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,
+	},
+	{
+		.name		= "nor.root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE,
+		.size		= ROOT_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,  //FLASH_E2 commented
+	},
+	/* partitions for upgrade */
+	{
+		.name		= "nor.kernel_root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE+ROOT_SIZE,
+	},
+	{
+		.name		= "nor.all_noboot",
+		.offset		= BOOT_SIZE,
+		.size		= (WINDOW_SIZE-BOOT_SIZE),
+	},
+	{
+		.name		= "nor.all",
+		.offset		= 0,
+		.size		= WINDOW_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+};
+static struct mtd_partition *parsed_parts;
+static const char *probes[] = { "cmdlinepart", NULL };
+
+int __init init_stboards(void)
+{
+	int nr_parts = 0;
+
+#ifdef CONFIG_SH_STB1_HARP
+	/* Enable writing to Flash */
+	ctrl_outl(3, EPLD_FLASHCTRL);
+#endif
+
+#if ONBOARD_SIZE > 0
+	printk(KERN_NOTICE
+	       "Generic ST boards onboard flash device: 0x%08x (%d.%dMB) at 0x%08x\n",
+	       ONBOARD_SIZE,
+	       (ONBOARD_SIZE / (1024 * 1024)),
+	       (ONBOARD_SIZE / ((1024 * 1024) / 10)) % 10, ONBOARD_ADDR);
+
+	onboard_map.phys = ONBOARD_ADDR;
+	onboard_map.size = ONBOARD_SIZE;
+	onboard_map.virt =
+	    (unsigned long *)ioremap(onboard_map.phys, onboard_map.size);
+	dprintk("%s %s[%d] onboard_map.virt = 0x%08x\n", __FILE__, __FUNCTION__,
+		__LINE__, (int)onboard_map.virt);
+	if (onboard_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap onboard Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&onboard_map);
+#endif
+#if defined(CONFIG_SH_STB1_HARP) || defined(CONFIG_SH_STB1_EVAL)
+		onboard_mtd = do_map_probe("jedec_probe", &onboard_map);
+#else
+		onboard_mtd = do_map_probe("cfi_probe", &onboard_map);
+#endif
+		if (onboard_mtd != NULL) {
+			onboard_mtd->owner = THIS_MODULE;
+#ifdef CONFIG_MTD_CMDLINE_PARTS
+			nr_parts =
+			    parse_mtd_partitions(onboard_mtd, probes,
+						 &parsed_parts, 0);
+#endif
+			if (nr_parts <= 0)
+				add_mtd_partitions(onboard_mtd,
+						   onboard_partitions,
+						   ARRAY_SIZE
+						   (onboard_partitions));
+			else
+				add_mtd_partitions(onboard_mtd, parsed_parts,
+						   nr_parts);
+		} else {
+			iounmap((void *)onboard_map.virt);
+		}
+	}
+#endif
+
+#ifdef STEM_ADDR
+	printk(KERN_NOTICE
+	       "Generic ST boards STEM flash device: 0x%08x at 0x%08x\n",
+	       STEM_SIZE, STEM_ADDR);
+
+	stem_map.phys = STEM_ADDR;
+	stem_map.size = STEM_SIZE;
+	stem_map.virt = (unsigned long)ioremap(stem_map.phys, stem_map.size);
+	if (stem_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap STEM Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&stem_map);
+#endif
+		stem_mtd = do_map_probe("cfi_probe", &stem_map);
+		if (stem_mtd != NULL) {
+			stem_mtd->owner = THIS_MODULE;
+#if ONBOARD_SIZE > 0
+			add_mtd_device(stem_mtd);
+#else
+			add_mtd_partitions(stem_mtd, onboard_partitions,
+					   ARRAY_SIZE(onboard_partitions));
+#endif
+		} else {
+			iounmap((void *)stem_map.virt);
+		}
+	}
+#endif
+
+	return -ENXIO;
+}
+
+static void __exit cleanup_stboards(void)
+{
+#if ONBOARD_SIZE > 0
+	if (onboard_mtd) {
+		del_mtd_partitions(onboard_mtd);
+		map_destroy(onboard_mtd);
+	}
+	if (onboard_map.virt != 0) {
+		iounmap((void *)onboard_map.virt);
+		onboard_map.virt = 0;
+	}
+#endif
+
+#ifdef STEM_ADDR
+	if (stem_mtd) {
+		del_mtd_partitions(stem_mtd);
+		map_destroy(stem_mtd);
+	}
+	if (stem_map.virt != 0) {
+		iounmap((void *)stem_map.virt);
+		stem_map.virt = 0;
+	}
+#endif
+}
+
+module_init(init_stboards);
+module_exit(cleanup_stboards);
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox99.c linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox99.c
--- linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox99.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox99.c	2011-07-06 06:00:37.870765880 +0200
@@ -0,0 +1,251 @@
+/*
+ *
+ * Chip mappings for the abipbox 99xx boards.
+ * Adapted from physmap.c
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <asm/io.h>
+#include <asm/errno.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+/*
+ *	abipbox 99 flash partition
+ *
+ * boot		: 0x00040000
+ * env var	: 0x00020000
+ * kernel	: 0x00240000
+ * root		: *
+ *
+ */
+
+// 32MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x02000000
+
+#define BOOT_SIZE	0x00040000	// boot loader
+#define WELCOME_SIZE	0x00020000	// welcome+boot config
+#define KERNEL_SIZE	0x00240000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-BOOT_SIZE-WELCOME_SIZE-KERNEL_SIZE)
+
+
+#define ONBOARD_ADDR 0x00000000
+
+#define ONBOARD_SIZE		WINDOW_SIZE
+#define ONBOARD_BANKWIDTH	2
+
+#ifdef CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_ADDR CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_SIZE CONFIG_MTD_STBOARDS_STEM_SIZE
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct mtd_info *onboard_mtd;
+#endif
+#ifdef STEM_ADDR
+static struct mtd_info *stem_mtd;
+#endif
+
+#define dprintk(x...)  printk(KERN_DEBUG x)
+//#define dprintk(x...)
+
+#ifdef NEED_VPP
+/*
+ * The comments in mtd/map.h say that this needs to nest correctly,
+ * but in practice vpp gets disabled without being first enabled,
+ * so clearly this is not true. So ignore this, and simply enable and
+ * disable as requested.
+ */
+static void stboards_set_vpp(struct map_info *map, int vpp)
+{
+	if (vpp) {
+		harp_set_vpp_on();
+	} else {
+		harp_set_vpp_off();
+	}
+}
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct map_info onboard_map = {
+	.name = "Onboard_Flash",
+	.size = ONBOARD_SIZE,
+	.bankwidth = ONBOARD_BANKWIDTH,
+#ifdef NEED_VPP
+	.set_vpp = stboards_set_vpp,
+#endif
+};
+#endif
+
+#ifdef STEM_ADDR
+static struct map_info stem_map = {
+	.name = "STEM Flash",
+	.size = STEM_SIZE,
+	.bankwidth = 4,
+};
+#endif
+
+
+static struct mtd_partition onboard_partitions[] = {
+	{
+		.name 		= "nor.boot",
+		.offset 	= 0x00000000,
+		.size		= BOOT_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "nor.config_welcome",
+		.offset		= BOOT_SIZE,
+		.size		= WELCOME_SIZE,
+	},
+	{	.name		= "nor.kernel",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,
+	},
+	{
+		.name		= "nor.root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE,
+		.size		= ROOT_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,  //FLASH_E2 commented
+	},
+	/* partitions for upgrade */
+	{
+		.name		= "nor.kernel_root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE+ROOT_SIZE,
+	},
+	{
+		.name		= "nor.all_noboot",
+		.offset		= BOOT_SIZE,
+		.size		= (WINDOW_SIZE-BOOT_SIZE),
+	},
+	{
+		.name		= "nor.all",
+		.offset		= 0,
+		.size		= WINDOW_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+};
+static struct mtd_partition *parsed_parts;
+static const char *probes[] = { "cmdlinepart", NULL };
+
+int __init init_stboards(void)
+{
+	int nr_parts = 0;
+
+#ifdef CONFIG_SH_STB1_HARP
+	/* Enable writing to Flash */
+	ctrl_outl(3, EPLD_FLASHCTRL);
+#endif
+
+#if ONBOARD_SIZE > 0
+	printk(KERN_NOTICE
+	       "Generic ST boards onboard flash device: 0x%08x (%d.%dMB) at 0x%08x\n",
+	       ONBOARD_SIZE,
+	       (ONBOARD_SIZE / (1024 * 1024)),
+	       (ONBOARD_SIZE / ((1024 * 1024) / 10)) % 10, ONBOARD_ADDR);
+
+	onboard_map.phys = ONBOARD_ADDR;
+	onboard_map.size = ONBOARD_SIZE;
+	onboard_map.virt =
+	    (unsigned long *)ioremap(onboard_map.phys, onboard_map.size);
+	dprintk("%s %s[%d] onboard_map.virt = 0x%08x\n", __FILE__, __FUNCTION__,
+		__LINE__, (int)onboard_map.virt);
+	if (onboard_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap onboard Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&onboard_map);
+#endif
+#if defined(CONFIG_SH_STB1_HARP) || defined(CONFIG_SH_STB1_EVAL)
+		onboard_mtd = do_map_probe("jedec_probe", &onboard_map);
+#else
+		onboard_mtd = do_map_probe("cfi_probe", &onboard_map);
+#endif
+		if (onboard_mtd != NULL) {
+			onboard_mtd->owner = THIS_MODULE;
+#ifdef CONFIG_MTD_CMDLINE_PARTS
+			nr_parts =
+			    parse_mtd_partitions(onboard_mtd, probes,
+						 &parsed_parts, 0);
+#endif
+			if (nr_parts <= 0)
+				add_mtd_partitions(onboard_mtd,
+						   onboard_partitions,
+						   ARRAY_SIZE
+						   (onboard_partitions));
+			else
+				add_mtd_partitions(onboard_mtd, parsed_parts,
+						   nr_parts);
+		} else {
+			iounmap((void *)onboard_map.virt);
+		}
+	}
+#endif
+
+#ifdef STEM_ADDR
+	printk(KERN_NOTICE
+	       "Generic ST boards STEM flash device: 0x%08x at 0x%08x\n",
+	       STEM_SIZE, STEM_ADDR);
+
+	stem_map.phys = STEM_ADDR;
+	stem_map.size = STEM_SIZE;
+	stem_map.virt = (unsigned long)ioremap(stem_map.phys, stem_map.size);
+	if (stem_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap STEM Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&stem_map);
+#endif
+		stem_mtd = do_map_probe("cfi_probe", &stem_map);
+		if (stem_mtd != NULL) {
+			stem_mtd->owner = THIS_MODULE;
+#if ONBOARD_SIZE > 0
+			add_mtd_device(stem_mtd);
+#else
+			add_mtd_partitions(stem_mtd, onboard_partitions,
+					   ARRAY_SIZE(onboard_partitions));
+#endif
+		} else {
+			iounmap((void *)stem_map.virt);
+		}
+	}
+#endif
+
+	return -ENXIO;
+}
+
+static void __exit cleanup_stboards(void)
+{
+#if ONBOARD_SIZE > 0
+	if (onboard_mtd) {
+		del_mtd_partitions(onboard_mtd);
+		map_destroy(onboard_mtd);
+	}
+	if (onboard_map.virt != 0) {
+		iounmap((void *)onboard_map.virt);
+		onboard_map.virt = 0;
+	}
+#endif
+
+#ifdef STEM_ADDR
+	if (stem_mtd) {
+		del_mtd_partitions(stem_mtd);
+		map_destroy(stem_mtd);
+	}
+	if (stem_map.virt != 0) {
+		iounmap((void *)stem_map.virt);
+		stem_map.virt = 0;
+	}
+#endif
+}
+
+module_init(init_stboards);
+module_exit(cleanup_stboards);
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox9900.c linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox9900.c
--- linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/ipbox9900.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.14_stm22_0041/drivers/mtd/maps/ipbox9900.c	2011-07-06 06:00:03.810769079 +0200
@@ -0,0 +1,251 @@
+/*
+ *
+ * Chip mappings for the abipbox 99xx boards.
+ * Adapted from physmap.c
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <asm/io.h>
+#include <asm/errno.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+
+/*
+ *	abipbox 9900 flash partition
+ *
+ * boot		: 0x00040000
+ * env var	: 0x00020000
+ * kernel	: 0x00240000
+ * root		: *
+ *
+ */
+
+// 32MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x02000000
+
+#define BOOT_SIZE	0x00040000	// boot loader
+#define WELCOME_SIZE	0x00020000	// welcome+boot config
+#define KERNEL_SIZE	0x00240000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-BOOT_SIZE-WELCOME_SIZE-KERNEL_SIZE)
+
+
+#define ONBOARD_ADDR 0x00000000
+
+#define ONBOARD_SIZE		WINDOW_SIZE
+#define ONBOARD_BANKWIDTH	2
+
+#ifdef CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_ADDR CONFIG_MTD_STBOARDS_STEM_ADDR
+#define STEM_SIZE CONFIG_MTD_STBOARDS_STEM_SIZE
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct mtd_info *onboard_mtd;
+#endif
+#ifdef STEM_ADDR
+static struct mtd_info *stem_mtd;
+#endif
+
+#define dprintk(x...)  printk(KERN_DEBUG x)
+//#define dprintk(x...)
+
+#ifdef NEED_VPP
+/*
+ * The comments in mtd/map.h say that this needs to nest correctly,
+ * but in practice vpp gets disabled without being first enabled,
+ * so clearly this is not true. So ignore this, and simply enable and
+ * disable as requested.
+ */
+static void stboards_set_vpp(struct map_info *map, int vpp)
+{
+	if (vpp) {
+		harp_set_vpp_on();
+	} else {
+		harp_set_vpp_off();
+	}
+}
+#endif
+
+#if ONBOARD_SIZE > 0
+static struct map_info onboard_map = {
+	.name = "Onboard_Flash",
+	.size = ONBOARD_SIZE,
+	.bankwidth = ONBOARD_BANKWIDTH,
+#ifdef NEED_VPP
+	.set_vpp = stboards_set_vpp,
+#endif
+};
+#endif
+
+#ifdef STEM_ADDR
+static struct map_info stem_map = {
+	.name = "STEM Flash",
+	.size = STEM_SIZE,
+	.bankwidth = 4,
+};
+#endif
+
+
+static struct mtd_partition onboard_partitions[] = {
+	{
+		.name 		= "nor.boot",
+		.offset 	= 0x00000000,
+		.size		= BOOT_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "nor.config_welcome",
+		.offset		= BOOT_SIZE,
+		.size		= WELCOME_SIZE,
+	},
+	{	.name		= "nor.kernel",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,
+	},
+	{
+		.name		= "nor.root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE,
+		.size		= ROOT_SIZE,
+//		.mask_flags	= MTD_WRITEABLE,  //FLASH_E2 commented
+	},
+	/* partitions for upgrade */
+	{
+		.name		= "nor.kernel_root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE+ROOT_SIZE,
+	},
+	{
+		.name		= "nor.all_noboot",
+		.offset		= BOOT_SIZE,
+		.size		= (WINDOW_SIZE-BOOT_SIZE),
+	},
+	{
+		.name		= "nor.all",
+		.offset		= 0,
+		.size		= WINDOW_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+};
+static struct mtd_partition *parsed_parts;
+static const char *probes[] = { "cmdlinepart", NULL };
+
+int __init init_stboards(void)
+{
+	int nr_parts = 0;
+
+#ifdef CONFIG_SH_STB1_HARP
+	/* Enable writing to Flash */
+	ctrl_outl(3, EPLD_FLASHCTRL);
+#endif
+
+#if ONBOARD_SIZE > 0
+	printk(KERN_NOTICE
+	       "Generic ST boards onboard flash device: 0x%08x (%d.%dMB) at 0x%08x\n",
+	       ONBOARD_SIZE,
+	       (ONBOARD_SIZE / (1024 * 1024)),
+	       (ONBOARD_SIZE / ((1024 * 1024) / 10)) % 10, ONBOARD_ADDR);
+
+	onboard_map.phys = ONBOARD_ADDR;
+	onboard_map.size = ONBOARD_SIZE;
+	onboard_map.virt =
+	    (unsigned long *)ioremap(onboard_map.phys, onboard_map.size);
+	dprintk("%s %s[%d] onboard_map.virt = 0x%08x\n", __FILE__, __FUNCTION__,
+		__LINE__, (int)onboard_map.virt);
+	if (onboard_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap onboard Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&onboard_map);
+#endif
+#if defined(CONFIG_SH_STB1_HARP) || defined(CONFIG_SH_STB1_EVAL)
+		onboard_mtd = do_map_probe("jedec_probe", &onboard_map);
+#else
+		onboard_mtd = do_map_probe("cfi_probe", &onboard_map);
+#endif
+		if (onboard_mtd != NULL) {
+			onboard_mtd->owner = THIS_MODULE;
+#ifdef CONFIG_MTD_CMDLINE_PARTS
+			nr_parts =
+			    parse_mtd_partitions(onboard_mtd, probes,
+						 &parsed_parts, 0);
+#endif
+			if (nr_parts <= 0)
+				add_mtd_partitions(onboard_mtd,
+						   onboard_partitions,
+						   ARRAY_SIZE
+						   (onboard_partitions));
+			else
+				add_mtd_partitions(onboard_mtd, parsed_parts,
+						   nr_parts);
+		} else {
+			iounmap((void *)onboard_map.virt);
+		}
+	}
+#endif
+
+#ifdef STEM_ADDR
+	printk(KERN_NOTICE
+	       "Generic ST boards STEM flash device: 0x%08x at 0x%08x\n",
+	       STEM_SIZE, STEM_ADDR);
+
+	stem_map.phys = STEM_ADDR;
+	stem_map.size = STEM_SIZE;
+	stem_map.virt = (unsigned long)ioremap(stem_map.phys, stem_map.size);
+	if (stem_map.virt == 0) {
+		printk(KERN_ERR "Failed to ioremap STEM Flash\n");
+	} else {
+#ifndef CONFIG_MTD_COMPLEX_MAPPINGS
+		simple_map_init(&stem_map);
+#endif
+		stem_mtd = do_map_probe("cfi_probe", &stem_map);
+		if (stem_mtd != NULL) {
+			stem_mtd->owner = THIS_MODULE;
+#if ONBOARD_SIZE > 0
+			add_mtd_device(stem_mtd);
+#else
+			add_mtd_partitions(stem_mtd, onboard_partitions,
+					   ARRAY_SIZE(onboard_partitions));
+#endif
+		} else {
+			iounmap((void *)stem_map.virt);
+		}
+	}
+#endif
+
+	return -ENXIO;
+}
+
+static void __exit cleanup_stboards(void)
+{
+#if ONBOARD_SIZE > 0
+	if (onboard_mtd) {
+		del_mtd_partitions(onboard_mtd);
+		map_destroy(onboard_mtd);
+	}
+	if (onboard_map.virt != 0) {
+		iounmap((void *)onboard_map.virt);
+		onboard_map.virt = 0;
+	}
+#endif
+
+#ifdef STEM_ADDR
+	if (stem_mtd) {
+		del_mtd_partitions(stem_mtd);
+		map_destroy(stem_mtd);
+	}
+	if (stem_map.virt != 0) {
+		iounmap((void *)stem_map.virt);
+		stem_map.virt = 0;
+	}
+#endif
+}
+
+module_init(init_stboards);
+module_exit(cleanup_stboards);
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/Kconfig linux-2.6.17.14_stm22_0041/drivers/mtd/maps/Kconfig
--- linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/Kconfig	2011-07-06 05:23:31.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/drivers/mtd/maps/Kconfig	2011-07-06 06:09:01.930767442 +0200
@@ -25,7 +25,7 @@
 config MTD_PHYSMAP_START
 	hex "Physical start address of flash mapping"
 	depends on MTD_PHYSMAP
-	default "0x0000000"
+	default "0x8000000"
 	help
 	  This is the physical memory location at which the flash chips
 	  are mapped on your particular target board. Refer to the
@@ -38,7 +38,7 @@
 config MTD_PHYSMAP_LEN
 	hex "Physical length of flash mapping"
 	depends on MTD_PHYSMAP
-	default "0x0000000"
+	default "0x4000000"
 	help
 	  This is the total length of the mapping of the flash chips on
 	  your particular board. If there is space, or aliases, in the
@@ -673,5 +673,23 @@
         hex "STEM module size" if MTD_STBOARDS_STEM
         default "0x02000000"
 
+config MTD_IPBOX9900
+        tristate "CFI Flash device mapped on Ipbox 9900 board"
+        depends on SUPERH && MTD_CFI
+        help
+          Support for CFI Flash device mapped on ipbox 9900.
+
+config MTD_IPBOX99
+        tristate "CFI Flash device mapped on Ipbox 99 board"
+        depends on SUPERH && MTD_CFI
+        help
+          Support for CFI Flash device mapped on ipbox 99.
+
+config MTD_IPBOX55
+        tristate "CFI Flash device mapped on Ipbox 55 board"
+        depends on SUPERH && MTD_CFI
+        help
+          Support for CFI Flash device mapped on ipbox 55.
+
 endmenu
 
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/Makefile linux-2.6.17.14_stm22_0041/drivers/mtd/maps/Makefile
--- linux-2.6.17.14_stm22_0041.org/drivers/mtd/maps/Makefile	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/drivers/mtd/maps/Makefile	2011-07-06 06:02:29.226767968 +0200
@@ -74,3 +74,6 @@
 obj-$(CONFIG_MTD_MTX1)		+= mtx-1_flash.o
 obj-$(CONFIG_MTD_TQM834x)	+= tqm834x.o
 obj-$(CONFIG_MTD_STBOARDS)	+= stboards.o
+obj-$(CONFIG_MTD_IPBOX9900)	+= ipbox9900.o
+obj-$(CONFIG_MTD_IPBOX99)	+= ipbox99.o
+obj-$(CONFIG_MTD_IPBOX55)	+= ipbox55.o
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/net/Kconfig linux-2.6.17.14_stm22_0041/drivers/net/Kconfig
--- linux-2.6.17.14_stm22_0041.org/drivers/net/Kconfig	2011-07-06 05:23:31.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/drivers/net/Kconfig	2011-07-06 06:14:59.538768926 +0200
@@ -1894,7 +1894,7 @@
         tristate "STM MAC Ethernet driver"
         select MII
         select PHYLIB
-        depends on NET_ETHERNET && (SH_STB7100_MBOARD || SH_STB7109E_REF || SH_STB7100_REF || SH_STB5202_REF)
+        depends on NET_ETHERNET && (SH_STB7100_MBOARD || SH_STB7109E_REF || SH_STB7100_REF || SH_STB5202_REF) || SH_IPBOX9900 || SH_IPBOX99 || SH_IPBOX55
         ---help---
           This is the driver for the STMMAC on-chip Ethernet controller.
           The STb7109 ETH subsystem is composed of three main layers:
@@ -1939,6 +1939,9 @@
         prompt "MDIO communication mode"
 	default PHY_MII if SH_STB7100_REF
 	default PHY_MII if SH_STB7100_MBOARD
+        default PHY_MII if SH_IPBOX9900
+        default PHY_MII if SH_IPBOX99
+        default PHY_MII if SH_IPBOX55
 
 config  PHY_MII
         bool "MII mode"
@@ -1947,6 +1950,7 @@
 	  between the MAC and PHY
 
 config  PHY_RMII
+	depends on STE101P
         bool "RMII mode"
         help
 	  Use the Reduced Media Independent Interface (RMII).
diff -urN linux-2.6.17.14_stm22_0041.org/drivers/net/stmmac.c linux-2.6.17.14_stm22_0041/drivers/net/stmmac.c
--- linux-2.6.17.14_stm22_0041.org/drivers/net/stmmac.c	2011-07-06 05:23:31.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/drivers/net/stmmac.c	2011-07-06 06:22:54.294764532 +0200
@@ -34,6 +34,7 @@
 #include <linux/mii.h>
 #include <linux/phy.h>
 #include <linux/st_soc.h>
+#include <asm/setup.h>	/* board info structure */
 #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
 #include <linux/if_vlan.h>
 #endif
@@ -2604,7 +2605,18 @@
 	lp->pause = pause;
 
 	/* Get the MAC address */
-	get_mac_address(ioaddr, dev->dev_addr);
+//	get_mac_address(ioaddr, dev->dev_addr);
+
+	printk(KERN_INFO "\tHW MAC address: ");
+	/* copy mac address from u-boot */
+	dev->dev_addr[0] = bd.bi_enetaddr[0];
+	dev->dev_addr[1] = bd.bi_enetaddr[1];
+	dev->dev_addr[2] = bd.bi_enetaddr[2];
+	dev->dev_addr[3] = bd.bi_enetaddr[3];
+	dev->dev_addr[4] = bd.bi_enetaddr[4];
+	dev->dev_addr[5] = bd.bi_enetaddr[5];
+
+	print_mac_addr(dev->dev_addr);
 
 	if (!is_valid_ether_addr(dev->dev_addr)) {
 		printk(KERN_WARNING "\tno valid MAC address; "
diff -urN linux-2.6.17.14_stm22_0041.org/include/asm-sh/setup.h linux-2.6.17.14_stm22_0041/include/asm-sh/setup.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/setup.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/setup.h	2011-07-06 06:16:37.362769472 +0200
@@ -4,5 +4,39 @@
 
 #define COMMAND_LINE_SIZE 512
 
+typedef struct bd_info
+{
+	int bi_baudrate;        /* serial console baudrate */
+	unsigned long bi_ip_addr;       /* IP Address */
+	unsigned char bi_enetaddr[6];   /* Ethernet adress */
+	unsigned long bi_arch_number;   /* unique id for this board */
+	unsigned long bi_boot_params;   /* where this board expects params */
+	unsigned long bi_memstart;      /* start of DRAM memory */
+	unsigned long bi_memsize;       /* size  of DRAM memory in bytes */
+	unsigned long bi_flashstart;    /* start of FLASH memory */
+	unsigned long bi_flashsize;     /* size  of FLASH memory */
+	unsigned long bi_flashoffset;   /* reserved area for startup monitor */
+#if defined(CONFIG_CPU_SUBTYPE_STB7100)
+	unsigned long bi_devid;
+	unsigned long bi_pll0frq;
+	unsigned long bi_pll1frq;
+	unsigned long bi_st40cpufrq;
+	unsigned long bi_st40busfrq;
+	unsigned long bi_st40perfrq;
+	unsigned long bi_st231frq;
+	unsigned long bi_stbusfrq;
+	unsigned long bi_emifrq;
+	unsigned long bi_lmifrq;
+#elif defined(CONFIG_CPU_SUBTYPE_STI5528)
+	unsigned long bi_pll1frq;
+	unsigned long bi_st40cpufrq;
+	unsigned long bi_st40busfrq;
+	unsigned long bi_st40perfrq;
+	unsigned long bi_emifrq;
+#endif
+}__attribute__ ((packed)) bd_t;
+
+extern bd_t bd; 
+
 #endif /* _SH_SETUP_H */
 #endif /* __KERNEL__ */
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox9900/setup.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox9900/coproc.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox9900/coproc.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox9900/coproc.h	2011-07-06 06:16:37.362769472 +0200

@@ -0,0 +1,13 @@
+/* ------------------------------------------------------------------------
+ *
+ *  HW dependent actions: STb7100 platform
+ */
+
+#define N_COPROC        2
+
+#define COPR_RAM_START	 	0x4000000	/* ST231 LMI RAM base address */
+
+#define SYSCON_REGS_BASE        P2SEGADDR(0x19001000)
+#define SYSCFG_09		(SYSCON_REGS_BASE + 0x124)
+#define SYSCFG_BOOT_REG(x)	(SYSCON_REGS_BASE + (x ? 0x168 : 0x170))
+#define SYSCFG_RESET_REG(x)	(SYSCON_REGS_BASE + (x ? 0x16c : 0x174))
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox9900/st40_ide.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox9900/st40_ide.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox9900/st40_ide.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox9900/st40_ide.h	2011-07-06 06:16:37.362769472 +0200
@@ -0,0 +1,51 @@
+/*
+ * include/asm-sh/stb7100ref/st40_ide.h
+ *
+ * This file contains all the definitions to support
+ * the IDE interface on stb7100ref board.
+ * IDE is mapped into EMI bank3.
+ */
+
+/* STb7100 only has one hw interface */
+#undef MAX_HWIFS
+#define MAX_HWIFS       1
+
+/* The ATA base address. This is the base of EMI bank 3. */
+#define ATA_ADDRESS           0xA2800000
+
+/* The ATA data base address offset. It is used to map
+ * all the ide registers on the hwif interface
+ * starting from this offset.
+ */
+#define ATA_DATA_OFFS_ADDRESS	0x00200000
+
+/* The ide registers offset. Registers will be stored into
+ * the hwif interface with a costant offset starting from
+ * the ATA data register address.
+ */
+#define REG_OFFSET		0x20000
+
+/* Only the control register has a different offset. */
+#define CTRL_REG_OFFSET		-0x40000
+
+/* ATA IRQ number */
+#define ATA_IRQ			IRL1_IRQ
+
+/* ide_enable does nothing because there is no external hardware to configure */
+#define ide_enable()
+
+/* hddi_reset does nothing for stb7100, because it does not have a HDDI interface. */
+#define hddi_reset()
+
+/* hddi_set_pio_timings does nothing for mb411, because it has not an HDDI
+ * interface and PIO timings are setted into the EMI bank3 (PIO4).
+ */
+#define hddi_set_pio_timings(rate)
+
+/* ide_ack_intr returns 1 when invoked.
+ * It is needed by the ide_intr function.
+ */
+#define ide_ack_intr(hwif)	1
+
+/* DMA in not supported for mb411 board, so hddi_setup_dma does nothing. */
+#define hddi_setup_dma(interface, address, offset)
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox99/setup.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox99/coproc.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox99/coproc.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox99/coproc.h	2011-07-06 06:16:37.362769472 +0200

@@ -0,0 +1,13 @@
+/* ------------------------------------------------------------------------
+ *
+ *  HW dependent actions: STb7100 platform
+ */
+
+#define N_COPROC        2
+
+#define COPR_RAM_START	 	0x4000000	/* ST231 LMI RAM base address */
+
+#define SYSCON_REGS_BASE        P2SEGADDR(0x19001000)
+#define SYSCFG_09		(SYSCON_REGS_BASE + 0x124)
+#define SYSCFG_BOOT_REG(x)	(SYSCON_REGS_BASE + (x ? 0x168 : 0x170))
+#define SYSCFG_RESET_REG(x)	(SYSCON_REGS_BASE + (x ? 0x16c : 0x174))
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox99/st40_ide.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox99/st40_ide.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox99/st40_ide.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox99/st40_ide.h	2011-07-06 06:16:37.362769472 +0200
@@ -0,0 +1,51 @@
+/*
+ * include/asm-sh/stb7100ref/st40_ide.h
+ *
+ * This file contains all the definitions to support
+ * the IDE interface on stb7100ref board.
+ * IDE is mapped into EMI bank3.
+ */
+
+/* STb7100 only has one hw interface */
+#undef MAX_HWIFS
+#define MAX_HWIFS       1
+
+/* The ATA base address. This is the base of EMI bank 3. */
+#define ATA_ADDRESS           0xA2800000
+
+/* The ATA data base address offset. It is used to map
+ * all the ide registers on the hwif interface
+ * starting from this offset.
+ */
+#define ATA_DATA_OFFS_ADDRESS	0x00200000
+
+/* The ide registers offset. Registers will be stored into
+ * the hwif interface with a costant offset starting from
+ * the ATA data register address.
+ */
+#define REG_OFFSET		0x20000
+
+/* Only the control register has a different offset. */
+#define CTRL_REG_OFFSET		-0x40000
+
+/* ATA IRQ number */
+#define ATA_IRQ			IRL1_IRQ
+
+/* ide_enable does nothing because there is no external hardware to configure */
+#define ide_enable()
+
+/* hddi_reset does nothing for stb7100, because it does not have a HDDI interface. */
+#define hddi_reset()
+
+/* hddi_set_pio_timings does nothing for mb411, because it has not an HDDI
+ * interface and PIO timings are setted into the EMI bank3 (PIO4).
+ */
+#define hddi_set_pio_timings(rate)
+
+/* ide_ack_intr returns 1 when invoked.
+ * It is needed by the ide_intr function.
+ */
+#define ide_ack_intr(hwif)	1
+
+/* DMA in not supported for mb411 board, so hddi_setup_dma does nothing. */
+#define hddi_setup_dma(interface, address, offset)
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox55/setup.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox55/coproc.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox55/coproc.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox55/coproc.h	2011-07-06 06:16:37.362769472 +0200

@@ -0,0 +1,13 @@
+/* ------------------------------------------------------------------------
+ *
+ *  HW dependent actions: STb7100 platform
+ */
+
+#define N_COPROC        2
+
+#define COPR_RAM_START	 	0x4000000	/* ST231 LMI RAM base address */
+
+#define SYSCON_REGS_BASE        P2SEGADDR(0x19001000)
+#define SYSCFG_09		(SYSCON_REGS_BASE + 0x124)
+#define SYSCFG_BOOT_REG(x)	(SYSCON_REGS_BASE + (x ? 0x168 : 0x170))
+#define SYSCFG_RESET_REG(x)	(SYSCON_REGS_BASE + (x ? 0x16c : 0x174))
diff -u --recursive --new-file linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox55/st40_ide.h linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox55/st40_ide.h
--- linux-2.6.17.14_stm22_0041.org/include/asm-sh/ipbox55/st40_ide.h	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/include/asm-sh/ipbox55/st40_ide.h	2011-07-06 06:16:37.362769472 +0200
@@ -0,0 +1,51 @@
+/*
+ * include/asm-sh/stb7100ref/st40_ide.h
+ *
+ * This file contains all the definitions to support
+ * the IDE interface on stb7100ref board.
+ * IDE is mapped into EMI bank3.
+ */
+
+/* STb7100 only has one hw interface */
+#undef MAX_HWIFS
+#define MAX_HWIFS       1
+
+/* The ATA base address. This is the base of EMI bank 3. */
+#define ATA_ADDRESS           0xA2800000
+
+/* The ATA data base address offset. It is used to map
+ * all the ide registers on the hwif interface
+ * starting from this offset.
+ */
+#define ATA_DATA_OFFS_ADDRESS	0x00200000
+
+/* The ide registers offset. Registers will be stored into
+ * the hwif interface with a costant offset starting from
+ * the ATA data register address.
+ */
+#define REG_OFFSET		0x20000
+
+/* Only the control register has a different offset. */
+#define CTRL_REG_OFFSET		-0x40000
+
+/* ATA IRQ number */
+#define ATA_IRQ			IRL1_IRQ
+
+/* ide_enable does nothing because there is no external hardware to configure */
+#define ide_enable()
+
+/* hddi_reset does nothing for stb7100, because it does not have a HDDI interface. */
+#define hddi_reset()
+
+/* hddi_set_pio_timings does nothing for mb411, because it has not an HDDI
+ * interface and PIO timings are setted into the EMI bank3 (PIO4).
+ */
+#define hddi_set_pio_timings(rate)
+
+/* ide_ack_intr returns 1 when invoked.
+ * It is needed by the ide_intr function.
+ */
+#define ide_ack_intr(hwif)	1
+
+/* DMA in not supported for mb411 board, so hddi_setup_dma does nothing. */
+#define hddi_setup_dma(interface, address, offset)
diff -urN linux-2.6.17.14_stm22_0041.org/sound/stm/stb7100_pcm.c linux-2.6.17.14_stm22_0041/sound/stm/stb7100_pcm.c
--- linux-2.6.17.14_stm22_0041.org/sound/stm/stb7100_pcm.c	2011-07-06 05:23:29.000000000 +0200
+++ linux-2.6.17.14_stm22_0041/sound/stm/stb7100_pcm.c	2011-07-06 06:16:37.362769472 +0200
@@ -760,7 +760,7 @@
 	unsigned long flags=0;
 
 	fmtreg = PCMP_FORMAT_32  | PCMP_ALIGN_START  | PCMP_MSB_FIRST  |
-		 chip->i2s_sampling_edge |PCMP_PADDING_ON;
+		 PCMP_CLK_FALLING /* this is needed because cut >= 3.0 with internal dac using is bad calculated!!! chip->i2s_sampling_edge */ |PCMP_PADDING_ON;
 
 	ctrlreg = (runtime->period_size * runtime->channels) << PCMP_SAMPLES_SHIFT;
 
