*** linux-2.6.17.14_stm22_0040_orig_2/drivers/net/stmmac.c	Sun Feb 21 20:04:23 2010
--- linux/drivers/net/stmmac.c	Mon Feb 22 00:22:49 2010
***************
*** 298,304 ****
  {
  	unsigned int tbs = size;
  
! 	/* According to the TBS1/2 RBS1/2 bits the maximum 
  	 * buffer size is 0x7ff */
  	if (unlikely(tbs >= DMA_BUFFER_SIZE))
  		tbs = 0x7ff;
--- 298,304 ----
  {
  	unsigned int tbs = size;
  
! 	/* According to the TBS1/2 RBS1/2 bits the maximum
  	 * buffer size is 0x7ff */
  	if (unlikely(tbs >= DMA_BUFFER_SIZE))
  		tbs = 0x7ff;
***************
*** 720,732 ****
  	lo_addr = (unsigned int)readl(ioaddr + MAC_ADDR_LOW);
  
  	/* Extract the MAC address from the high and low words */
  	addr[0] = lo_addr & 0xff;
  	addr[1] = (lo_addr >> 8) & 0xff;
  	addr[2] = (lo_addr >> 16) & 0xff;
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! 
  	return;
  }
  
--- 720,741 ----
  	lo_addr = (unsigned int)readl(ioaddr + MAC_ADDR_LOW);
  
  	/* Extract the MAC address from the high and low words */
+ #if 0
  	addr[0] = lo_addr & 0xff;
  	addr[1] = (lo_addr >> 8) & 0xff;
  	addr[2] = (lo_addr >> 16) & 0xff;
  	addr[3] = (lo_addr >> 24) & 0xff;
  	addr[4] = hi_addr & 0xff;
  	addr[5] = (hi_addr >> 8) & 0xff;
! #else
! /* nassar: set mac addre to 0, will force nwhw_config to read cmdline mac */
! 	addr[0] = 0;
! 	addr[1] = 0;
! 	addr[2] = 0;
! 	addr[3] = 0;
! 	addr[4] = 0;
! 	addr[5] = 0;
! #endif
  	return;
  }
  
***************
*** 1024,1030 ****
  /**
   * dump_dma_csr
   * @ioaddr: device I/O address
!  * Description:  this function dumps the STMAC DMA registers 
   */
  static inline void dump_dma_csr(unsigned long ioaddr)
  {
--- 1033,1039 ----
  /**
   * dump_dma_csr
   * @ioaddr: device I/O address
!  * Description:  this function dumps the STMAC DMA registers
   */
  static inline void dump_dma_csr(unsigned long ioaddr)
  {
***************
*** 1049,1055 ****
   * Description:  this function performs the DMA SW reset.
   *  NOTE1: the MII_TxClk and the MII_RxClk must be active before this
   *	   SW reset otherwise the MAC core won't exit the reset state.
!  *  NOTE2: after a SW reset all interrupts are disabled 
   */
  static void stmmac_dma_reset(unsigned long ioaddr)
  {
--- 1058,1064 ----
   * Description:  this function performs the DMA SW reset.
   *  NOTE1: the MII_TxClk and the MII_RxClk must be active before this
   *	   SW reset otherwise the MAC core won't exit the reset state.
!  *  NOTE2: after a SW reset all interrupts are disabled
   */
  static void stmmac_dma_reset(unsigned long ioaddr)
  {
***************
*** 1135,1141 ****
   * Description: the DMA init function performs:
   * - the DMA RX/TX SW descriptors initialization
   * - the DMA HW controller initialization
!  * NOTE: the DMA TX/RX processes will be started in the 'open' method. 
   */
  static int stmmac_dma_init(struct net_device *dev)
  {
--- 1144,1150 ----
   * Description: the DMA init function performs:
   * - the DMA RX/TX SW descriptors initialization
   * - the DMA HW controller initialization
!  * NOTE: the DMA TX/RX processes will be started in the 'open' method.
   */
  static int stmmac_dma_init(struct net_device *dev)
  {
***************
*** 1751,1757 ****
  	}
  
  	/* If there are more than one fragment, we set the interrupt
! 	 * on completition field in the latest fragment (where we also set 
  	 * the LS bit. */
  	p[entry].des1 |= TDES1_CONTROL_LS | TDES1_CONTROL_IC;
  	p[first].des0 |= OWN_BIT;	/* to avoid race condition */
--- 1760,1766 ----
  	}
  
  	/* If there are more than one fragment, we set the interrupt
! 	 * on completition field in the latest fragment (where we also set
  	 * the LS bit. */
  	p[entry].des1 |= TDES1_CONTROL_LS | TDES1_CONTROL_IC;
  	p[first].des0 |= OWN_BIT;	/* to avoid race condition */
***************
*** 1773,1779 ****
  	if (TX_BUFFS_AVAIL(lp) <= (MAX_SKB_FRAGS + 1)) {
  		netif_stop_queue(dev);
  	} else {
! 		/* Allow aggregation of Tx interrupts and clear 
  		   TDES1[31] */
  		if (lp->tx_aggregation <= tx_aggregation) {
  			lp->tx_aggregation++;
--- 1782,1788 ----
  	if (TX_BUFFS_AVAIL(lp) <= (MAX_SKB_FRAGS + 1)) {
  		netif_stop_queue(dev);
  	} else {
! 		/* Allow aggregation of Tx interrupts and clear
  		   TDES1[31] */
  		if (lp->tx_aggregation <= tx_aggregation) {
  			lp->tx_aggregation++;
***************
*** 1977,1986 ****
  /**
   *  stmmac_tx_timeout
   *  @dev : Pointer to net device structure
!  *  Description: this function is called when a packet transmission fails to 
   *   complete within a reasonable period. The driver will mark the error in the
   *   netdev structure and arrange for the device to be reset to a sane state
!  *   in order to transmit a new packet. 
   */
  void stmmac_tx_timeout(struct net_device *dev)
  {
--- 1986,1995 ----
  /**
   *  stmmac_tx_timeout
   *  @dev : Pointer to net device structure
!  *  Description: this function is called when a packet transmission fails to
   *   complete within a reasonable period. The driver will mark the error in the
   *   netdev structure and arrange for the device to be reset to a sane state
!  *   in order to transmit a new packet.
   */
  void stmmac_tx_timeout(struct net_device *dev)
  {
***************
*** 2013,2019 ****
  /**
   *  stmmac_stats
   *  @dev : Pointer to net device structure
!  *  Description: this function returns statistics to the caller application 
   */
  struct net_device_stats *stmmac_stats(struct net_device *dev)
  {
--- 2022,2028 ----
  /**
   *  stmmac_stats
   *  @dev : Pointer to net device structure
!  *  Description: this function returns statistics to the caller application
   */
  struct net_device_stats *stmmac_stats(struct net_device *dev)
  {
***************
*** 2489,2495 ****
   *  a proprietary structure used to pass information to the driver.
   *  @cmd :  IOCTL command
   *  Description:
!  *  Currently there are no special functionality supported in IOCTL, just the 
   *  phy_mii_ioctl (it changes the PHY reg. without regard to current state).
   */
  static int stmmac_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
--- 2498,2504 ----
   *  a proprietary structure used to pass information to the driver.
   *  @cmd :  IOCTL command
   *  Description:
!  *  Currently there are no special functionality supported in IOCTL, just the
   *  phy_mii_ioctl (it changes the PHY reg. without regard to current state).
   */
  static int stmmac_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
***************
*** 2524,2530 ****
  	struct eth_driver_local *lp = netdev_priv(dev);
  
  	spin_lock(&lp->lock);
! 	/* VLAN Tag identifier register already contains the VLAN tag ID. 
  	   (see hw mac initialization). */
  	lp->vlgrp = grp;
  	spin_unlock(&lp->lock);
--- 2533,2539 ----
  	struct eth_driver_local *lp = netdev_priv(dev);
  
  	spin_lock(&lp->lock);
! 	/* VLAN Tag identifier register already contains the VLAN tag ID.
  	   (see hw mac initialization). */
  	lp->vlgrp = grp;
  	spin_unlock(&lp->lock);
***************
*** 2550,2556 ****
   *  @dev : device pointer
   *  @ioaddr: device I/O address
   *  Description: The function initializes the network device structure for
!  *		 the STMMAC driver. It also calls the low level routines 
   *		 in order to init the HW (i.e. the DMA engine)
   */
  static int stmmac_probe(struct net_device *dev, unsigned long ioaddr)
--- 2559,2565 ----
   *  @dev : device pointer
   *  @ioaddr: device I/O address
   *  Description: The function initializes the network device structure for
!  *		 the STMMAC driver. It also calls the low level routines
   *		 in order to init the HW (i.e. the DMA engine)
   */
  static int stmmac_probe(struct net_device *dev, unsigned long ioaddr)
***************
*** 2607,2614 ****
  	get_mac_address(ioaddr, dev->dev_addr);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");
  	}
  
  	if ((ret = register_netdev(dev))) {
--- 2616,2623 ----
  	get_mac_address(ioaddr, dev->dev_addr);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
! 		/*printk(KERN_WARNING "\tno valid MAC address; "
! 		       "please, set using ifconfig or nwhwconfig!\n");*/
  	}
  
  	if ((ret = register_netdev(dev))) {
***************
*** 2626,2633 ****
  /**
   * stmmac_dvr_probe
   * @pdev: platform device pointer
!  * Description: The driver is initialized through platform_device.  
!  * 		Structures which define the configuration needed by the board 
   *		are defined in a board structure in arch/sh/boards/st/ .
   */
  static int stmmac_dvr_probe(struct platform_device *pdev)
--- 2635,2642 ----
  /**
   * stmmac_dvr_probe
   * @pdev: platform device pointer
!  * Description: The driver is initialized through platform_device.
!  * 		Structures which define the configuration needed by the board
   *		are defined in a board structure in arch/sh/boards/st/ .
   */
  static int stmmac_dvr_probe(struct platform_device *pdev)
