*** a/arch/sh/boards/mach-mb442/setup.c	2010-04-30 19:33:50.000000000 +0200
--- b/arch/sh/boards/mach-mb442/setup.c.ufs910	2010-05-06 20:15:24.512834583 +0200
***************
*** 21,26 ****
--- 21,27 ----
  #include <linux/mtd/physmap.h>
  #include <linux/stm/platform.h>
  #include <linux/stm/stx7100.h>
+ #include <linux/bpa2.h>
  #include <asm/irl.h>
  
  
***************
*** 29,35 ****
--- 30,54 ----
  #define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
  #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
  
+ const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+ const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
  
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+       {
+ 	      .name  = "LMI_VID",
+ 	      .start = 0x10800000,
+ 	      .size  = 0x03800000,
+ 	      .flags = 0,
+ 	      .aka   = LMI_VID_partalias
+       },
+       {
+ 	      .name  = "LMI_SYS",
+ 	      .start = 0,
+ 	      .size  = 0x00E00000,
+ 	      .flags = 0,
+ 	      .aka   = LMI_SYS_partalias
+       }
+ };
  
  void __init mb442_setup(char** cmdline_p)
  {
***************
*** 40,68 ****
  	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
  			.hw_flow_control = 0,
  			.is_console = 1, });
  	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
  			.hw_flow_control = 0,
  			.is_console = 0, });
  }
  
! static struct resource mb442_smc91x_resources[] = {
  	[0] = {
! 		.start	= 0x02000300,
! 		.end	= 0x02000300 + 0xff,
! 		.flags	= IORESOURCE_MEM,
! 	},
  	[1] = {
! 		.start	= IRL0_IRQ,
! 		.end	= IRL0_IRQ,
! 		.flags	= IORESOURCE_IRQ,
! 	},
  };
  
  static struct platform_device mb442_smc91x_device = {
  	.name		= "smc91x",
  	.id		= 0,
! 	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
! 	.resource	= mb442_smc91x_resources,
  };
  
  static void mb442_set_vpp(struct map_info *info, int enable)
--- 59,102 ----
  	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
  			.hw_flow_control = 0,
  			.is_console = 1, });
+ 
  	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
  			.hw_flow_control = 0,
  			.is_console = 0, });
+ 
+   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
! static struct resource smsc_lan9115_resources[] = {
  	[0] = {
!  		      .flags = IORESOURCE_MEM,
!  		      .start = 0x02000000,
!  		      .end   = 0x020000ff,
!  	      },
  	[1] = {
!  		      .flags = IORESOURCE_IRQ,
!  		      .start = IRL0_IRQ,
!  		      .end   = IRL0_IRQ,
!  	      },
! 	[2] = {
!  		      .flags = IORESOURCE_IRQ,
!  		      .name  = "polarity",
!  		      .start = 1,
!  		      .end   = 1,
!  	      },
! 	[3] = {
!  		      .flags = IORESOURCE_IRQ,
!  		      .name  = "type",
!  		      .start = 1,
!  		      .end   = 1,
!   	      },
  };
  
  static struct platform_device mb442_smc91x_device = {
  	.name		= "smc91x",
  	.id		= 0,
! 	.num_resources	= ARRAY_SIZE(smsc_lan9115_resources),
! 	.resource	= smsc_lan9115_resources,
  };
  
  static void mb442_set_vpp(struct map_info *info, int enable)
***************
*** 86,98 ****
  
  static int mb442_phy_reset(void* bus)
  {
  	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
  	udelay(1);
  	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
  	udelay(1);
  	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
  
! 	return 1;
  }
  
  static struct plat_stmmacphy_data mb442_phy_private_data = {
--- 120,134 ----
  
  static int mb442_phy_reset(void* bus)
  {
+ /* on ufs922 2.4 is the tuner
  	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
  	udelay(1);
  	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
  	udelay(1);
  	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
  
! */	return 1;
! 
  }
  
  static struct plat_stmmacphy_data mb442_phy_private_data = {
***************
*** 103,127 ****
  	.phy_reset = &mb442_phy_reset,
  };
  
! static struct platform_device mb442_phy_device = {
! 	.name		= "stmmacphy",
! 	.id		= 0,
! 	.num_resources	= 1,
! 	.resource	= (struct resource[]) {
!                 {
! 			.name	= "phyirq",
! 			.start	= IRL3_IRQ,
! 			.end	= IRL3_IRQ,
! 			.flags	= IORESOURCE_IRQ,
! 		},
! 	},
! 	.dev.platform_data = &mb442_phy_private_data,
  };
  
  static struct platform_device *mb442_devices[] __initdata = {
  	&mb442_smc91x_device,
  	&mb442_physmap_flash,
! 	&mb442_phy_device,
  };
  
  static int __init mb442_device_init(void)
--- 139,153 ----
  	.phy_reset = &mb442_phy_reset,
  };
  
! static struct platform_device led_device = {
!        .name		= "ufs910-led",
!        .id		= -1,
  };
  
  static struct platform_device *mb442_devices[] __initdata = {
  	&mb442_smc91x_device,
  	&mb442_physmap_flash,
!  	&led_device,
  };
  
  static int __init mb442_device_init(void)
***************
*** 133,139 ****
--- 159,168 ----
  			.out1_enabled = 1, });
  
  	stx7100_configure_ssc_i2c(0);
+ /*
  	stx7100_configure_ssc_spi(1, NULL);
+ */
+ 	stx7100_configure_ssc_i2c(1);
  	stx7100_configure_ssc_i2c(2);
  
  	stx7100_configure_usb();
***************
*** 151,159 ****
  	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
  	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
  
  	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
  	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
! 
  	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
  			.mode = stx7100_ethernet_mode_mii,
  			.ext_clk = 0,
--- 180,189 ----
  	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
  	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
  
+ /*
  	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
  	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
! */
  	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
  			.mode = stx7100_ethernet_mode_mii,
  			.ext_clk = 0,
***************
*** 162,171 ****
  	/* Reset the SMSC 91C111 Ethernet chip */
  	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
  	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
! 	udelay(1);
  	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
- 	udelay(1);
  	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
  
  	return platform_add_devices(mb442_devices,
  			ARRAY_SIZE(mb442_devices));
--- 192,203 ----
  	/* Reset the SMSC 91C111 Ethernet chip */
  	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
  	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
! 
! 	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
  	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
  	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
+ 	udelay(1000);
+ 	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
  
  	return platform_add_devices(mb442_devices,
  			ARRAY_SIZE(mb442_devices));
